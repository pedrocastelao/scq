{"version":3,"file":"imask.min.js","sources":["../src/core/utils.ts","../src/core/action-details.ts","../src/core/holder.ts","../src/masked/factory.ts","../src/controls/mask-element.ts","../src/controls/html-mask-element.ts","../src/controls/html-input-mask-element.ts","../src/controls/html-contenteditable-mask-element.ts","../src/controls/input.ts","../src/core/change-details.ts","../src/core/continuous-tail-details.ts","../src/masked/base.ts","../src/masked/pattern/chunk-tail-details.ts","../src/masked/pattern/cursor.ts","../src/masked/pattern/fixed-definition.ts","../src/masked/pattern/input-definition.ts","../src/masked/regexp.ts","../src/masked/pattern.ts","../src/masked/range.ts","../src/masked/date.ts","../src/masked/dynamic.ts","../src/masked/enum.ts","../src/masked/function.ts","../src/masked/number.ts","../src/masked/pipe.ts","../src/index.ts"],"sourcesContent":["/** Checks if value is string */\nexport\nfunction isString (str: unknown): str is string {\n  return typeof str === 'string' || str instanceof String;\n}\n\n/** Checks if value is object */\nexport\nfunction isObject (obj: unknown): obj is Object {\n  return typeof obj === 'object' && obj != null && obj?.constructor?.name === 'Object';\n}\n\nexport\nfunction pick<T, K extends keyof T, V> (\n  obj: T,\n  keys: K[] | ((v: V, k: K) => boolean),\n): Pick<T, K> {\n  if (Array.isArray(keys)) return pick(obj, (_, k) => keys.includes(k));\n  return (Object.entries(obj) as unknown as Array<[K, V]>)\n    .reduce((acc, [k, v]) => {\n      if (keys(v, k)) acc[k] = v;\n      return acc;\n    }, {} as any);\n}\n\n/**\n  Direction\n  @prop {string} NONE\n  @prop {string} LEFT\n  @prop {string} FORCE_LEFT\n  @prop {string} RIGHT\n  @prop {string} FORCE_RIGHT\n*/\nexport\nconst DIRECTION = {\n  NONE: 'NONE',\n  LEFT: 'LEFT',\n  FORCE_LEFT: 'FORCE_LEFT',\n  RIGHT: 'RIGHT',\n  FORCE_RIGHT: 'FORCE_RIGHT',\n} as const;\n\n/**\n  Direction\n  @enum {string}\n*/\nexport\ntype Direction = typeof DIRECTION[keyof typeof DIRECTION];\n\nexport\nfunction forceDirection (direction: Direction): Direction {\n  switch (direction) {\n    case DIRECTION.LEFT:\n      return DIRECTION.FORCE_LEFT;\n    case DIRECTION.RIGHT:\n      return DIRECTION.FORCE_RIGHT;\n    default:\n      return direction;\n  }\n}\n\n/** Escapes regular expression control chars */\nexport\nfunction escapeRegExp (str: string): string {\n  return str.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n}\n\n// cloned from https://github.com/epoberezkin/fast-deep-equal with small changes\nexport\nfunction objectIncludes (b: any, a: any): boolean {\n  if (a === b) return true;\n\n  var arrA = Array.isArray(a)\n    , arrB = Array.isArray(b)\n    , i;\n\n  if (arrA && arrB) {\n    if (a.length != b.length) return false;\n    for (i = 0; i < a.length; i++)\n      if (!objectIncludes(a[i], b[i])) return false;\n    return true;\n  }\n\n  if (arrA != arrB) return false;\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    var dateA = a instanceof Date\n      , dateB = b instanceof Date;\n    if (dateA && dateB) return a.getTime() == b.getTime();\n    if (dateA != dateB) return false;\n\n    var regexpA = a instanceof RegExp\n      , regexpB = b instanceof RegExp;\n    if (regexpA && regexpB) return a.toString() == b.toString();\n    if (regexpA != regexpB) return false;\n\n    var keys = Object.keys(a);\n    // if (keys.length !== Object.keys(b).length) return false;\n\n    for (i = 0; i < keys.length; i++)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = 0; i < keys.length; i++)\n      if(!objectIncludes(b[keys[i]], a[keys[i]])) return false;\n\n    return true;\n  } else if (a && b && typeof a === 'function' && typeof b === 'function') {\n      return a.toString() === b.toString()\n  }\n\n  return false;\n}\n\n/** Selection range */\nexport\ntype Selection = {\n  start: number;\n  end: number;\n};\n","import { type Direction, type Selection, DIRECTION } from './utils';\n\nexport\ntype ActionDetailsOptions = Pick<ActionDetails,\n  | 'value'\n  | 'cursorPos'\n  | 'oldValue'\n  | 'oldSelection'\n>;\n\n\n/** Provides details of changing input */\nexport default\nclass ActionDetails {\n  /** Current input value */\n  declare value: string;\n  /** Current cursor position */\n  declare cursorPos: number;\n  /** Old input value */\n  declare oldValue: string;\n  /** Old selection */\n  declare oldSelection: Selection;\n\n  constructor (opts: ActionDetailsOptions) {\n    Object.assign(this, opts);\n\n    // double check if left part was changed (autofilling, other non-standard input triggers)\n    while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\n      --this.oldSelection.start;\n    }\n  }\n\n  /** Start changing position */\n  get startChangePos (): number {\n    return Math.min(this.cursorPos, this.oldSelection.start);\n  }\n\n  /** Inserted symbols count */\n  get insertedCount (): number {\n    return this.cursorPos - this.startChangePos;\n  }\n\n  /** Inserted symbols */\n  get inserted (): string {\n    return this.value.substr(this.startChangePos, this.insertedCount);\n  }\n\n  /** Removed symbols count */\n  get removedCount (): number {\n    // Math.max for opposite operation\n    return Math.max((this.oldSelection.end - this.startChangePos) ||\n      // for Delete\n      this.oldValue.length - this.value.length, 0);\n  }\n\n  /** Removed symbols */\n  get removed (): string {\n    return this.oldValue.substr(this.startChangePos, this.removedCount);\n  }\n\n  /** Unchanged head symbols */\n  get head (): string {\n    return this.value.substring(0, this.startChangePos);\n  }\n\n  /** Unchanged tail symbols */\n  get tail (): string {\n    return this.value.substring(this.startChangePos + this.insertedCount);\n  }\n\n  /** Remove direction */\n  get removeDirection (): Direction {\n    if (!this.removedCount || this.insertedCount) return DIRECTION.NONE;\n\n    // align right if delete at right\n    return (\n      (this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos) &&\n      // if not range removed (event with backspace)\n      this.oldSelection.end === this.oldSelection.start\n    ) ?\n      DIRECTION.RIGHT :\n      DIRECTION.LEFT;\n  }\n}\n","import type { default as _InputMask, InputMaskElement as _InputMaskElement } from '../controls/input';\nimport type { default as _Masked } from '../masked/base';\nimport type { default as _MaskedPattern } from '../masked/pattern';\nimport type { default as _MaskedDate } from '../masked/date';\nimport type { default as _MaskedDynamic } from '../masked/dynamic';\nimport type { default as _MaskedEnum } from '../masked/enum';\nimport type { default as _MaskedRange } from '../masked/range';\nimport type { default as _MaskedNumber } from '../masked/number';\nimport type { default as _MaskedFunction } from '../masked/function';\nimport type { default as _MaskedRegExp } from '../masked/regexp';\nimport type {\n  default as _createMask,\n  FactoryArg,\n} from '../masked/factory';\nimport type { default as _ChangeDetails } from './change-details';\n\nimport type { default as _MaskElement } from '../controls/mask-element';\nimport type { default as _HTMLMaskElement } from '../controls/html-mask-element';\nimport type { default as _HTMLContenteditableMaskElement } from '../controls/html-contenteditable-mask-element';\nimport type {\n  createPipe as _createPipe,\n  pipe as _pipe,\n  PIPE_TYPE as _PIPE_TYPE\n} from '../masked/pipe';\n\n\n/** Applies mask on element */\nfunction IMask<Opts extends FactoryArg> (el: _InputMaskElement, opts: Opts): _InputMask<Opts> {\n  // currently available only for input-like elements\n  return new IMask.InputMask(el, opts);\n}\n\ndeclare namespace IMask {\n  export let InputMask: typeof _InputMask;\n  export let createMask: typeof _createMask;\n  export let Masked: typeof _Masked;\n  export let MaskedPattern: typeof _MaskedPattern;\n  export let MaskedDate: typeof _MaskedDate;\n  export let MaskedDynamic: typeof _MaskedDynamic;\n  export let MaskedEnum: typeof _MaskedEnum;\n  export let MaskedRange: typeof _MaskedRange;\n  export let MaskedNumber: typeof _MaskedNumber;\n  export let MaskedFunction: typeof _MaskedFunction;\n  export let MaskedRegExp: typeof _MaskedRegExp;\n  export let ChangeDetails: typeof _ChangeDetails;\n  export let MaskElement: typeof _MaskElement;\n  export let HTMLMaskElement: typeof _HTMLMaskElement;\n  export let HTMLContenteditableMaskElement: typeof _HTMLContenteditableMaskElement;\n  export let createPipe: typeof _createPipe;\n  export let pipe: typeof _pipe;\n  export let PIPE_TYPE: typeof _PIPE_TYPE;\n}\n\nexport default IMask;\n","import { isString, pick, isObject } from '../core/utils';\nimport type Masked from './base';\nimport { type MaskedOptions } from './base';\nimport IMask from '../core/holder';\n\nimport type MaskedRegExp from './regexp';\nimport type MaskedPattern from './pattern';\nimport type MaskedFunction from './function';\nimport type MaskedDate from './date';\nimport type MaskedNumber from './number';\nimport type MaskedDynamic from './dynamic';\nimport type MaskedRange from './range';\nimport type MaskedEnum from './enum';\n\nimport { type MaskedEnumOptions } from './enum';\nimport { type MaskedRangeOptions } from './range';\nimport { type MaskedDynamicOptions } from './dynamic';\nimport { type MaskedPatternOptions } from './pattern';\nimport { type MaskedNumberOptions } from './number';\nimport { type MaskedRegExpOptions } from './regexp';\nimport { type MaskedFunctionOptions } from './function';\nimport { type MaskedDateOptions } from './date';\n\ntype MaskedDateFactoryOptions = Omit<MaskedDateOptions, 'mask'> & { mask: DateConstructor };\n\n\n// type MaskedConstructor =\n//   | typeof MaskedDate\n//   | typeof MaskedNumber\n//   | typeof MaskedEnum\n//   | typeof MaskedRange\n//   | typeof MaskedRegExp\n//   | typeof MaskedFunction\n//   | typeof MaskedPattern\n//   | typeof MaskedDynamic\n//   | typeof MaskedRegExp\n// ;\n\n// export type AnyMaskedOptions =\n//   | MaskedDateFactoryOptions\n//   | MaskedNumberOptions\n//   | MaskedPatternOptions\n//   | MaskedDynamicOptions\n//   | MaskedEnumOptions\n//   | MaskedRangeOptions\n//   | MaskedRegExpOptions\n//   | MaskedFunctionOptions\n//   | MaskedOptions<Masked>\n//   | { mask: MaskedConstructor }\n// ;\n\n// export type AnyMask =\n//   | MaskedDateFactoryOptions['mask']\n//   | MaskedNumberOptions['mask']\n//   | MaskedPatternOptions['mask']\n//   | MaskedDynamicOptions['mask']\n//   | MaskedRegExpOptions['mask']\n//   | MaskedFunctionOptions['mask']\n//   | Masked\n//   | MaskedConstructor\n// ;\n\nexport\ntype FactoryStaticOpts =\n  | MaskedDateFactoryOptions\n  | MaskedNumberOptions\n  | MaskedPatternOptions\n  | MaskedDynamicOptions\n  | MaskedRegExpOptions\n  | MaskedFunctionOptions\n;\n\nexport\ntype AllFactoryStaticOpts =\n  & MaskedDateFactoryOptions\n  & MaskedNumberOptions\n  & MaskedPatternOptions\n  & MaskedDynamicOptions\n  & MaskedRegExpOptions\n  & MaskedFunctionOptions\n  & MaskedEnumOptions\n  & MaskedRangeOptions\n;\n\nexport\ntype FactoryStaticReturnMasked<Opts extends FactoryStaticOpts> =\n  Opts extends MaskedDateFactoryOptions\n  ? MaskedDate\n  : Opts extends MaskedNumberOptions\n  ? MaskedNumber\n  : Opts extends MaskedEnumOptions\n  ? MaskedEnum\n  : Opts extends MaskedRangeOptions\n  ? MaskedRange\n  : Opts extends MaskedPatternOptions\n  ? MaskedPattern\n  : Opts extends MaskedDynamicOptions\n  ? MaskedDynamic\n  : Opts extends MaskedRegExpOptions\n  ? MaskedRegExp\n  : Opts extends MaskedFunctionOptions\n  ? MaskedFunction\n  : never\n;\n\n\nexport\ntype FactoryInstanceOpts = MaskedOptions & { mask: Masked };\n\nexport\ntype FactoryInstanceReturnMasked<Opts extends FactoryInstanceOpts> = Opts extends { mask: infer Masked } ? Masked : never;\n\nexport\ntype DeduceMaskedFromOpts<Opts extends FactoryStaticOpts> =\n  Opts extends MaskedPatternOptions\n  ? MaskedPattern\n  : Opts extends MaskedDateFactoryOptions\n  ? MaskedDate\n  : Opts extends MaskedNumberOptions\n  ? MaskedNumber\n  : Opts extends MaskedRegExpOptions\n  ? MaskedRegExp\n  : Opts extends MaskedFunctionOptions\n  ? MaskedFunction\n  : Opts extends MaskedDynamicOptions\n  ? MaskedDynamic\n  : Opts extends FactoryInstanceOpts\n  ? FactoryInstanceReturnMasked<Opts>\n  : never\n\nexport\ntype FactoryConstructorOpts = MaskedOptions & { mask:\n  | typeof Masked\n  | typeof MaskedDate\n  | typeof MaskedNumber\n  | typeof MaskedEnum\n  | typeof MaskedRange\n  | typeof MaskedRegExp\n  | typeof MaskedFunction\n  | typeof MaskedPattern\n  | typeof MaskedDynamic\n  | typeof MaskedRegExp\n};\n \nexport\ntype FactoryConstructorReturnMasked<Opts extends FactoryConstructorOpts> =\n  Opts extends { mask: typeof MaskedDate } ?\n  MaskedDate :\n  Opts extends { mask: typeof MaskedNumber } ?\n  MaskedNumber :\n  Opts extends { mask: typeof MaskedEnum } ?\n  MaskedEnum :\n  Opts extends { mask: typeof MaskedRange } ?\n  MaskedRange :\n  Opts extends { mask: typeof MaskedRegExp } ?\n  MaskedRegExp :\n  Opts extends { mask: typeof MaskedFunction } ?\n  MaskedFunction :\n  Opts extends { mask: typeof MaskedPattern } ?\n  MaskedPattern :\n  Opts extends { mask: typeof MaskedDynamic } ?\n  MaskedDynamic :\n  Opts extends { mask: typeof MaskedRegExp } ?\n  MaskedRegExp :\n  Masked\n;\n\nexport\ntype FactoryOpts = FactoryConstructorOpts | FactoryInstanceOpts | FactoryStaticOpts;\n\nexport\ntype FactoryArg = Masked | FactoryOpts;\n\nexport\ntype FactoryReturnMasked<Opts extends FactoryArg> =\n  Opts extends Masked\n  ? Opts\n  : Opts extends FactoryConstructorOpts\n  ? FactoryConstructorReturnMasked<Opts>\n  : Opts extends FactoryInstanceOpts\n  ? FactoryInstanceReturnMasked<Opts>\n  : Opts extends FactoryStaticOpts\n  ? FactoryStaticReturnMasked<Opts>\n  : never;\n\n\n// export\n// type DeduceMasked<Opts> =\n//   Opts extends Masked\n//   ? Opts\n//   : Opts extends FactoryStaticOpts\n//     ? DeduceMaskedFromOpts<Opts>\n//     : never;\n\n\n// export\n// type DeduceMaskedClass<Mask> =\n//   Mask extends Masked\n//     ? typeof Masked\n//     : Mask extends string\n//       ? typeof IMask.MaskedPattern\n//       : Mask extends DateConstructor\n//       ? typeof IMask.MaskedDate\n//       : Mask extends Date\n//       ? typeof IMask.MaskedDate\n//       : Mask extends NumberConstructor\n//       ? typeof IMask.MaskedNumber\n//       : Mask extends RegExp\n//       ? typeof IMask.MaskedRegExp\n//       : Mask extends Array<any>\n//       ? typeof IMask.MaskedDynamic\n//       : Mask extends ArrayConstructor\n//       ? typeof IMask.MaskedDynamic\n//       : Mask extends Function\n//       ? typeof IMask.MaskedFunction\n//       : never;\n\n// export\n// type MaskedTypedValue<Mask> = Mask extends NumberConstructor\n//   ? number\n//   : Mask extends DateConstructor\n//   ? Date\n//   : string;\n\n\n// export\n// type AllMaskedOptions =\n//   & MaskedDateFactoryOptions\n//   & MaskedNumberOptions\n//   & MaskedPatternOptions\n//   & MaskedDynamicOptions\n//   & MaskedEnumOptions\n//   & MaskedRangeOptions\n//   & MaskedDynamicOptions\n//   & MaskedRegExpOptions\n//   & MaskedFunctionOptions\n//   & FactoryInstanceOpts\n//   & FactoryConstructorOpts\n// ;\n\n\n\n/** Get Masked class by mask type */\n// export function maskedClass(mask: string): typeof MaskedPattern;\n// export function maskedClass(mask: DateConstructor): typeof MaskedDate;\n// export function maskedClass(mask: NumberConstructor): typeof MaskedNumber;\n// export function maskedClass(mask: Array<any> | ArrayConstructor): typeof MaskedDynamic;\n// export function maskedClass(mask: MaskedDate): typeof MaskedDate;\n// export function maskedClass(mask: MaskedNumber): typeof MaskedNumber;\n// export function maskedClass(mask: MaskedEnum): typeof MaskedEnum;\n// export function maskedClass(mask: MaskedRange): typeof MaskedRange;\n// export function maskedClass(mask: MaskedRegExp): typeof MaskedRegExp;\n// export function maskedClass(mask: MaskedFunction): typeof MaskedFunction;\n// export function maskedClass(mask: MaskedPattern): typeof MaskedPattern;\n// export function maskedClass(mask: MaskedDynamic): typeof MaskedDynamic;\n// export function maskedClass(mask: Masked): typeof Masked;\n// export function maskedClass(mask: typeof Masked): typeof Masked;\n// export function maskedClass(mask: typeof MaskedDate): typeof MaskedDate;\n// export function maskedClass(mask: typeof MaskedNumber): typeof MaskedNumber;\n// export function maskedClass(mask: typeof MaskedEnum): typeof MaskedEnum;\n// export function maskedClass(mask: typeof MaskedRange): typeof MaskedRange;\n// export function maskedClass(mask: typeof MaskedRegExp): typeof MaskedRegExp;\n// export function maskedClass(mask: typeof MaskedFunction): typeof MaskedFunction;\n// export function maskedClass(mask: typeof MaskedPattern): typeof MaskedPattern;\n// export function maskedClass(mask: typeof MaskedDynamic): typeof MaskedDynamic;\n// export function maskedClass<Mask extends typeof Masked> (mask: Mask): Mask;\n// export function maskedClass(mask: RegExp): typeof MaskedRegExp;\n// export function maskedClass(mask: (value: string, ...args: any[]) => boolean): typeof MaskedFunction;\n// TODO\nexport function maskedClass(mask: any): any {\n  if (mask == null) throw new Error('mask property should be defined');\n\n  if (mask instanceof RegExp) return IMask.MaskedRegExp;\n  if (isString(mask)) return IMask.MaskedPattern;\n  if (mask === Date) return IMask.MaskedDate;\n  if (mask === Number) return IMask.MaskedNumber;\n  if (Array.isArray(mask) || mask === Array) return IMask.MaskedDynamic;\n  if (IMask.Masked && (mask as any).prototype instanceof IMask.Masked) return mask;\n  if (IMask.Masked && mask instanceof IMask.Masked) return mask.constructor;\n  if (mask instanceof Function) return IMask.MaskedFunction;\n\n  console.warn('Mask not found for mask', mask);  // eslint-disable-line no-console\n  return IMask.Masked;\n}\n\nexport\ntype NormalizedOpts = FactoryOpts & { _mask?: FactoryStaticOpts['mask'] };\n\nexport\nfunction normalizeOpts<Opts extends FactoryArg> (opts: Opts): NormalizedOpts {\n  if (!opts) throw new Error('Options in not defined');\n\n  if (IMask.Masked) {\n    if ((opts as any).prototype instanceof IMask.Masked) return { mask: opts } as NormalizedOpts;\n\n    const { mask=undefined, ...instanceOpts } = opts instanceof IMask.Masked ? { mask: opts } :\n      opts.mask instanceof IMask.Masked ? opts : {};\n\n    if (mask) {\n      const _mask = (mask as Masked).mask;\n\n      return {\n        ...pick(mask, (_, k: string) => !k.startsWith('_')),\n        mask: mask.constructor,\n        _mask,\n        ...instanceOpts,\n      } as NormalizedOpts;\n    }\n  }\n\n  if (!isObject(opts)) return { mask: opts };\n\n  return { ...opts } as NormalizedOpts;\n}\n\n// TODO can't use overloads here because of https://github.com/microsoft/TypeScript/issues/50754\n\n// From masked\n// export default function createMask<Opts extends Masked, ReturnMasked=Opts> (opts: Opts): ReturnMasked;\n// // From masked class\n// export default function createMask<Opts extends MaskedOptions<typeof Masked>, ReturnMasked extends Masked=InstanceType<Opts['mask']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedDate>, ReturnMasked extends MaskedDate=MaskedDate<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedNumber>, ReturnMasked extends MaskedNumber=MaskedNumber<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedEnum>, ReturnMasked extends MaskedEnum=MaskedEnum<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedRange>, ReturnMasked extends MaskedRange=MaskedRange<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedRegExp>, ReturnMasked extends MaskedRegExp=MaskedRegExp<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedFunction>, ReturnMasked extends MaskedFunction=MaskedFunction<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedPattern>, ReturnMasked extends MaskedPattern=MaskedPattern<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<typeof MaskedDynamic>, ReturnMasked extends MaskedDynamic=MaskedDynamic<Opts['parent']>> (opts: Opts): ReturnMasked;\n// // From mask opts\n// export default function createMask<Opts extends MaskedOptions<Masked>, ReturnMasked=Opts extends MaskedOptions<infer M> ? M : never> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedNumberOptions, ReturnMasked extends MaskedNumber=MaskedNumber<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedDateFactoryOptions, ReturnMasked extends MaskedDate=MaskedDate<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedEnumOptions, ReturnMasked extends MaskedEnum=MaskedEnum<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedRangeOptions, ReturnMasked extends MaskedRange=MaskedRange<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedPatternOptions, ReturnMasked extends MaskedPattern=MaskedPattern<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedDynamicOptions, ReturnMasked extends MaskedDynamic=MaskedDynamic<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<RegExp>, ReturnMasked extends MaskedRegExp=MaskedRegExp<Opts['parent']>> (opts: Opts): ReturnMasked;\n// export default function createMask<Opts extends MaskedOptions<Function>, ReturnMasked extends MaskedFunction=MaskedFunction<Opts['parent']>> (opts: Opts): ReturnMasked;\n\n/** Creates new {@link Masked} depending on mask type */\nexport default\nfunction createMask<Opts extends FactoryArg> (opts: Opts): FactoryReturnMasked<Opts> {\n  if (IMask.Masked && (opts instanceof IMask.Masked)) return opts as FactoryReturnMasked<Opts>;\n  const nOpts = normalizeOpts(opts);\n\n  const MaskedClass = maskedClass(nOpts.mask);\n  if (!MaskedClass) throw new Error('Masked class is not found for provided mask, appropriate module needs to be imported manually before creating mask.');\n\n  if (nOpts.mask === MaskedClass) delete nOpts.mask;\n  if (nOpts._mask) { nOpts.mask = nOpts._mask; delete nOpts._mask; }\n  return new MaskedClass(nOpts);\n}\n\n\nIMask.createMask = createMask;\n","import IMask from '../core/holder';\n\n\nexport\ntype ElementEvent =\n  'selectionChange' |\n  'input' |\n  'drop' |\n  'click' |\n  'focus' |\n  'commit';\n\n/**\n  Generic element API to use with mask\n  @interface\n*/\nexport default\nclass MaskElement {\n  /** */\n  declare readonly _unsafeSelectionStart: number;\n  /** */\n  declare readonly _unsafeSelectionEnd: number;\n  /** */\n  declare value: string;\n\n  /** Safely returns selection start */\n  get selectionStart (): number {\n    let start;\n    try {\n      start = this._unsafeSelectionStart;\n    } catch (e) {}\n\n    return start != null ?\n      start :\n      this.value.length;\n  }\n\n  /** Safely returns selection end */\n  get selectionEnd (): number {\n    let end;\n    try {\n      end = this._unsafeSelectionEnd;\n    } catch (e) {}\n\n    return end != null ?\n      end :\n      this.value.length;\n  }\n\n  /** Safely sets element selection */\n  select (start: number, end: number) {\n    if (start == null || end == null ||\n      start === this.selectionStart && end === this.selectionEnd) return;\n\n    try {\n      this._unsafeSelect(start, end);\n    } catch (e) {}\n  }\n\n  /** Should be overriden in subclasses */\n  _unsafeSelect (start: number, end: number): void {}\n  /** Should be overriden in subclasses */\n  get isActive (): boolean { return false; }\n  /** Should be overriden in subclasses */\n  bindEvents (handlers: {[key in ElementEvent]: Function}) {}\n  /** Should be overriden in subclasses */\n  unbindEvents (): void {}\n}\n\n\nIMask.MaskElement = MaskElement;\n","import MaskElement, { type ElementEvent } from './mask-element';\nimport IMask from '../core/holder';\n\n\n/** Bridge between HTMLElement and {@link Masked} */\nexport default\nclass HTMLMaskElement extends MaskElement {\n  /** Mapping between HTMLElement events and mask internal events */\n  static EVENTS_MAP = {\n    selectionChange: 'keydown',\n    input: 'input',\n    drop: 'drop',\n    click: 'click',\n    focus: 'focus',\n    commit: 'blur',\n  } as const;\n  /** HTMLElement to use mask on */\n  declare input: HTMLElement;\n  declare _handlers: {[k: string]: EventListener};\n\n  constructor (input: HTMLElement) {\n    super();\n    this.input = input;\n    this._handlers = {};\n  }\n\n  get rootElement (): HTMLDocument {\n    return (this.input.getRootNode?.() ?? document) as HTMLDocument;\n  }\n\n  /**\n    Is element in focus\n  */\n  get isActive (): boolean {\n    return this.input === this.rootElement.activeElement;\n  }\n\n  /**\n    Binds HTMLElement events to mask internal events\n  */\n  override bindEvents (handlers: {[key in ElementEvent]: EventListener}) {\n    (Object.keys(handlers) as Array<ElementEvent>)\n      .forEach(event => this._toggleEventHandler(HTMLMaskElement.EVENTS_MAP[event], handlers[event]));\n  }\n\n  /**\n    Unbinds HTMLElement events to mask internal events\n  */\n  override unbindEvents () {\n    Object.keys(this._handlers)\n      .forEach(event => this._toggleEventHandler(event));\n  }\n\n  _toggleEventHandler (event: string, handler?: EventListener): void {\n    if (this._handlers[event]) {\n      this.input.removeEventListener(event, this._handlers[event]);\n      delete this._handlers[event];\n    }\n\n    if (handler) {\n      this.input.addEventListener(event, handler);\n      this._handlers[event] = handler;\n    }\n  }\n}\n\n\nIMask.HTMLMaskElement = HTMLMaskElement;\n","import HTMLMaskElement from './html-mask-element';\nimport IMask from '../core/holder';\n\nexport\ntype InputElement = HTMLTextAreaElement | HTMLInputElement;\n\n/** Bridge between InputElement and {@link Masked} */\nexport default\nclass HTMLInputMaskElement extends HTMLMaskElement {\n  /** InputElement to use mask on */\n  declare input: InputElement;\n\n  constructor (input: InputElement) {\n    super(input);\n    this.input = input;\n    this._handlers = {};\n  }\n\n  /** Returns InputElement selection start */\n  // @ts-ignore\n  override get _unsafeSelectionStart (): number {\n    return this.input.selectionStart;\n  }\n\n  /** Returns InputElement selection end */\n  // @ts-ignore\n  override get _unsafeSelectionEnd (): number {\n    return this.input.selectionEnd;\n  }\n\n  /** Sets InputElement selection */\n  _unsafeSelect (start: number, end: number) {\n    this.input.setSelectionRange(start, end);\n  }\n\n  // @ts-ignore\n  override get value (): string {\n    return this.input.value;\n  }\n  override set value (value: string) {\n    this.input.value = value;\n  }\n}\n\n\nIMask.HTMLMaskElement = HTMLMaskElement;\n","import HTMLMaskElement from './html-mask-element';\nimport IMask from '../core/holder';\n\n\nexport default\nclass HTMLContenteditableMaskElement extends HTMLMaskElement {\n  declare input: HTMLElement;\n  /** Returns HTMLElement selection start */\n  // @ts-ignore\n  override get _unsafeSelectionStart (): number {\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    const anchorOffset = selection && selection.anchorOffset;\n    const focusOffset = selection && selection.focusOffset;\n    if (focusOffset == null || anchorOffset == null || anchorOffset < focusOffset) {\n      return anchorOffset;\n    }\n    return focusOffset;\n  }\n\n  /** Returns HTMLElement selection end */\n  // @ts-ignore\n  override get _unsafeSelectionEnd (): number {\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    const anchorOffset = selection && selection.anchorOffset;\n    const focusOffset = selection && selection.focusOffset;\n    if (focusOffset == null || anchorOffset == null || anchorOffset > focusOffset) {\n      return anchorOffset;\n    }\n    return focusOffset;\n  }\n\n  /** Sets HTMLElement selection */\n  override _unsafeSelect (start: number, end: number) {\n    if (!this.rootElement.createRange) return;\n\n    const range = this.rootElement.createRange();\n    range.setStart(this.input.firstChild || this.input, start);\n    range.setEnd(this.input.lastChild || this.input, end);\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n\n  /** HTMLElement value */\n  // @ts-ignore\n  override get value (): string {\n    return this.input.textContent;\n  }\n  override set value (value: string) {\n    this.input.textContent = value;\n  }\n}\n\n\nIMask.HTMLContenteditableMaskElement = HTMLContenteditableMaskElement;\n","import { objectIncludes, DIRECTION, type Selection } from '../core/utils';\nimport ActionDetails from '../core/action-details';\nimport createMask, { maskedClass, type FactoryArg, type FactoryReturnMasked } from '../masked/factory';\nimport Masked from '../masked/base';\nimport MaskElement from './mask-element';\nimport HTMLInputMaskElement, { type InputElement } from './html-input-mask-element';\nimport HTMLContenteditableMaskElement from './html-contenteditable-mask-element';\nimport IMask from '../core/holder';\n\n\nexport\ntype InputMaskElement = MaskElement | InputElement | HTMLElement;\n\n/** Listens to element events and controls changes between element and {@link Masked} */\nexport default\nclass InputMask<Opts extends FactoryArg> {\n  /**\n    View element\n  */\n  declare el: MaskElement;\n\n  /** Internal {@link Masked} model */\n  declare masked: FactoryReturnMasked<Opts>;\n\n  declare _listeners: Record<string, Array<EventListener>>;\n  declare _value: string;\n  declare _changingCursorPos: number;\n  declare _unmaskedValue: string;\n  declare _selection: Selection;\n  declare _cursorChanging?: ReturnType<typeof setTimeout>;\n  declare _inputEvent?: InputEvent;\n\n  constructor (el: InputMaskElement, opts: Opts) {\n    this.el =\n      (el instanceof MaskElement) ? el :\n      (el.isContentEditable && el.tagName !== 'INPUT' && el.tagName !== 'TEXTAREA') ? new HTMLContenteditableMaskElement(el) :\n      new HTMLInputMaskElement(el as InputElement);\n\n    this.masked = createMask(opts);\n\n    this._listeners = {};\n    this._value = '';\n    this._unmaskedValue = '';\n\n    this._saveSelection = this._saveSelection.bind(this);\n    this._onInput = this._onInput.bind(this);\n    this._onChange = this._onChange.bind(this);\n    this._onDrop = this._onDrop.bind(this);\n    this._onFocus = this._onFocus.bind(this);\n    this._onClick = this._onClick.bind(this);\n    this.alignCursor = this.alignCursor.bind(this);\n    this.alignCursorFriendly = this.alignCursorFriendly.bind(this);\n\n    this._bindEvents();\n\n    // refresh\n    this.updateValue();\n    this._onChange();\n  }\n\n  /** Read or update mask */\n  get mask (): Opts['mask'] {\n    return this.masked.mask;\n  }\n\n  maskEquals (mask: Opts['mask']): boolean {\n    return mask == null || this.masked?.maskEquals(mask);\n  }\n\n  set mask (mask: Opts['mask']) {\n    if (this.maskEquals(mask)) return;\n\n    if (!((mask as Masked) instanceof IMask.Masked) && this.masked.constructor === maskedClass(mask)) {\n      // TODO \"any\" no idea\n      this.masked.updateOptions({ mask } as any);\n      return;\n    }\n\n    const masked = (mask instanceof IMask.Masked ? mask : createMask({ mask } as Opts)) as FactoryReturnMasked<Opts>;\n    masked.unmaskedValue = this.masked.unmaskedValue;\n    this.masked = masked;\n  }\n\n  /** Raw value */\n  get value (): string {\n    return this._value;\n  }\n\n  set value (str: string) {\n    if (this.value === str) return;\n\n    this.masked.value = str;\n    this.updateControl();\n    this.alignCursor();\n  }\n\n  /** Unmasked value */\n  get unmaskedValue (): string {\n    return this._unmaskedValue;\n  }\n\n  set unmaskedValue (str: string) {\n    if (this.unmaskedValue === str) return;\n\n    this.masked.unmaskedValue = str;\n    this.updateControl();\n    this.alignCursor();\n  }\n\n  /** Typed unmasked value */\n  get typedValue (): FactoryReturnMasked<Opts>['typedValue'] {\n    return this.masked.typedValue;\n  }\n\n  set typedValue (val: FactoryReturnMasked<Opts>['typedValue']) {\n    if (this.masked.typedValueEquals(val)) return;\n\n    this.masked.typedValue = val;\n    this.updateControl();\n    this.alignCursor();\n  }\n\n  /** Display value */\n  get displayValue (): string {\n    return this.masked.displayValue;\n  }\n\n  /** Starts listening to element events */\n  _bindEvents () {\n    this.el.bindEvents({\n      selectionChange: this._saveSelection,\n      input: this._onInput,\n      drop: this._onDrop,\n      click: this._onClick,\n      focus: this._onFocus,\n      commit: this._onChange,\n    });\n  }\n\n  /** Stops listening to element events */\n  _unbindEvents () {\n    if (this.el) this.el.unbindEvents();\n  }\n\n  /** Fires custom event */\n  _fireEvent (ev: string, e: InputEvent) {\n    const listeners = this._listeners[ev];\n    if (!listeners) return;\n\n    listeners.forEach(l => l(e));\n  }\n\n  /** Current selection start */\n  get selectionStart (): number {\n    return this._cursorChanging ?\n      this._changingCursorPos :\n\n      this.el.selectionStart;\n  }\n\n  /** Current cursor position */\n  get cursorPos (): number {\n    return this._cursorChanging ?\n      this._changingCursorPos :\n\n      this.el.selectionEnd;\n  }\n  set cursorPos (pos: number) {\n    if (!this.el || !this.el.isActive) return;\n\n    this.el.select(pos, pos);\n    this._saveSelection();\n  }\n\n  /** Stores current selection */\n  _saveSelection (/* ev */) {\n    if (this.displayValue !== this.el.value) {\n      console.warn('Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly.'); // eslint-disable-line no-console\n    }\n    this._selection = {\n      start: this.selectionStart,\n      end: this.cursorPos,\n    };\n  }\n\n  /** Syncronizes model value from view */\n  updateValue () {\n    this.masked.value = this.el.value;\n    this._value = this.masked.value;\n  }\n\n  /** Syncronizes view from model value, fires change events */\n  updateControl () {\n    const newUnmaskedValue = this.masked.unmaskedValue;\n    const newValue = this.masked.value;\n    const newDisplayValue = this.displayValue;\n    const isChanged = (this.unmaskedValue !== newUnmaskedValue ||\n      this.value !== newValue);\n\n    this._unmaskedValue = newUnmaskedValue;\n    this._value = newValue;\n\n    if (this.el.value !== newDisplayValue) this.el.value = newDisplayValue;\n    if (isChanged) this._fireChangeEvents();\n  }\n\n  /** Updates options with deep equal check, recreates @{link Masked} model if mask type changes */\n  updateOptions (opts: Partial<Opts>) {\n    const { mask, ...restOpts } = opts;\n\n    const updateMask = !this.maskEquals(mask);\n    const updateOpts = !objectIncludes(this.masked, restOpts);\n\n    if (updateMask) this.mask = mask;\n    if (updateOpts) this.masked.updateOptions(restOpts as any); // TODO \"any\" no idea\n\n    if (updateMask || updateOpts) this.updateControl();\n  }\n\n  /** Updates cursor */\n  updateCursor (cursorPos: number) {\n    if (cursorPos == null) return;\n    this.cursorPos = cursorPos;\n\n    // also queue change cursor for mobile browsers\n    this._delayUpdateCursor(cursorPos);\n  }\n\n  /** Delays cursor update to support mobile browsers */\n  _delayUpdateCursor (cursorPos: number) {\n    this._abortUpdateCursor();\n    this._changingCursorPos = cursorPos;\n    this._cursorChanging = setTimeout(() => {\n      if (!this.el) return; // if was destroyed\n      this.cursorPos = this._changingCursorPos;\n      this._abortUpdateCursor();\n    }, 10);\n  }\n\n  /** Fires custom events */\n  _fireChangeEvents () {\n    this._fireEvent('accept', this._inputEvent);\n    if (this.masked.isComplete) this._fireEvent('complete', this._inputEvent);\n  }\n\n  /** Aborts delayed cursor update */\n  _abortUpdateCursor () {\n    if (this._cursorChanging) {\n      clearTimeout(this._cursorChanging);\n      delete this._cursorChanging;\n    }\n  }\n\n  /** Aligns cursor to nearest available position */\n  alignCursor () {\n    this.cursorPos = this.masked.nearestInputPos(this.masked.nearestInputPos(this.cursorPos, DIRECTION.LEFT));\n  }\n\n  /** Aligns cursor only if selection is empty */\n  alignCursorFriendly () {\n    if (this.selectionStart !== this.cursorPos) return;  // skip if range is selected\n    this.alignCursor();\n  }\n\n  /** Adds listener on custom event */\n  on (ev: string, handler: EventListener): this {\n    if (!this._listeners[ev]) this._listeners[ev] = [];\n    this._listeners[ev].push(handler);\n    return this;\n  }\n\n  /** Removes custom event listener */\n  off (ev: string, handler: EventListener): this {\n    if (!this._listeners[ev]) return this;\n    if (!handler) {\n      delete this._listeners[ev];\n      return this;\n    }\n    const hIndex = this._listeners[ev].indexOf(handler);\n    if (hIndex >= 0) this._listeners[ev].splice(hIndex, 1);\n    return this;\n  }\n\n  /** Handles view input event */\n  _onInput (e: InputEvent): void {\n    this._inputEvent = e;\n    this._abortUpdateCursor();\n\n    // fix strange IE behavior\n    if (!this._selection) return this.updateValue();\n\n    const details = new ActionDetails({\n      // new state\n      value: this.el.value,\n      cursorPos: this.cursorPos,\n\n      // old state\n      oldValue: this.displayValue,\n      oldSelection: this._selection,\n    });\n\n    const oldRawValue = this.masked.rawInputValue;\n\n    const offset = this.masked.splice(\n      details.startChangePos,\n      details.removed.length,\n      details.inserted,\n      details.removeDirection,\n      { input: true, raw: true },\n    ).offset;\n\n    // force align in remove direction only if no input chars were removed\n    // otherwise we still need to align with NONE (to get out from fixed symbols for instance)\n    const removeDirection = oldRawValue === this.masked.rawInputValue ?\n      details.removeDirection :\n      DIRECTION.NONE;\n\n    let cursorPos = this.masked.nearestInputPos(\n      details.startChangePos + offset,\n      removeDirection,\n    );\n    if (removeDirection !== DIRECTION.NONE) cursorPos = this.masked.nearestInputPos(cursorPos, DIRECTION.NONE);\n\n    this.updateControl();\n    this.updateCursor(cursorPos);\n    delete this._inputEvent;\n  }\n\n  /** Handles view change event and commits model value */\n  _onChange () {\n    if (this.displayValue !== this.el.value) {\n      this.updateValue();\n    }\n    this.masked.doCommit();\n    this.updateControl();\n    this._saveSelection();\n  }\n\n  /** Handles view drop event, prevents by default */\n  _onDrop (ev: Event) {\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  /** Restore last selection on focus */\n  _onFocus (ev: Event) {\n    this.alignCursorFriendly();\n  }\n\n  /** Restore last selection on focus */\n  _onClick (ev: Event) {\n    this.alignCursorFriendly();\n  }\n\n  /** Unbind view events and removes element reference */\n  destroy () {\n    this._unbindEvents();\n    // @ts-ignore why not\n    this._listeners.length = 0;\n    delete this.el;\n  }\n}\n\n\nIMask.InputMask = InputMask;\n","import IMask from \"./holder\";\n\n\nexport\ntype ChangeDetailsOptions = Pick<ChangeDetails,\n  | 'inserted'\n  | 'skip'\n  | 'tailShift'\n  | 'rawInserted'\n>;\n\n/**\n  Provides details of changing model value\n*/\nexport default\nclass ChangeDetails {\n  /** Inserted symbols */\n  declare inserted: string;\n  /** Can skip chars */\n  declare skip: boolean;\n  /** Additional offset if any changes occurred before tail */\n  declare tailShift: number;\n  /** Raw inserted is used by dynamic mask */\n  declare rawInserted: string;\n\n  static normalize (prep: string | [string, ChangeDetails]): [string, ChangeDetails] {\n    return Array.isArray(prep) ? prep : [\n      prep,\n      new ChangeDetails(),\n    ];\n  }\n\n  constructor (details?: Partial<ChangeDetailsOptions>) {\n    Object.assign(this, {\n      inserted: '',\n      rawInserted: '',\n      skip: false,\n      tailShift: 0,\n    }, details);\n  }\n\n  /**\n    Aggregate changes\n    @returns {ChangeDetails} `this`\n  */\n  aggregate (details: ChangeDetails): this {\n    this.rawInserted += details.rawInserted;\n    this.skip = this.skip || details.skip;\n    this.inserted += details.inserted;\n    this.tailShift += details.tailShift;\n    return this;\n  }\n\n  /** Total offset considering all changes */\n  get offset (): number {\n    return this.tailShift + this.inserted.length;\n  }\n}\n\n\nIMask.ChangeDetails = ChangeDetails;\n","import type { TailDetails, AppendTail } from './tail-details';\nimport type ChangeDetails from './change-details';\n\n\ntype ContinuousTailState = Pick<ContinuousTailDetails,\n  | 'value'\n  | 'from'\n  | 'stop'\n>;\n\n/** Provides details of continuous extracted tail */\nexport default\nclass ContinuousTailDetails implements TailDetails {\n  /** Tail value as string */\n  declare value: string;\n  /** Tail start position */\n  declare from: number;\n  /** Start position */\n  declare stop?: number;\n\n  constructor (value: string='', from: number=0, stop?: number) {\n    this.value = value;\n    this.from = from;\n    this.stop = stop;\n  }\n\n  toString (): string { return this.value; }\n\n  extend (tail: string | TailDetails): void {\n    this.value += String(tail);\n  }\n\n  appendTo (masked: AppendTail): ChangeDetails {\n    return masked.append(this.toString(), { tail: true })\n      .aggregate(masked._appendPlaceholder());\n  }\n\n  get state (): ContinuousTailState {\n    return {\n      value: this.value,\n      from: this.from,\n      stop: this.stop,\n    };\n  }\n\n  set state (state: ContinuousTailState) {\n    Object.assign(this, state);\n  }\n\n  unshift (beforePos?: number): string {\n    if (!this.value.length || (beforePos != null && this.from >= beforePos)) return '';\n\n    const shiftChar = this.value[0];\n    this.value = this.value.slice(1);\n    return shiftChar;\n  }\n\n  shift (): string {\n    if (!this.value.length) return '';\n\n    const shiftChar = this.value[this.value.length-1];\n    this.value = this.value.slice(0, -1);\n    return shiftChar;\n  }\n}\n","import ChangeDetails from '../core/change-details';\nimport ContinuousTailDetails from '../core/continuous-tail-details';\nimport { type Direction, DIRECTION, isString, forceDirection } from '../core/utils';\nimport { type TailDetails } from '../core/tail-details';\nimport IMask from '../core/holder';\n\n\nexport\ntype MaskedState = {\n  _value: string,\n};\n\n/** Append flags */\nexport\ntype AppendFlags<State=MaskedState> = {\n  input?: boolean,\n  tail?: boolean,\n  raw?: boolean,\n  _beforeTailState?: State,\n};\n\n/** Extract flags */\nexport\ntype ExtractFlags = {\n  raw?: boolean\n};\n\n// see https://github.com/microsoft/TypeScript/issues/6223\n\nexport\ntype MaskedOptions<M extends Masked=Masked, Props extends keyof M=never> = Partial<Pick<M,\n  | 'mask'\n  | 'parent'\n  | 'prepare'\n  | 'prepareChar'\n  | 'validate'\n  | 'commit'\n  | 'format'\n  | 'parse'\n  | 'overwrite'\n  | 'eager'\n  | 'skipInvalid'\n  | Props\n>>;\n\n\n/** Provides common masking stuff */\nexport default\nclass Masked<Value=any> {\n  static DEFAULTS: Partial<MaskedOptions> = {\n    skipInvalid: true,\n  };\n  static EMPTY_VALUES: Array<any> = [undefined, null, ''];\n\n  /** @type {Mask} */\n  declare mask: unknown;\n  /** */\n  declare parent?: Masked;\n  /** Transforms value before mask processing */\n  declare prepare?: (chars: string, masked: this, flags: AppendFlags) => string | [string, ChangeDetails];\n  /** Transforms each char before mask processing */\n  declare prepareChar?: (chars: string, masked: this, flags: AppendFlags) => string | [string, ChangeDetails];\n  /** Validates if value is acceptable */\n  declare validate?: (value: string, masked: this, flags: AppendFlags) => boolean;\n  /** Does additional processing at the end of editing */\n  declare commit?: (value: string, masked: this) => void;\n  /** Format typed value to string */\n  declare format?: (value: Value, masked: this) => string;\n  /** Parse strgin to get typed value */\n  declare parse?: (str: string, masked: this) => Value;\n  /** Enable characters overwriting */\n  declare overwrite?: boolean | 'shift' | undefined;\n  /** */\n  declare eager?: boolean | 'remove' | 'append' | undefined;\n  /** */\n  declare skipInvalid?: boolean | undefined;\n\n  /** */\n  declare _initialized: boolean;\n\n  declare _value: string;\n  declare _refreshing?: boolean;\n  declare _isolated?: boolean;\n\n  constructor (opts: MaskedOptions) {\n    this._value = '';\n    this._update({\n      ...Masked.DEFAULTS,\n      ...opts,\n    });\n    this._initialized = true;\n  }\n\n  /** Sets and applies new options */\n  updateOptions (opts: Partial<MaskedOptions>) {\n    if (!Object.keys(opts).length) return;\n\n    this.withValueRefresh(this._update.bind(this, opts));\n  }\n\n  /** Sets new options */\n  _update (opts: Partial<MaskedOptions>) {\n    Object.assign(this, opts);\n  }\n\n  /** Mask state */\n  get state (): MaskedState {\n    return {\n      _value: this.value,\n    };\n  }\n\n  set state (state: MaskedState) {\n    this._value = state._value;\n  }\n\n  /** Resets value */\n  reset () {\n    this._value = '';\n  }\n\n  get value (): string {\n    return this._value;\n  }\n\n  set value (value: string) {\n    this.resolve(value, { input: true });\n  }\n\n  /** Resolve new value */\n  resolve (value: string, flags: AppendFlags={ input: true }): void {\n    this.reset();\n    this.append(value, flags, '');\n    this.doCommit();\n  }\n\n  get unmaskedValue (): string {\n    return this.value;\n  }\n\n  set unmaskedValue (value: string) {\n    this.resolve(value, {});\n  }\n\n  get typedValue (): Value {\n    return this.parse ? this.parse(this.value, this) : this.unmaskedValue as Value;\n  }\n\n  set typedValue (value: Value) {\n    if (this.format) {\n      this.value = this.format(value, this);\n    } else {\n      this.unmaskedValue = String(value);\n    }\n  }\n\n  /** Value that includes raw user input */\n  get rawInputValue (): string {\n    return this.extractInput(0, this.value.length, {raw: true});\n  }\n\n  set rawInputValue (value: string) {\n    this.resolve(value, { raw: true });\n  }\n\n  get displayValue (): string {\n    return this.value;\n  }\n\n  get isComplete (): boolean {\n    return true;\n  }\n\n  get isFilled (): boolean {\n    return this.isComplete;\n  }\n\n  /** Finds nearest input position in direction */\n  nearestInputPos (cursorPos: number, direction?: Direction): number {\n    return cursorPos;\n  }\n\n  totalInputPositions (fromPos: number=0, toPos: number=this.value.length): number {\n    return Math.min(this.value.length, toPos - fromPos);\n  }\n\n  /** Extracts value in range considering flags */\n  extractInput (fromPos: number=0, toPos: number=this.value.length, flags?: ExtractFlags): string {\n    return this.value.slice(fromPos, toPos);\n  }\n\n  /** Extracts tail in range */\n  extractTail (fromPos: number=0, toPos: number=this.value.length): TailDetails {\n    return new ContinuousTailDetails(this.extractInput(fromPos, toPos), fromPos);\n  }\n\n  /** Appends tail */\n  appendTail (tail: string | String | TailDetails): ChangeDetails {\n    if (isString(tail)) tail = new ContinuousTailDetails(String(tail));\n\n    return (tail as TailDetails).appendTo(this);\n  }\n\n  /** Appends char */\n  _appendCharRaw (ch: string, flags: AppendFlags={}): ChangeDetails {\n    if (!ch) return new ChangeDetails();\n\n    this._value += ch;\n    return new ChangeDetails({\n      inserted: ch,\n      rawInserted: ch,\n    });\n  }\n\n  /** Appends char */\n  _appendChar (ch: string, flags: AppendFlags={}, checkTail?: TailDetails): ChangeDetails {\n    const consistentState: MaskedState = this.state;\n    let details: ChangeDetails;\n    [ch, details] = this.doPrepareChar(ch, flags);\n\n    details = details.aggregate(this._appendCharRaw(ch, flags));\n\n    if (details.inserted) {\n      let consistentTail;\n      let appended = this.doValidate(flags) !== false;\n\n      if (appended && checkTail != null) {\n        // validation ok, check tail\n        const beforeTailState = this.state;\n        if (this.overwrite === true) {\n          consistentTail = checkTail.state;\n          checkTail.unshift(this.value.length - details.tailShift);\n        }\n\n        let tailDetails = this.appendTail(checkTail);\n        appended = tailDetails.rawInserted === checkTail.toString();\n\n        // not ok, try shift\n        if (!(appended && tailDetails.inserted) && this.overwrite === 'shift') {\n          this.state = beforeTailState;\n          consistentTail = checkTail.state;\n          checkTail.shift();\n\n          tailDetails = this.appendTail(checkTail);\n          appended = tailDetails.rawInserted === checkTail.toString();\n        }\n\n        // if ok, rollback state after tail\n        if (appended && tailDetails.inserted) this.state = beforeTailState;\n      }\n\n      // revert all if something went wrong\n      if (!appended) {\n        details = new ChangeDetails();\n        this.state = consistentState;\n        if (checkTail && consistentTail) checkTail.state = consistentTail;\n      }\n    }\n    return details;\n  }\n\n  /** Appends optional placeholder at the end */\n  _appendPlaceholder (): ChangeDetails {\n    return new ChangeDetails();\n  }\n\n  /** Appends optional eager placeholder at the end */\n  _appendEager (): ChangeDetails {\n    return new ChangeDetails();\n  }\n\n  /** Appends symbols considering flags */\n  append (str: string, flags?: AppendFlags, tail?: string | String | TailDetails): ChangeDetails {\n    if (!isString(str)) throw new Error('value should be string');\n    const checkTail = isString(tail) ? new ContinuousTailDetails(String(tail)) : tail as TailDetails;\n    if (flags?.tail) flags._beforeTailState = this.state;\n\n    let details;\n    [str, details] = this.doPrepare(str, flags);\n\n    for (let ci=0; ci<str.length; ++ci) {\n      const d = this._appendChar(str[ci], flags, checkTail);\n      if (!d.rawInserted && !this.doSkipInvalid(str[ci], flags, checkTail)) break;\n      details.aggregate(d);\n    }\n\n    // append tail but aggregate only tailShift\n    if (checkTail != null) {\n      details.tailShift += this.appendTail(checkTail).tailShift;\n      // TODO it's a good idea to clear state after appending ends\n      // but it causes bugs when one append calls another (when dynamic dispatch set rawInputValue)\n      // this._resetBeforeTailState();\n    }\n\n    if ((this.eager === true || this.eager === 'append') && flags?.input && str) {\n      details.aggregate(this._appendEager());\n    }\n\n    return details;\n  }\n\n  remove (fromPos: number=0, toPos: number=this.value.length): ChangeDetails {\n    this._value = this.value.slice(0, fromPos) + this.value.slice(toPos);\n    return new ChangeDetails();\n  }\n\n  /** Calls function and reapplies current value */\n  withValueRefresh<T>(fn: () => T): T {\n    if (this._refreshing || !this._initialized) return fn();\n    this._refreshing = true;\n\n    const rawInput = this.rawInputValue;\n    const value = this.value;\n\n    const ret = fn();\n\n    this.rawInputValue = rawInput;\n    // append lost trailing chars at the end\n    if (this.value && this.value !== value && value.indexOf(this.value) === 0) {\n      this.append(value.slice(this.value.length), {}, '');\n    }\n\n    delete this._refreshing;\n    return ret;\n  }\n\n  runIsolated<T>(fn: (masked: this) => T): T {\n    if (this._isolated || !this._initialized) return fn(this);\n    this._isolated = true;\n    const state = this.state;\n\n    const ret = fn(this);\n\n    this.state = state;\n    delete this._isolated;\n\n    return ret;\n  }\n\n  doSkipInvalid (ch: string, flags: AppendFlags={}, checkTail?: TailDetails): boolean {\n    return Boolean(this.skipInvalid);\n  }\n\n  /** Prepares string before mask processing */\n  doPrepare (str: string, flags: AppendFlags={}): [string, ChangeDetails] {\n    return ChangeDetails.normalize(this.prepare ?\n      this.prepare(str, this, flags) :\n      str);\n  }\n\n  /** Prepares each char before mask processing */\n  doPrepareChar (str: string, flags: AppendFlags={}): [string, ChangeDetails] {\n    return ChangeDetails.normalize(this.prepareChar ?\n      this.prepareChar(str, this, flags) :\n      str);\n  }\n\n  /** Validates if value is acceptable */\n  doValidate (flags: AppendFlags): boolean {\n    return (!this.validate || this.validate(this.value, this, flags)) &&\n      (!this.parent || this.parent.doValidate(flags));\n  }\n\n  /** Does additional processing at the end of editing */\n  doCommit () {\n    if (this.commit) this.commit(this.value, this);\n  }\n\n  splice (start: number, deleteCount: number, inserted: string, removeDirection: Direction = DIRECTION.NONE, flags: AppendFlags = { input: true }): ChangeDetails {\n    const tailPos: number = start + deleteCount;\n    const tail: TailDetails = this.extractTail(tailPos);\n\n    const eagerRemove = this.eager === true || this.eager === 'remove';\n\n    let oldRawValue;\n    if (eagerRemove)  {\n      removeDirection = forceDirection(removeDirection);\n      oldRawValue = this.extractInput(0, tailPos, {raw: true});\n    }\n\n    let startChangePos: number = start;\n    const details: ChangeDetails = new ChangeDetails();\n\n    // if it is just deletion without insertion\n    if (removeDirection !== DIRECTION.NONE) {\n      startChangePos = this.nearestInputPos(start,\n        deleteCount > 1 && start !== 0 && !eagerRemove ?\n        DIRECTION.NONE :\n        removeDirection\n      );\n\n      // adjust tailShift if start was aligned\n      details.tailShift = startChangePos - start;\n    }\n\n    details.aggregate(this.remove(startChangePos));\n\n    if (eagerRemove && removeDirection !== DIRECTION.NONE && oldRawValue === this.rawInputValue) {\n      if (removeDirection === DIRECTION.FORCE_LEFT) {\n        let valLength;\n        while (oldRawValue === this.rawInputValue && (valLength = this.value.length)) {\n          details\n            .aggregate(new ChangeDetails({ tailShift: -1 }))\n            .aggregate(this.remove(valLength-1));\n        }\n      } else if (removeDirection === DIRECTION.FORCE_RIGHT) {\n        tail.unshift();\n      }\n    }\n\n    return details.aggregate(this.append(inserted, flags, tail));\n  }\n\n  maskEquals (mask: any): boolean {\n    return this.mask === mask;\n  }\n\n  typedValueEquals (value: any): boolean {\n    const tval = this.typedValue;\n\n    return value === tval ||\n      Masked.EMPTY_VALUES.includes(value) && Masked.EMPTY_VALUES.includes(tval) ||\n      this.format && this.format(value, this) === this.format(this.typedValue, this);\n  }\n}\n\n\nIMask.Masked = Masked;\n","import type { TailDetails, AppendTail } from '../../core/tail-details';\nimport ChangeDetails from '../../core/change-details';\nimport { isString } from '../../core/utils';\nimport ContinuousTailDetails from '../../core/continuous-tail-details';\nimport IMask from '../../core/holder';\nimport type MaskedPattern from '../pattern';\n\n\nexport\ntype ChunksTailState = Pick<ChunksTailDetails,\n  | 'from'\n  | 'stop'\n  | 'blockIndex'\n> & { chunks: Array<TailDetails['state']> };\n\nexport default\nclass ChunksTailDetails implements TailDetails {\n  declare chunks: Array<TailDetails>;\n  declare from: number;\n  declare stop?: number;\n  /** */\n  declare blockIndex?: number;\n\n  constructor (chunks: Array<TailDetails>=[], from: number=0) {\n    this.chunks = chunks;\n    this.from = from;\n  }\n\n  toString (): string {\n    return this.chunks.map(String).join('');\n  }\n\n  extend (tailChunk: string | String | TailDetails): void {\n    if (!String(tailChunk)) return;\n    tailChunk = (isString(tailChunk) ? new ContinuousTailDetails(String(tailChunk)) : tailChunk) as TailDetails;\n\n    const lastChunk = this.chunks[this.chunks.length-1];\n    const extendLast = lastChunk &&\n      // if stops are same or tail has no stop\n      (lastChunk.stop === tailChunk.stop || tailChunk.stop == null) &&\n      // if tail chunk goes just after last chunk\n      tailChunk.from === (lastChunk.from + lastChunk.toString().length);\n\n    if (tailChunk instanceof ContinuousTailDetails) {\n      // check the ability to extend previous chunk\n      if (extendLast) {\n        // extend previous chunk\n        lastChunk.extend(tailChunk.toString());\n      } else {\n        // append new chunk\n        this.chunks.push(tailChunk);\n      }\n    } else if (tailChunk instanceof ChunksTailDetails) {\n      if (tailChunk.stop == null) {\n        // unwrap floating chunks to parent, keeping `from` pos\n        let firstTailChunk;\n        while (tailChunk.chunks.length && tailChunk.chunks[0].stop == null) {\n          firstTailChunk = tailChunk.chunks.shift();\n          firstTailChunk.from += tailChunk.from;\n          this.extend(firstTailChunk);\n        }\n      }\n\n      // if tail chunk still has value\n      if (tailChunk.toString()) {\n        // if chunks contains stops, then popup stop to container\n        tailChunk.stop = tailChunk.blockIndex;\n        this.chunks.push(tailChunk);\n      }\n    }\n  }\n\n  appendTo (masked: AppendTail | MaskedPattern): ChangeDetails {\n    if (!(masked instanceof IMask.MaskedPattern)) {\n      const tail = new ContinuousTailDetails(this.toString());\n      return tail.appendTo(masked);\n    }\n\n    const details = new ChangeDetails();\n\n    for (let ci=0; ci < this.chunks.length && !details.skip; ++ci) {\n      const chunk = this.chunks[ci];\n\n      const lastBlockIter = masked._mapPosToBlock(masked.value.length);\n      const stop = chunk.stop;\n      let chunkBlock;\n      if (stop != null &&\n        // if block not found or stop is behind lastBlock\n        (!lastBlockIter || lastBlockIter.index <= stop)\n      ) {\n        if (\n          chunk instanceof ChunksTailDetails ||\n          // for continuous block also check if stop is exist\n          masked._stops.indexOf(stop) >= 0\n        ) {\n          const phDetails = masked._appendPlaceholder(stop);\n          details.aggregate(phDetails);\n        }\n        chunkBlock = chunk instanceof ChunksTailDetails && masked._blocks[stop];\n      }\n\n      if (chunkBlock) {\n        const tailDetails = chunkBlock.appendTail(chunk);\n        tailDetails.skip = false; // always ignore skip, it will be set on last\n        details.aggregate(tailDetails);\n        masked._value += tailDetails.inserted;\n\n        // get not inserted chars\n        const remainChars = chunk.toString().slice(tailDetails.rawInserted.length);\n        if (remainChars) details.aggregate(masked.append(remainChars, { tail: true }));\n      } else {\n        details.aggregate(masked.append(chunk.toString(), { tail: true }));\n      }\n    };\n\n    return details;\n  }\n\n  get state (): ChunksTailState {\n    return {\n      chunks: this.chunks.map(c => c.state),\n      from: this.from,\n      stop: this.stop,\n      blockIndex: this.blockIndex,\n    };\n  }\n\n  set state (state: ChunksTailState) {\n    const { chunks, ...props } = state;\n    Object.assign(this, props);\n    this.chunks = chunks.map(cstate => {\n      const chunk = \"chunks\" in cstate ?\n        new ChunksTailDetails() :\n        new ContinuousTailDetails();\n      chunk.state = cstate;\n      return chunk;\n    });\n  }\n\n  unshift (beforePos?: number): string {\n    if (!this.chunks.length || (beforePos != null && this.from >= beforePos)) return '';\n\n    const chunkShiftPos = beforePos != null ? beforePos - this.from : beforePos;\n    let ci=0;\n    while (ci < this.chunks.length) {\n      const chunk = this.chunks[ci];\n      const shiftChar = chunk.unshift(chunkShiftPos);\n\n      if (chunk.toString()) {\n        // chunk still contains value\n        // but not shifted - means no more available chars to shift\n        if (!shiftChar) break;\n        ++ci;\n      } else {\n        // clean if chunk has no value\n        this.chunks.splice(ci, 1);\n      }\n\n      if (shiftChar) return shiftChar;\n    }\n\n    return '';\n  }\n\n  shift (): string {\n    if (!this.chunks.length) return '';\n\n    let ci=this.chunks.length-1;\n    while (0 <= ci) {\n      const chunk = this.chunks[ci];\n      const shiftChar = chunk.shift();\n\n      if (chunk.toString()) {\n        // chunk still contains value\n        // but not shifted - means no more available chars to shift\n        if (!shiftChar) break;\n        --ci;\n      } else {\n        // clean if chunk has no value\n        this.chunks.splice(ci, 1);\n      }\n\n      if (shiftChar) return shiftChar;\n    }\n\n    return '';\n  }\n}\n","import { DIRECTION } from '../../core/utils';\nimport type MaskedPattern from '../pattern';\nimport type PatternBlock from './block';\n\n\ntype PatternCursorState = { offset: number, index: number, ok: boolean };\n\nexport default\nclass PatternCursor<Value> {\n  declare masked: MaskedPattern<Value>;\n  declare offset: number;\n  declare index: number;\n  declare ok: boolean;\n  declare _log: PatternCursorState[];\n\n  constructor (masked: MaskedPattern<Value>, pos: number) {\n    this.masked = masked;\n    this._log = [];\n\n    const { offset, index } = masked._mapPosToBlock(pos) || (\n      pos < 0 ?\n        // first\n        { index: 0, offset: 0 } :\n        // last\n        { index: this.masked._blocks.length, offset: 0 }\n    );\n    this.offset = offset;\n    this.index = index;\n    this.ok = false;\n  }\n\n  get block (): PatternBlock {\n    return this.masked._blocks[this.index];\n  }\n\n  get pos (): number {\n    return this.masked._blockStartPos(this.index) + this.offset;\n  }\n\n  get state (): PatternCursorState {\n    return { index: this.index, offset: this.offset, ok: this.ok };\n  }\n\n  set state (s: PatternCursorState) {\n    Object.assign(this, s);\n  }\n\n  pushState () {\n    this._log.push(this.state);\n  }\n\n  popState (): PatternCursorState {\n    const s = this._log.pop();\n    this.state = s;\n    return s;\n  }\n\n  bindBlock () {\n    if (this.block) return;\n    if (this.index < 0) {\n      this.index = 0;\n      this.offset = 0;\n    }\n    if (this.index >= this.masked._blocks.length) {\n      this.index = this.masked._blocks.length - 1;\n      this.offset = this.block.value.length;\n    }\n  }\n\n  _pushLeft(fn: () => boolean | undefined): boolean {\n    this.pushState();\n    for (this.bindBlock(); 0<=this.index; --this.index, this.offset=this.block?.value.length || 0) {\n      if (fn()) return this.ok = true;\n    }\n\n    return this.ok = false;\n  }\n\n  _pushRight (fn: () => boolean | undefined): boolean {\n    this.pushState();\n    for (this.bindBlock(); this.index<this.masked._blocks.length; ++this.index, this.offset=0) {\n      if (fn()) return this.ok = true;\n    }\n\n    return this.ok = false;\n  }\n\n  pushLeftBeforeFilled (): boolean {\n    return this._pushLeft(() => {\n      if (this.block.isFixed || !this.block.value) return;\n\n      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.FORCE_LEFT);\n      if (this.offset !== 0) return true;\n    });\n  }\n\n  pushLeftBeforeInput (): boolean {\n    // cases:\n    // filled input: 00|\n    // optional empty input: 00[]|\n    // nested block: XX<[]>|\n    return this._pushLeft(() => {\n      if (this.block.isFixed) return;\n\n      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.LEFT);\n      return true;\n    });\n  }\n\n  pushLeftBeforeRequired (): boolean {\n    return this._pushLeft(() => {\n      if (this.block.isFixed || this.block.isOptional && !this.block.value) return;\n\n      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.LEFT);\n      return true;\n    });\n  }\n\n  pushRightBeforeFilled (): boolean {\n    return this._pushRight(() => {\n      if (this.block.isFixed || !this.block.value) return;\n\n      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.FORCE_RIGHT);\n      if (this.offset !== this.block.value.length) return true;\n    });\n  }\n\n  pushRightBeforeInput (): boolean {\n    return this._pushRight(() => {\n      if (this.block.isFixed) return;\n\n      // const o = this.offset;\n      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.NONE);\n      // HACK cases like (STILL DOES NOT WORK FOR NESTED)\n      // aa|X\n      // aa<X|[]>X_    - this will not work\n      // if (o && o === this.offset && this.block instanceof PatternInputDefinition) continue;\n      return true;\n    });\n  }\n\n  pushRightBeforeRequired (): boolean {\n    return this._pushRight(() => {\n      if (this.block.isFixed || this.block.isOptional && !this.block.value) return;\n\n      // TODO check |[*]XX_\n      this.offset = this.block.nearestInputPos(this.offset, DIRECTION.NONE);\n      return true;\n    });\n  }\n}\n","import ChangeDetails from '../../core/change-details';\nimport { DIRECTION, type Direction, isString } from '../../core/utils';\nimport { type TailDetails } from '../../core/tail-details';\nimport ContinuousTailDetails from '../../core/continuous-tail-details';\nimport { type ExtractFlags, type AppendFlags, type MaskedState } from '../base';\nimport type PatternBlock from './block';\n\n\nexport\ntype PatternFixedDefinitionOptions = Pick<PatternFixedDefinition, 'char' | 'isUnmasking' | 'eager'>;\n\nexport\ntype PatternFixedDefinitionState = MaskedState & Pick<PatternFixedDefinition, '_isRawInput'>;\n\n\nexport default\nclass PatternFixedDefinition implements PatternBlock {\n  /** */\n  declare _value: string;\n  /** */\n  declare char: string;\n  /** */\n  declare isUnmasking?: boolean;\n  /** */\n  declare eager: boolean | 'remove' | 'append';\n  /** */\n  declare _isRawInput?: boolean;\n  /** */\n  declare isFixed: boolean;\n\n  constructor(opts: PatternFixedDefinitionOptions) {\n    Object.assign(this, opts);\n    this._value = '';\n    this.isFixed = true;\n  }\n\n  get value (): string {\n    return this._value;\n  }\n\n  get unmaskedValue (): string {\n    return this.isUnmasking ? this.value : '';\n  }\n\n  get displayValue (): string {\n    return this.value;\n  }\n\n  reset () {\n    this._isRawInput = false;\n    this._value = '';\n  }\n\n  remove (fromPos: number=0, toPos: number=this._value.length): ChangeDetails {\n    this._value = this._value.slice(0, fromPos) + this._value.slice(toPos);\n    if (!this._value) this._isRawInput = false;\n\n    return new ChangeDetails();\n  }\n\n  nearestInputPos (cursorPos: number, direction: Direction=DIRECTION.NONE): number {\n    const minPos = 0;\n    const maxPos = this._value.length;\n\n    switch (direction) {\n      case DIRECTION.LEFT:\n      case DIRECTION.FORCE_LEFT:\n        return minPos;\n      case DIRECTION.NONE:\n      case DIRECTION.RIGHT:\n      case DIRECTION.FORCE_RIGHT:\n      default:\n        return maxPos;\n    }\n  }\n\n  totalInputPositions (fromPos: number=0, toPos: number=this._value.length): number {\n    return this._isRawInput ? (toPos - fromPos) : 0;\n  }\n\n  extractInput (fromPos: number=0, toPos: number=this._value.length, flags: ExtractFlags={}): string {\n    return flags.raw && this._isRawInput && this._value.slice(fromPos, toPos) || '';\n  }\n\n  get isComplete (): boolean {\n    return true;\n  }\n\n  get isFilled (): boolean {\n    return Boolean(this._value);\n  }\n\n  _appendChar (ch: string, flags: AppendFlags={}): ChangeDetails {\n    const details = new ChangeDetails();\n\n    if (this.isFilled) return details;\n    const appendEager = this.eager === true || this.eager === 'append';\n\n    const appended = this.char === ch;\n    const isResolved = appended && (this.isUnmasking || flags.input || flags.raw) && (!flags.raw || !appendEager) && !flags.tail;\n    if (isResolved) details.rawInserted = this.char;\n    this._value = details.inserted = this.char;\n    this._isRawInput = isResolved && (flags.raw || flags.input);\n\n    return details;\n  }\n\n  _appendEager (): ChangeDetails {\n    return this._appendChar(this.char, { tail: true });\n  }\n\n  _appendPlaceholder (): ChangeDetails {\n    const details = new ChangeDetails();\n    if (this.isFilled) return details;\n\n    this._value = details.inserted = this.char;\n    return details;\n  }\n\n  extractTail (fromPos: number=0, toPos: number=this.value.length): TailDetails {\n    return new ContinuousTailDetails('');\n  }\n\n  appendTail (tail: string | String | TailDetails): ChangeDetails {\n    if (isString(tail)) tail = new ContinuousTailDetails(String(tail));\n\n    return (tail as TailDetails).appendTo(this);\n  }\n\n  append (str: string, flags?: AppendFlags, tail?: TailDetails): ChangeDetails {\n    const details = this._appendChar(str[0], flags);\n\n    if (tail != null) {\n      details.tailShift += this.appendTail(tail).tailShift;\n    }\n\n    return details;\n  }\n\n  doCommit () {}\n\n  get state (): PatternFixedDefinitionState {\n    return {\n      _value: this._value,\n      _isRawInput: this._isRawInput,\n    };\n  }\n\n  set state (state: PatternFixedDefinitionState) {\n    Object.assign(this, state);\n  }\n}\n","import createMask, { type NormalizedOpts } from '../factory';\nimport type Masked from '../base';\nimport type MaskedPattern from '../pattern';\nimport { type TailDetails } from '../../core/tail-details';\nimport { type ExtractFlags, type AppendFlags } from '../base';\nimport ChangeDetails from '../../core/change-details';\nimport { DIRECTION, type Direction } from '../../core/utils';\nimport type PatternBlock from './block';\n\n\nexport\ntype PatternInputDefinitionOptions = NormalizedOpts & Partial<Pick<PatternInputDefinition,\n  | 'parent'\n  | 'isOptional'\n  | 'lazy'\n  | 'eager'\n  | 'placeholderChar'\n  | 'displayChar'\n>>;\n\nexport\ntype PatternInputDefinitionState = {\n  masked: Masked['state'],\n  isFilled: boolean,\n};\n\n\nexport default\nclass PatternInputDefinition implements PatternBlock {\n  static DEFAULT_DEFINITIONS: { [k: string]: RegExp } = {\n    '0': /\\d/,\n    'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,  // http://stackoverflow.com/a/22075070\n    '*': /./\n  }\n\n  /** */\n  declare readonly masked: Masked;\n  /** */\n  declare parent: Masked;\n  /** */\n  declare isOptional: boolean;\n  /** */\n  declare isFilled: boolean;\n  /** */\n  declare lazy: MaskedPattern['lazy'];\n  /** */\n  declare eager: MaskedPattern['eager'];\n  /** */\n  declare placeholderChar: MaskedPattern['placeholderChar'];\n  /** */\n  declare displayChar: MaskedPattern['displayChar'];\n\n  constructor(opts: PatternInputDefinitionOptions) {\n    const { parent, isOptional, placeholderChar, displayChar, lazy, eager, ...maskOpts } = opts;\n\n    this.masked = createMask(maskOpts);\n    Object.assign(this, { parent, isOptional, placeholderChar, displayChar, lazy, eager });\n  }\n\n  reset () {\n    this.isFilled = false;\n    this.masked.reset();\n  }\n\n  remove (fromPos: number=0, toPos: number=this.value.length): ChangeDetails {\n    if (fromPos === 0 && toPos >= 1) {\n      this.isFilled = false;\n      return this.masked.remove(fromPos, toPos);\n    }\n\n    return new ChangeDetails();\n  }\n\n  get value (): string {\n    return this.masked.value ||\n      (this.isFilled && !this.isOptional ?\n        this.placeholderChar :\n        '');\n  }\n\n  get unmaskedValue (): string {\n    return this.masked.unmaskedValue;\n  }\n\n  get displayValue (): string {\n    return this.masked.value && this.displayChar || this.value;\n  }\n\n  get isComplete (): boolean {\n    return Boolean(this.masked.value) || this.isOptional;\n  }\n\n  _appendChar (ch: string, flags: AppendFlags={}): ChangeDetails {\n    if (this.isFilled) return new ChangeDetails();\n\n    const state = this.masked.state;\n    // simulate input\n    const details = this.masked._appendChar(ch, flags);\n\n    if (details.inserted && this.doValidate(flags) === false) {\n      details.inserted = details.rawInserted = '';\n      this.masked.state = state;\n    }\n\n    if (!details.inserted && !this.isOptional && !this.lazy && !flags.input) {\n      details.inserted = this.placeholderChar;\n    }\n    details.skip = !details.inserted && !this.isOptional;\n    this.isFilled = Boolean(details.inserted);\n\n    return details;\n  }\n\n  append (str: string, flags?: AppendFlags, tail?: TailDetails): ChangeDetails {\n    // TODO probably should be done via _appendChar\n    return this.masked.append(str, flags, tail);\n  }\n\n  _appendPlaceholder (): ChangeDetails {\n    const details = new ChangeDetails();\n\n    if (this.isFilled || this.isOptional) return details;\n\n    this.isFilled = true;\n    details.inserted = this.placeholderChar;\n    return details;\n  }\n\n  _appendEager (): ChangeDetails {\n    return new ChangeDetails();\n  }\n\n  extractTail (fromPos?: number, toPos?: number): TailDetails {\n    return this.masked.extractTail(fromPos, toPos);\n  }\n\n  appendTail (tail: string | TailDetails): ChangeDetails {\n    return this.masked.appendTail(tail);\n  }\n\n  extractInput (fromPos: number=0, toPos: number=this.value.length, flags?: ExtractFlags): string {\n    return this.masked.extractInput(fromPos, toPos, flags);\n  }\n\n  nearestInputPos (cursorPos: number, direction: Direction=DIRECTION.NONE): number {\n    const minPos = 0;\n    const maxPos = this.value.length;\n    const boundPos = Math.min(Math.max(cursorPos, minPos), maxPos);\n\n    switch (direction) {\n      case DIRECTION.LEFT:\n      case DIRECTION.FORCE_LEFT:\n        return this.isComplete ? boundPos : minPos;\n      case DIRECTION.RIGHT:\n      case DIRECTION.FORCE_RIGHT:\n        return this.isComplete ? boundPos : maxPos;\n      case DIRECTION.NONE:\n      default: return boundPos;\n    }\n  }\n\n  totalInputPositions (fromPos: number=0, toPos: number=this.value.length): number {\n    return this.value.slice(fromPos, toPos).length;\n  }\n\n  doValidate (flags: AppendFlags): boolean {\n    return this.masked.doValidate(flags) && (\n      !this.parent || this.parent.doValidate(flags));\n  }\n\n  doCommit () {\n    this.masked.doCommit();\n  }\n\n  get state (): PatternInputDefinitionState {\n    return {\n      masked: this.masked.state,\n      isFilled: this.isFilled,\n    };\n  }\n\n  set state (state: PatternInputDefinitionState) {\n    this.masked.state = state.masked;\n    this.isFilled = state.isFilled;\n  }\n}\n","import Masked, { type MaskedOptions } from './base';\nimport IMask from '../core/holder';\n\n\nexport\ntype MaskedRegExpOptions = MaskedOptions<MaskedRegExp>;\n\n/** Masking by RegExp */\nexport default\nclass MaskedRegExp extends Masked<string> {\n  declare mask: RegExp;\n\n  override updateOptions (opts: Partial<MaskedRegExpOptions>) {\n    super.updateOptions(opts);\n  }\n\n  override _update (opts: Partial<MaskedRegExpOptions>) {\n    if (opts.mask) opts.validate = (value) => value.search(opts.mask) >= 0;\n    super._update(opts);\n  }\n}\n\n\nIMask.MaskedRegExp = MaskedRegExp;\n","import exp from 'constants';\nimport ChangeDetails from '../core/change-details';\nimport IMask from '../core/holder';\nimport { type TailDetails } from '../core/tail-details';\nimport { DIRECTION, type Direction } from '../core/utils';\nimport Masked, { type AppendFlags, type ExtractFlags, type MaskedOptions, type MaskedState } from './base';\nimport createMask, { type FactoryOpts, normalizeOpts } from './factory';\nimport type PatternBlock from './pattern/block';\nimport ChunksTailDetails from './pattern/chunk-tail-details';\nimport PatternCursor from './pattern/cursor';\nimport PatternFixedDefinition from './pattern/fixed-definition';\nimport PatternInputDefinition from './pattern/input-definition';\nimport './regexp'; // support for default definitions which are regexp's\n\n\nexport\ntype MaskedPatternOptions<Value=string, M extends MaskedPattern<Value>=MaskedPattern<Value>, Props extends keyof M=never> = MaskedOptions<M,\n  | 'definitions'\n  | 'blocks'\n  | 'placeholderChar'\n  | 'displayChar'\n  | 'lazy'\n  | Props\n>;\n\nexport\ntype Definitions = {\n  [k: string]: FactoryOpts,\n};\n\nexport\ntype MaskedPatternState = MaskedState & {\n  _blocks: Array<any>,\n};\n\nexport\ntype BlockPosData = {\n  index: number,\n  offset: number,\n};\n\n\n/**\n  Pattern mask\n*/\nexport default\nclass MaskedPattern<Value=string> extends Masked<Value> {\n  static DEFAULTS: Partial<MaskedPatternOptions> = {\n    lazy: true,\n    placeholderChar: '_'\n  };\n  static STOP_CHAR = '`';\n  static ESCAPE_CHAR = '\\\\';\n  static InputDefinition = PatternInputDefinition;\n  static FixedDefinition = PatternFixedDefinition;\n\n  declare mask: string;\n  /** */\n  declare blocks: { [key: string]: FactoryOpts };\n  /** */\n  declare definitions: Definitions;\n  /** Single char for empty input */\n  declare placeholderChar: string;\n  /** Single char for filled input */\n  declare displayChar: string;\n  /** Show placeholder only when needed */\n  declare lazy: boolean;\n\n  declare _blocks: Array<PatternBlock>;\n  declare _maskedBlocks: {[key: string]: Array<number>};\n  declare _stops: Array<number>;\n\n  constructor (opts: MaskedPatternOptions<Value>) {\n    super({\n      ...MaskedPattern.DEFAULTS,\n      ...opts,\n      definitions: Object.assign({}, PatternInputDefinition.DEFAULT_DEFINITIONS, opts?.definitions),\n    } as MaskedOptions);\n  }\n\n  override updateOptions (opts: Partial<MaskedPatternOptions<Value>>) {\n    super.updateOptions(opts);\n  }\n\n  override _update (opts: Partial<MaskedPatternOptions<Value>>) {\n    opts.definitions = Object.assign({}, this.definitions, opts.definitions);\n    super._update(opts);\n    this._rebuildMask();\n  }\n\n  _rebuildMask () {\n    const defs = this.definitions;\n    this._blocks = [];\n    this._stops = [];\n    this._maskedBlocks = {};\n\n    let pattern = this.mask;\n    if (!pattern || !defs) return;\n\n    let unmaskingBlock = false;\n    let optionalBlock = false;\n\n    for (let i=0; i<pattern.length; ++i) {\n      if (this.blocks) {\n        const p = pattern.slice(i);\n        const bNames = Object.keys(this.blocks).filter(bName => p.indexOf(bName) === 0);\n        // order by key length\n        bNames.sort((a, b) => b.length - a.length);\n        // use block name with max length\n        const bName = bNames[0];\n        if (bName) {\n          const maskedBlock = createMask({\n            lazy: this.lazy,\n            eager: this.eager,\n            placeholderChar: this.placeholderChar,\n            displayChar: this.displayChar,\n            overwrite: this.overwrite,\n            ...normalizeOpts(this.blocks[bName]),\n            parent: this,\n          });\n\n          if (maskedBlock) {\n            this._blocks.push(maskedBlock);\n\n            // store block index\n            if (!this._maskedBlocks[bName]) this._maskedBlocks[bName] = [];\n            this._maskedBlocks[bName].push(this._blocks.length - 1);\n          }\n\n          i += bName.length - 1;\n          continue;\n        }\n      }\n\n      let char = pattern[i];\n      let isInput = char in defs;\n\n      if (char === MaskedPattern.STOP_CHAR) {\n        this._stops.push(this._blocks.length);\n        continue;\n      }\n\n      if (char === '{' || char === '}') {\n        unmaskingBlock = !unmaskingBlock;\n        continue;\n      }\n\n      if (char === '[' || char === ']') {\n        optionalBlock = !optionalBlock;\n        continue;\n      }\n\n      if (char === MaskedPattern.ESCAPE_CHAR) {\n        ++i;\n        char = pattern[i];\n        if (!char) break;\n        isInput = false;\n      }\n\n      const def = isInput ?\n        new PatternInputDefinition({\n          isOptional: optionalBlock,\n          lazy: this.lazy,\n          eager: this.eager,\n          placeholderChar: this.placeholderChar,\n          displayChar: this.displayChar,\n          ...normalizeOpts(defs[char]),\n          parent: this,\n        } as any) :\n        new PatternFixedDefinition({\n          char,\n          eager: this.eager,\n          isUnmasking: unmaskingBlock,\n        });\n\n      this._blocks.push(def);\n    }\n  }\n\n  get state (): MaskedPatternState {\n    return {\n      ...super.state,\n      _blocks: this._blocks.map(b => b.state),\n    };\n  }\n\n  set state (state: MaskedPatternState) {\n    const {_blocks, ...maskedState} = state;\n    this._blocks.forEach((b, bi) => b.state = _blocks[bi]);\n    super.state = maskedState;\n  }\n\n  reset () {\n    super.reset();\n    this._blocks.forEach(b => b.reset());\n  }\n\n  get isComplete (): boolean {\n    return this._blocks.every(b => b.isComplete);\n  }\n\n  get isFilled (): boolean {\n    return this._blocks.every(b => b.isFilled);\n  }\n\n  get isFixed (): boolean {\n    return this._blocks.every(b => b.isFixed);\n  }\n\n  get isOptional (): boolean {\n    return this._blocks.every(b => b.isOptional);\n  }\n\n  doCommit () {\n    this._blocks.forEach(b => b.doCommit());\n    super.doCommit();\n  }\n\n  get unmaskedValue (): string {\n    return this._blocks.reduce((str, b) => str += b.unmaskedValue, '');\n  }\n\n  set unmaskedValue (unmaskedValue: string) {\n    super.unmaskedValue = unmaskedValue;\n  }\n\n  get value (): string {\n    // TODO return _value when not in change?\n    return this._blocks.reduce((str, b) => str += b.value, '');\n  }\n\n  set value (value: string) {\n    super.value = value;\n  }\n\n  get displayValue (): string {\n    return this._blocks.reduce((str, b) => str += b.displayValue, '');\n  }\n\n  appendTail (tail: string | String | TailDetails): ChangeDetails {\n    return super.appendTail(tail).aggregate(this._appendPlaceholder());\n  }\n\n  _appendEager (): ChangeDetails {\n    const details = new ChangeDetails();\n\n    let startBlockIndex = this._mapPosToBlock(this.value.length)?.index;\n    if (startBlockIndex == null) return details;\n\n    // TODO test if it works for nested pattern masks\n    if (this._blocks[startBlockIndex].isFilled) ++startBlockIndex;\n\n    for (let bi=startBlockIndex; bi<this._blocks.length; ++bi) {\n      const d = this._blocks[bi]._appendEager();\n      if (!d.inserted) break;\n\n      details.aggregate(d);\n    }\n\n    return details;\n  }\n\n  _appendCharRaw (ch: string, flags: AppendFlags<MaskedPatternState>={}): ChangeDetails {\n    const blockIter = this._mapPosToBlock(this.value.length);\n    const details = new ChangeDetails();\n    if (!blockIter) return details;\n\n    for (let bi=blockIter.index; ; ++bi) {\n      const block = this._blocks[bi];\n      if (!block) break;\n\n      const blockDetails = block._appendChar(ch, { ...flags, _beforeTailState: flags._beforeTailState?._blocks?.[bi] });\n\n      const skip = blockDetails.skip;\n      details.aggregate(blockDetails);\n\n      if (skip || blockDetails.rawInserted) break; // go next char\n    }\n\n    return details;\n  }\n\n  extractTail (fromPos: number=0, toPos: number=this.value.length): ChunksTailDetails {\n    const chunkTail = new ChunksTailDetails();\n    if (fromPos === toPos) return chunkTail;\n\n    this._forEachBlocksInRange(fromPos, toPos, (b, bi, bFromPos, bToPos) => {\n      const blockChunk = b.extractTail(bFromPos, bToPos);\n      blockChunk.stop = this._findStopBefore(bi);\n      blockChunk.from = this._blockStartPos(bi);\n      if (blockChunk instanceof ChunksTailDetails) blockChunk.blockIndex = bi;\n\n      chunkTail.extend(blockChunk);\n    });\n\n    return chunkTail;\n  }\n\n  extractInput (fromPos: number=0, toPos: number=this.value.length, flags: ExtractFlags={}): string {\n    if (fromPos === toPos) return '';\n\n    let input = '';\n\n    this._forEachBlocksInRange(fromPos, toPos, (b, _, fromPos, toPos) => {\n      input += b.extractInput(fromPos, toPos, flags);\n    });\n\n    return input;\n  }\n\n  _findStopBefore (blockIndex: number): number | undefined {\n    let stopBefore;\n    for (let si=0; si<this._stops.length; ++si) {\n      const stop = this._stops[si];\n      if (stop <= blockIndex) stopBefore = stop;\n      else break;\n    }\n    return stopBefore;\n  }\n\n  /** Appends placeholder depending on laziness */\n  _appendPlaceholder (toBlockIndex?: number): ChangeDetails {\n    const details = new ChangeDetails();\n    if (this.lazy && toBlockIndex == null) return details;\n\n    const startBlockIter = this._mapPosToBlock(this.value.length);\n    if (!startBlockIter) return details;\n\n    const startBlockIndex = startBlockIter.index;\n    const endBlockIndex = toBlockIndex != null ? toBlockIndex : this._blocks.length;\n\n    this._blocks.slice(startBlockIndex, endBlockIndex)\n      .forEach(b => {\n        if (!b.lazy || toBlockIndex != null) {\n          const bDetails = b._appendPlaceholder((b as MaskedPattern)._blocks?.length);\n          this._value += bDetails.inserted;\n          details.aggregate(bDetails);\n        }\n      });\n\n    return details;\n  }\n\n  /** Finds block in pos */\n  _mapPosToBlock (pos: number): BlockPosData | undefined {\n    let accVal = '';\n    for (let bi=0; bi<this._blocks.length; ++bi) {\n      const block = this._blocks[bi];\n      const blockStartPos = accVal.length;\n\n      accVal += block.value;\n\n      if (pos <= accVal.length) {\n        return {\n          index: bi,\n          offset: pos - blockStartPos,\n        };\n      }\n    }\n  }\n\n  _blockStartPos (blockIndex: number): number {\n    return this._blocks\n      .slice(0, blockIndex)\n      .reduce((pos, b) => pos += b.value.length, 0);\n  }\n\n  _forEachBlocksInRange (fromPos: number, toPos: number=this.value.length, fn: (block: PatternBlock, blockIndex: number, fromPos: number, toPos: number) => void) {\n    const fromBlockIter = this._mapPosToBlock(fromPos);\n\n    if (fromBlockIter) {\n      const toBlockIter = this._mapPosToBlock(toPos);\n      // process first block\n      const isSameBlock = toBlockIter && fromBlockIter.index === toBlockIter.index;\n      const fromBlockStartPos = fromBlockIter.offset;\n      const fromBlockEndPos = toBlockIter && isSameBlock ?\n        toBlockIter.offset :\n        this._blocks[fromBlockIter.index].value.length;\n      fn(this._blocks[fromBlockIter.index], fromBlockIter.index, fromBlockStartPos, fromBlockEndPos);\n\n      if (toBlockIter && !isSameBlock) {\n        // process intermediate blocks\n        for (let bi=fromBlockIter.index+1; bi<toBlockIter.index; ++bi) {\n          fn(this._blocks[bi], bi, 0, this._blocks[bi].value.length);\n        }\n\n        // process last block\n        fn(this._blocks[toBlockIter.index], toBlockIter.index, 0, toBlockIter.offset);\n      }\n    }\n  }\n\n  remove (fromPos: number=0, toPos: number=this.value.length): ChangeDetails {\n    const removeDetails = super.remove(fromPos, toPos);\n    this._forEachBlocksInRange(fromPos, toPos, (b, _, bFromPos, bToPos) => {\n      removeDetails.aggregate(b.remove(bFromPos, bToPos));\n    });\n    return removeDetails;\n  }\n\n  nearestInputPos (cursorPos: number, direction: Direction=DIRECTION.NONE): number {\n    if (!this._blocks.length) return 0;\n    const cursor = new PatternCursor(this, cursorPos);\n\n    if (direction === DIRECTION.NONE) {\n      // -------------------------------------------------\n      // NONE should only go out from fixed to the right!\n      // -------------------------------------------------\n      if (cursor.pushRightBeforeInput()) return cursor.pos;\n      cursor.popState();\n      if (cursor.pushLeftBeforeInput()) return cursor.pos;\n      return this.value.length;\n    }\n\n    // FORCE is only about a|* otherwise is 0\n    if (direction === DIRECTION.LEFT || direction === DIRECTION.FORCE_LEFT) {\n      // try to break fast when *|a\n      if (direction === DIRECTION.LEFT) {\n        cursor.pushRightBeforeFilled();\n        if (cursor.ok && cursor.pos === cursorPos) return cursorPos;\n        cursor.popState();\n      }\n\n      // forward flow\n      cursor.pushLeftBeforeInput();\n      cursor.pushLeftBeforeRequired();\n      cursor.pushLeftBeforeFilled();\n\n      // backward flow\n      if (direction === DIRECTION.LEFT) {\n        cursor.pushRightBeforeInput();\n        cursor.pushRightBeforeRequired();\n        if (cursor.ok && cursor.pos <= cursorPos) return cursor.pos;\n        cursor.popState();\n        if (cursor.ok && cursor.pos <= cursorPos) return cursor.pos;\n        cursor.popState();\n      }\n      if (cursor.ok) return cursor.pos;\n      if (direction === DIRECTION.FORCE_LEFT) return 0;\n\n      cursor.popState();\n      if (cursor.ok) return cursor.pos;\n\n      cursor.popState();\n      if (cursor.ok) return cursor.pos;\n\n      // cursor.popState();\n      // if (\n      //   cursor.pushRightBeforeInput() &&\n      //   // TODO HACK for lazy if has aligned left inside fixed and has came to the start - use start position\n      //   (!this.lazy || this.extractInput())\n      // ) return cursor.pos;\n\n      return 0;\n    }\n\n    if (direction === DIRECTION.RIGHT || direction === DIRECTION.FORCE_RIGHT) {\n      // forward flow\n      cursor.pushRightBeforeInput();\n      cursor.pushRightBeforeRequired();\n\n      if (cursor.pushRightBeforeFilled()) return cursor.pos;\n      if (direction === DIRECTION.FORCE_RIGHT) return this.value.length;\n\n      // backward flow\n      cursor.popState();\n      if (cursor.ok) return cursor.pos;\n\n      cursor.popState();\n      if (cursor.ok) return cursor.pos;\n\n      return this.nearestInputPos(cursorPos, DIRECTION.LEFT);\n    }\n\n    return cursorPos;\n  }\n\n  totalInputPositions (fromPos: number=0, toPos: number=this.value.length): number {\n    let total = 0;\n    this._forEachBlocksInRange(fromPos, toPos, (b, _, bFromPos, bToPos) => {\n      total += b.totalInputPositions(bFromPos, bToPos);\n    });\n    return total;\n  }\n\n  /** Get block by name */\n  maskedBlock (name: string): PatternBlock | undefined {\n    return this.maskedBlocks(name)[0];\n  }\n\n  /** Get all blocks by name */\n  maskedBlocks (name: string): Array<PatternBlock> {\n    const indices = this._maskedBlocks[name];\n    if (!indices) return [];\n    return indices.map(gi => this._blocks[gi]);\n  }\n}\n\n\nIMask.MaskedPattern = MaskedPattern;\n","import ChangeDetails from '../core/change-details';\nimport IMask from '../core/holder';\nimport { type AppendFlags } from './base';\nimport MaskedPattern, { type MaskedPatternOptions } from './pattern';\n\n\nexport\ntype MaskedRangeOptions = Omit<MaskedPatternOptions, 'mask'> &\n  Pick<MaskedRange, 'maxLength' | 'from' | 'to' | 'autofix'>;\n\ntype MaskedRangePatternOptions = MaskedPatternOptions &\n  Pick<MaskedRange, 'maxLength' | 'from' | 'to' | 'autofix'>;\n\n\n/** Pattern which accepts ranges */\nexport default\nclass MaskedRange extends MaskedPattern {\n  /**\n    Optionally sets max length of pattern.\n    Used when pattern length is longer then `to` param length. Pads zeros at start in this case.\n  */\n  declare maxLength?: number;\n  /** Min bound */\n  declare from: number;\n  /** Max bound */\n  declare to: number;\n  /** */\n  declare autofix?: boolean | 'pad';\n\n  get _matchFrom (): number {\n    return this.maxLength - String(this.from).length;\n  }\n\n  constructor (opts?: MaskedRangeOptions) {\n    super(opts as MaskedPatternOptions); // mask will be created in _update\n  }\n\n  override updateOptions (opts: Partial<MaskedRangeOptions>) {\n    super.updateOptions(opts);\n  }\n\n  override _update (opts: Partial<MaskedRangeOptions>) {\n    const {\n      to=this.to || 0,\n      from=this.from || 0,\n      maxLength=this.maxLength || 0,\n      autofix=this.autofix,\n      ...patternOpts\n    }: Partial<MaskedRangePatternOptions> = opts;\n\n    this.to = to;\n    this.from = from;\n    this.maxLength = Math.max(String(to).length, maxLength);\n    this.autofix = autofix;\n\n    const fromStr = String(this.from).padStart(this.maxLength, '0');\n    const toStr = String(this.to).padStart(this.maxLength, '0');\n    let sameCharsCount = 0;\n    while (sameCharsCount < toStr.length && toStr[sameCharsCount] === fromStr[sameCharsCount]) ++sameCharsCount;\n    patternOpts.mask = toStr.slice(0, sameCharsCount).replace(/0/g, '\\\\0') + '0'.repeat(this.maxLength - sameCharsCount);\n\n    super._update(patternOpts);\n  }\n\n  override get isComplete (): boolean {\n    return super.isComplete && Boolean(this.value);\n  }\n\n  boundaries (str: string): [string, string] {\n    let minstr = '';\n    let maxstr = '';\n\n    const [, placeholder, num] = str.match(/^(\\D*)(\\d*)(\\D*)/) || [];\n    if (num) {\n      minstr = '0'.repeat(placeholder.length) + num;\n      maxstr = '9'.repeat(placeholder.length) + num;\n    }\n    minstr = minstr.padEnd(this.maxLength, '0');\n    maxstr = maxstr.padEnd(this.maxLength, '9');\n\n    return [minstr, maxstr];\n  }\n\n  override doPrepareChar (ch: string, flags: AppendFlags={}): [string, ChangeDetails] {\n    let details: ChangeDetails;\n    [ch, details] = super.doPrepareChar(ch.replace(/\\D/g, ''), flags);\n\n    if (!this.autofix || !ch) return [ch, details];\n\n    const fromStr = String(this.from).padStart(this.maxLength, '0');\n    const toStr = String(this.to).padStart(this.maxLength, '0');\n\n    let nextVal = this.value + ch;\n    if (nextVal.length > this.maxLength) return ['', details];\n\n    const [minstr, maxstr] = this.boundaries(nextVal);\n\n    if (Number(maxstr) < this.from) return [fromStr[nextVal.length - 1], details];\n\n    if (Number(minstr) > this.to) {\n      if (this.autofix === 'pad' && nextVal.length < this.maxLength) {\n        return ['', details.aggregate(this.append(fromStr[nextVal.length - 1]+ch, flags))];\n      }\n      return [toStr[nextVal.length - 1], details];\n    }\n\n    return [ch, details];\n  }\n\n  override doValidate (flags: AppendFlags): boolean {\n    const str = this.value;\n\n    const firstNonZero = str.search(/[^0]/);\n    if (firstNonZero === -1 && str.length <= this._matchFrom) return true;\n\n    const [minstr, maxstr] = this.boundaries(str);\n\n    return this.from <= Number(maxstr) && Number(minstr) <= this.to &&\n      super.doValidate(flags);\n  }\n}\n\n\nIMask.MaskedRange = MaskedRange;\n","import MaskedPattern, { type MaskedPatternOptions } from './pattern';\nimport { type MaskedRangeOptions } from './range';\nimport MaskedRange from './range';\nimport IMask from '../core/holder';\nimport { type AppendFlags } from './base';\nimport { isString } from '../core/utils';\n\n\nexport\ntype DateMaskType = DateConstructor;\n\ntype DateOptionsKeys =\n  | 'pattern'\n  | 'min'\n  | 'max'\n  | 'autofix'\n;\n\nexport\ntype MaskedDateOptions<Value=Date> =\n  Omit<MaskedPatternOptions<Value>, 'mask'> &\n  Partial<Pick<MaskedDate<Value>, DateOptionsKeys>> &\n  { mask?: string | DateMaskType }\n;\n\n/** Date mask */\nexport default\nclass MaskedDate<Value=Date> extends MaskedPattern<Value> {\n  static GET_DEFAULT_BLOCKS: () => { [k: string]: MaskedRangeOptions } = () => ({\n    d: {\n      mask: MaskedRange,\n      from: 1,\n      to: 31,\n      maxLength: 2,\n    },\n    m: {\n      mask: MaskedRange,\n      from: 1,\n      to: 12,\n      maxLength: 2,\n    },\n    Y: {\n      mask: MaskedRange,\n      from: 1900,\n      to: 9999,\n    }\n  });\n  static DEFAULTS: Partial<MaskedPatternOptions<any, MaskedDate<any>, DateOptionsKeys>> = {\n    mask: Date as any,\n    pattern: 'd{.}`m{.}`Y',\n    format: (date: Date) => {\n      if (!date) return '';\n\n      const day = String(date.getDate()).padStart(2, '0');\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const year = date.getFullYear();\n\n      return [day, month, year].join('.');\n    },\n    parse: (str: string) => {\n      const [day, month, year] = str.split('.').map(Number);\n      return new Date(year, month - 1, day);\n    },\n  };\n\n  /** Pattern mask for date according to {@link MaskedDate#format} */\n  declare pattern: string;\n  /** Start date */\n  declare min?: Date;\n  /** End date */\n  declare max?: Date;\n  /** */\n  declare autofix?: boolean | 'pad' | undefined;\n\n  constructor (opts?: MaskedDateOptions<Value>) {\n    const { mask, pattern, ...patternOpts } = {\n      ...(MaskedDate.DEFAULTS as MaskedDateOptions<Value>),\n      ...opts,\n    };\n\n    super({\n      ...patternOpts,\n      mask: isString(mask) ? mask : pattern,\n    });\n  }\n\n  override updateOptions (opts: Partial<MaskedDateOptions<Value>>) {\n    super.updateOptions(opts as Partial<MaskedPatternOptions<Value>>);\n  }\n\n  override _update (opts: Partial<MaskedDateOptions<Value>>) {\n    const { mask, pattern, blocks, ...patternOpts } = {\n      ...MaskedDate.DEFAULTS,\n      ...opts,\n    };\n\n    let patternBlocks = Object.assign({}, MaskedDate.GET_DEFAULT_BLOCKS());\n    // adjust year block\n    if (opts.min) patternBlocks.Y.from = opts.min.getFullYear();\n    if (opts.max) patternBlocks.Y.to = opts.max.getFullYear();\n    if (opts.min && opts.max && patternBlocks.Y.from === patternBlocks.Y.to\n    ) {\n      patternBlocks.m.from = opts.min.getMonth() + 1;\n      patternBlocks.m.to = opts.max.getMonth() + 1;\n\n      if (patternBlocks.m.from === patternBlocks.m.to) {\n        patternBlocks.d.from = opts.min.getDate();\n        patternBlocks.d.to = opts.max.getDate();\n      }\n    }\n    Object.assign(patternBlocks, this.blocks, blocks);\n\n    // add autofix\n    Object.keys(patternBlocks).forEach(bk => {\n      const b = patternBlocks[bk];\n      if (!('autofix' in b) && 'autofix' in opts) b.autofix = opts.autofix;\n    });\n\n    super._update({\n      ...patternOpts,\n      mask: isString(mask) ? mask : pattern,\n      blocks: patternBlocks,\n    });\n  }\n\n  override doValidate (flags: AppendFlags): boolean {\n    const date = this.date;\n\n    return super.doValidate(flags) &&\n      (!this.isComplete ||\n        this.isDateExist(this.value) && date != null &&\n        (this.min == null || this.min <= date) &&\n        (this.max == null || date <= this.max));\n  }\n\n  /** Checks if date is exists */\n  isDateExist (str: string): boolean {\n    return this.format(this.parse(str, this), this).indexOf(str) >= 0;\n  }\n\n  /** Parsed Date */\n  get date (): Value | null {\n    return this.typedValue;\n  }\n  set date (date: Value) {\n    this.typedValue = date;\n  }\n\n  override get typedValue (): Value | null {\n    return this.isComplete ? super.typedValue : null;\n  }\n  override set typedValue (value: Value) {\n    super.typedValue = value;\n  }\n\n  override maskEquals (mask: any): boolean {\n    return mask === Date || super.maskEquals(mask);\n  }\n}\n\n\nIMask.MaskedDate = MaskedDate;\n","import { objectIncludes } from '../core/utils';\nimport ChangeDetails from '../core/change-details';\nimport createMask, { type FactoryArg } from './factory';\nimport Masked, { type AppendFlags, type MaskedState, type MaskedOptions, type ExtractFlags } from './base';\nimport { DIRECTION, type Direction } from '../core/utils';\nimport { type TailDetails } from '../core/tail-details';\nimport IMask from '../core/holder';\n\n\nexport\ntype MaskedDynamicState = MaskedState & {\n  _rawInputValue: string,\n  compiledMasks: Array<MaskedState>,\n  currentMaskRef?: Masked,\n  currentMask: MaskedState,\n};\n\nexport\ntype DynamicMaskType = Array<FactoryArg> | ArrayConstructor;\n\nexport\ntype MaskedDynamicOptions = MaskedOptions<MaskedDynamic, 'dispatch'>;\n\n\n/** Dynamic mask for choosing appropriate mask in run-time */\nexport default\nclass MaskedDynamic<Value=any> extends Masked<Value> {\n  static DEFAULTS: Partial<MaskedDynamicOptions>;\n\n  declare mask: DynamicMaskType;\n  // TODO types\n  /** Currently chosen mask */\n  declare currentMask?: Masked;\n  /** Compliled {@link Masked} options */\n  declare compiledMasks: Array<Masked>; // TODO FactoryReturnMasked<?>\n  /** Chooses {@link Masked} depending on input value */\n  declare dispatch: (appended: string, masked: MaskedDynamic, flags: AppendFlags<MaskedDynamicState>, tail: string | String | TailDetails) => Masked;\n\n  constructor (opts?: MaskedDynamicOptions) {\n    super({\n      ...MaskedDynamic.DEFAULTS,\n      ...opts\n    });\n\n    this.currentMask = null;\n  }\n\n  override updateOptions (opts: Partial<MaskedDynamicOptions>) {\n    super.updateOptions(opts);\n  }\n\n  override _update (opts: Partial<MaskedDynamicOptions>) {\n    super._update(opts);\n    if ('mask' in opts) {\n      // mask could be totally dynamic with only `dispatch` option\n      this.compiledMasks = Array.isArray(opts.mask) ?\n        opts.mask.map(m => createMask(m)) :\n        [];\n\n      // this.currentMask = this.doDispatch(''); // probably not needed but lets see\n    }\n  }\n\n  override _appendCharRaw (ch: string, flags: AppendFlags<MaskedDynamicState>={}): ChangeDetails {\n    const details = this._applyDispatch(ch, flags);\n\n    if (this.currentMask) {\n      details.aggregate(this.currentMask._appendChar(ch, this.currentMaskFlags(flags)));\n    }\n\n    return details;\n  }\n\n  _applyDispatch (appended: string='', flags: AppendFlags<MaskedDynamicState>={}, tail: string | String | TailDetails = ''): ChangeDetails {\n    const prevValueBeforeTail = flags.tail && flags._beforeTailState != null ?\n      flags._beforeTailState._value :\n      this.value;\n    const inputValue = this.rawInputValue;\n    const insertValue = flags.tail && flags._beforeTailState != null ?\n      flags._beforeTailState._rawInputValue :\n      inputValue;\n    const tailValue = inputValue.slice(insertValue.length);\n    const prevMask = this.currentMask;\n    const details = new ChangeDetails();\n\n    const prevMaskState = prevMask?.state;\n\n    // clone flags to prevent overwriting `_beforeTailState`\n    this.currentMask = this.doDispatch(appended, { ...flags }, tail);\n\n    // restore state after dispatch\n    if (this.currentMask) {\n      if (this.currentMask !== prevMask) {\n        // if mask changed reapply input\n        this.currentMask.reset();\n\n        if (insertValue) {\n          const d = this.currentMask.append(insertValue, {raw: true});\n          details.tailShift = d.inserted.length - prevValueBeforeTail.length;\n        }\n\n        if (tailValue) {\n          details.tailShift += this.currentMask.append(tailValue, {raw: true, tail: true}).tailShift;\n        }\n      } else {\n        // Dispatch can do something bad with state, so\n        // restore prev mask state\n        this.currentMask.state = prevMaskState;\n      }\n    }\n\n    return details;\n  }\n\n  override _appendPlaceholder (): ChangeDetails {\n    const details = this._applyDispatch();\n\n    if (this.currentMask) {\n      details.aggregate(this.currentMask._appendPlaceholder());\n    }\n\n    return details;\n  }\n\n  override _appendEager (): ChangeDetails {\n    const details = this._applyDispatch();\n\n    if (this.currentMask) {\n      details.aggregate(this.currentMask._appendEager());\n    }\n\n    return details;\n  }\n\n  override appendTail (tail: string | String | TailDetails): ChangeDetails {\n    const details = new ChangeDetails();\n    if (tail) details.aggregate(this._applyDispatch('', {}, tail));\n\n    return details.aggregate(this.currentMask ?\n      this.currentMask.appendTail(tail) :\n      super.appendTail(tail));\n  }\n\n  currentMaskFlags (flags: AppendFlags<MaskedDynamicState>): AppendFlags {\n    return {\n      ...flags,\n      _beforeTailState: flags._beforeTailState?.currentMaskRef === this.currentMask && flags._beforeTailState?.currentMask ||\n        flags._beforeTailState,\n    };\n  }\n\n  doDispatch(appended: string, flags: AppendFlags<MaskedDynamicState>={}, tail: string | String | TailDetails=''): Masked | undefined {\n    return this.dispatch(appended, this, flags, tail);\n  }\n\n  override doValidate (flags: AppendFlags<MaskedDynamicState>): boolean {\n    return super.doValidate(flags) && (\n      !this.currentMask || this.currentMask.doValidate(this.currentMaskFlags(flags))\n    );\n  }\n\n  override doPrepare (str: string, flags: AppendFlags<MaskedDynamicState>={}): [string, ChangeDetails] {\n    let [s, details] = super.doPrepare(str, flags);\n\n    if (this.currentMask) {\n      let currentDetails;\n      ([s, currentDetails] = super.doPrepare(s, this.currentMaskFlags(flags)));\n      details = details.aggregate(currentDetails);\n    }\n\n    return [s, details];\n  }\n\n  override doPrepareChar (str: string, flags: AppendFlags<MaskedDynamicState>={}): [string, ChangeDetails] {\n    let [s, details] = super.doPrepareChar(str, flags);\n\n    if (this.currentMask) {\n      let currentDetails;\n      ([s, currentDetails] = super.doPrepareChar(s, this.currentMaskFlags(flags)));\n      details = details.aggregate(currentDetails);\n    }\n\n    return [s, details];\n  }\n\n  override reset () {\n    this.currentMask?.reset();\n    this.compiledMasks.forEach(m => m.reset());\n  }\n\n  override get value (): string {\n    return this.currentMask ? this.currentMask.value : '';\n  }\n\n  override set value (value: string) {\n    super.value = value;\n  }\n\n  override get unmaskedValue (): string {\n    return this.currentMask ? this.currentMask.unmaskedValue : '';\n  }\n\n  override set unmaskedValue (unmaskedValue: string) {\n    super.unmaskedValue = unmaskedValue;\n  }\n\n  override get typedValue (): Value {\n    return this.currentMask ? this.currentMask.typedValue : '';\n  }\n\n  // probably typedValue should not be used with dynamic\n  override set typedValue (value: Value) {\n    let unmaskedValue = String(value);\n\n    // double check it\n    if (this.currentMask) {\n      this.currentMask.typedValue = value;\n      unmaskedValue = this.currentMask.unmaskedValue;\n    }\n    this.unmaskedValue = unmaskedValue;\n  }\n\n  override get displayValue (): string {\n    return this.currentMask ? this.currentMask.displayValue : '';\n  }\n\n  override get isComplete (): boolean {\n    return Boolean(this.currentMask?.isComplete);\n  }\n\n  override get isFilled (): boolean {\n    return Boolean(this.currentMask?.isFilled);\n  }\n\n  override remove (fromPos?: number, toPos?: number): ChangeDetails {\n    const details: ChangeDetails = new ChangeDetails();\n    if (this.currentMask) {\n      details.aggregate(this.currentMask.remove(fromPos, toPos))\n        // update with dispatch\n        .aggregate(this._applyDispatch());\n    }\n\n    return details;\n  }\n\n  override get state (): MaskedDynamicState {\n    return {\n      ...super.state,\n      _rawInputValue: this.rawInputValue,\n      compiledMasks: this.compiledMasks.map(m => m.state),\n      currentMaskRef: this.currentMask,\n      currentMask: this.currentMask?.state,\n    };\n  }\n\n  override set state (state: MaskedDynamicState) {\n    const {compiledMasks, currentMaskRef, currentMask, ...maskedState} = state;\n    this.compiledMasks.forEach((m, mi) => m.state = compiledMasks[mi]);\n    if (currentMaskRef != null) {\n      this.currentMask = currentMaskRef;\n      this.currentMask.state = currentMask;\n    }\n    super.state = maskedState;\n  }\n\n  override extractInput (fromPos?: number, toPos?: number, flags?: ExtractFlags): string {\n    return this.currentMask ?\n      this.currentMask.extractInput(fromPos, toPos, flags) :\n      '';\n  }\n\n  override extractTail (fromPos?: number, toPos?: number): TailDetails {\n    return this.currentMask ?\n      this.currentMask.extractTail(fromPos, toPos) :\n      super.extractTail(fromPos, toPos);\n  }\n\n  override doCommit () {\n    if (this.currentMask) this.currentMask.doCommit();\n    super.doCommit();\n  }\n\n  override nearestInputPos(cursorPos: number, direction?: Direction): number {\n    return this.currentMask ?\n      this.currentMask.nearestInputPos(cursorPos, direction) :\n      super.nearestInputPos(cursorPos, direction);\n  }\n\n  // @ts-ignore i don't mind overriding\n  override get overwrite (): boolean | 'shift' | undefined {\n    return this.currentMask ?\n      this.currentMask.overwrite :\n      super.overwrite;\n  }\n\n  override set overwrite (overwrite: boolean | 'shift') {\n    console.warn('\"overwrite\" option is not available in dynamic mask, use this option in siblings');\n  }\n\n  // @ts-ignore i don't mind overriding\n  override get eager (): boolean | 'remove' | 'append' | undefined {\n    return this.currentMask ?\n      this.currentMask.eager :\n      super.eager;\n  }\n\n  override set eager (eager: boolean | 'remove' | 'append') {\n    console.warn('\"eager\" option is not available in dynamic mask, use this option in siblings');\n  }\n\n  // @ts-ignore i don't mind overriding\n  override get skipInvalid (): boolean | undefined {\n    return this.currentMask ?\n      this.currentMask.skipInvalid :\n      super.skipInvalid;\n  }\n\n  override set skipInvalid (skipInvalid: boolean | undefined) {\n    if (this._initialized || skipInvalid !== Masked.DEFAULTS.skipInvalid) {\n      console.warn('\"skipInvalid\" option is not available in dynamic mask, use this option in siblings');\n    }\n  }\n\n  override maskEquals (mask: any): boolean {\n    return Array.isArray(mask) ?\n      this.compiledMasks.every((m, mi) => {\n        if (!mask[mi]) return;\n\n        const { mask: oldMask, ...restOpts } = mask[mi];\n        return objectIncludes(m, restOpts) && m.maskEquals(oldMask);\n      }) : super.maskEquals(mask);\n  }\n\n  override typedValueEquals (value: any): boolean {\n    return Boolean(this.currentMask?.typedValueEquals(value));\n  }\n}\n\nMaskedDynamic.DEFAULTS = {\n  dispatch: (appended, masked, flags, tail) => {\n    if (!masked.compiledMasks.length) return;\n\n    const inputValue = masked.rawInputValue;\n\n    // simulate input\n    const inputs = masked.compiledMasks.map((m, index) => {\n      const isCurrent = masked.currentMask === m;\n      const startInputPos = isCurrent ? m.value.length : m.nearestInputPos(m.value.length, DIRECTION.FORCE_LEFT);\n\n      if (m.rawInputValue !== inputValue) {\n        m.reset();\n        m.append(inputValue, { raw: true });\n      } else if (!isCurrent) {\n        m.remove(startInputPos);\n      }\n      m.append(appended, masked.currentMaskFlags(flags));\n      m.appendTail(tail);\n\n      return {\n        index,\n        weight: m.rawInputValue.length,\n        totalInputPositions: m.totalInputPositions(\n          0,\n          Math.max(startInputPos, m.nearestInputPos(m.value.length, DIRECTION.FORCE_LEFT)),\n        ),\n      };\n    });\n\n    // pop masks with longer values first\n    inputs.sort((i1, i2) => i2.weight - i1.weight || i2.totalInputPositions - i1.totalInputPositions);\n\n    return masked.compiledMasks[inputs[0].index];\n  }\n};\n\n\nIMask.MaskedDynamic = MaskedDynamic;\n","import MaskedPattern, { type MaskedPatternOptions } from './pattern';\nimport { AppendFlags } from './base';\nimport IMask from '../core/holder';\n\n\nexport\ntype MaskedEnumOptions = Omit<MaskedPatternOptions, 'mask'> & Pick<MaskedEnum, 'enum'>;\n\nexport\ntype MaskedEnumPatternOptions = MaskedPatternOptions & Partial<Pick<MaskedEnum, 'enum'>>;\n\n\n/** Pattern which validates enum values */\nexport default\nclass MaskedEnum extends MaskedPattern {\n  declare enum: Array<string>;\n\n  override updateOptions (opts: Partial<MaskedEnumOptions>) {\n    super.updateOptions(opts);\n  }\n\n  override _update (opts: Partial<MaskedEnumOptions>) {\n    const { enum: _enum, ...eopts }: MaskedEnumPatternOptions = opts;\n    this.enum = this.enum;\n    if (_enum) eopts.mask = '*'.repeat(_enum[0].length);\n\n    super._update(eopts);\n  }\n\n  override doValidate (flags: AppendFlags): boolean {\n    return this.enum.some(e => e.indexOf(this.unmaskedValue) >= 0) &&\n      super.doValidate(flags);\n  }\n}\n\n\nIMask.MaskedEnum = MaskedEnum;\n","import Masked, { type MaskedOptions } from './base';\nimport IMask from '../core/holder';\n\n\nexport\ntype MaskedFunctionOptions = MaskedOptions<MaskedFunction>;\n\n/** Masking by custom Function */\nexport default\nclass MaskedFunction<Value=any> extends Masked<Value> {\n  declare mask: (value: string, masked: this) => boolean;\n  override updateOptions (opts: Partial<MaskedFunctionOptions>) {\n    super.updateOptions(opts);\n  }\n\n  override _update (opts: Partial<MaskedFunctionOptions>) {\n    super._update({\n      ...opts,\n      validate: opts.mask,\n    });\n  }\n}\n\n\nIMask.MaskedFunction = MaskedFunction;\n","import { escapeRegExp, type Direction, DIRECTION } from '../core/utils';\nimport ChangeDetails from '../core/change-details';\nimport { type TailDetails } from '../core/tail-details';\n\nimport Masked, { type MaskedOptions, type ExtractFlags, type AppendFlags } from './base';\nimport IMask from '../core/holder';\n\n\nexport\ntype MaskedNumberOptions = MaskedOptions<MaskedNumber,\n  | 'radix'\n  | 'thousandsSeparator'\n  | 'mapToRadix'\n  | 'scale'\n  | 'min'\n  | 'max'\n  | 'normalizeZeros'\n  | 'padFractionalZeros'\n>;\n\n/**\n  Number mask\n*/\nexport default\nclass MaskedNumber extends Masked<number> {\n  static UNMASKED_RADIX = '.';\n  static EMPTY_VALUES: Array<null | undefined | string | number> = [...Masked.EMPTY_VALUES, 0];\n  static DEFAULTS: Partial<MaskedNumberOptions> = {\n    mask: Number,\n    radix: ',',\n    thousandsSeparator: '',\n    mapToRadix: [MaskedNumber.UNMASKED_RADIX],\n    min: Number.MIN_SAFE_INTEGER,\n    max: Number.MAX_SAFE_INTEGER,\n    scale: 2,\n    normalizeZeros: true,\n    padFractionalZeros: false,\n    parse: Number,\n    format: (n: number) => n.toLocaleString('en-US', { useGrouping: false, maximumFractionDigits: 20 }),\n  };\n\n  declare mask: NumberConstructor;\n  /** Single char */\n  declare radix: string;\n  /** Single char */\n  declare thousandsSeparator: string;\n  /** Array of single chars */\n  declare mapToRadix: Array<string>;\n  /** */\n  declare min: number;\n  /** */\n  declare max: number;\n  /** Digits after point */\n  declare scale: number;\n  /** Flag to remove leading and trailing zeros in the end of editing */\n  declare normalizeZeros: boolean;\n  /** Flag to pad trailing zeros after point in the end of editing */\n  declare padFractionalZeros: boolean;\n\n  declare _numberRegExp: RegExp;\n  declare _thousandsSeparatorRegExp: RegExp;\n  declare _mapToRadixRegExp: RegExp;\n  declare _separatorsProcessed: boolean;\n\n  constructor (opts?: MaskedNumberOptions) {\n    super({\n      ...MaskedNumber.DEFAULTS,\n      ...opts,\n    });\n  }\n\n  override updateOptions (opts: Partial<MaskedNumberOptions>) {\n    super.updateOptions(opts);\n  }\n\n  override _update (opts: Partial<MaskedNumberOptions>) {\n    super._update(opts);\n    this._updateRegExps();\n  }\n\n  _updateRegExps () {\n    let start = '^' + (this.allowNegative ? '[+|\\\\-]?' : '');\n    let mid = '\\\\d*';\n    let end = (this.scale ?\n      `(${escapeRegExp(this.radix)}\\\\d{0,${this.scale}})?` :\n      '') + '$';\n\n    this._numberRegExp = new RegExp(start + mid + end);\n    this._mapToRadixRegExp = new RegExp(`[${this.mapToRadix.map(escapeRegExp).join('')}]`, 'g');\n    this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\n  }\n\n  _removeThousandsSeparators (value: string): string {\n    return value.replace(this._thousandsSeparatorRegExp, '');\n  }\n\n  _insertThousandsSeparators (value: string): string {\n    // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n    const parts = value.split(this.radix);\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\n    return parts.join(this.radix);\n  }\n\n  override doPrepareChar (ch: string, flags: AppendFlags={}): [string, ChangeDetails] {\n    ch = this._removeThousandsSeparators(\n      this.scale && this.mapToRadix.length && (\n        /*\n          radix should be mapped when\n          1) input is done from keyboard = flags.input && flags.raw\n          2) unmasked value is set = !flags.input && !flags.raw\n          and should not be mapped when\n          1) value is set = flags.input && !flags.raw\n          2) raw value is set = !flags.input && flags.raw\n        */\n        flags.input && flags.raw ||\n        !flags.input && !flags.raw\n      ) ? ch.replace(this._mapToRadixRegExp, this.radix) : ch\n    );\n    const [prepCh, details] = super.doPrepareChar(ch, flags);\n    if (ch && !prepCh) details.skip = true;\n    return [prepCh, details];\n  }\n\n  _separatorsCount (to: number, extendOnSeparators: boolean=false): number {\n    let count = 0;\n\n    for (let pos = 0; pos < to; ++pos) {\n      if (this._value.indexOf(this.thousandsSeparator, pos) === pos) {\n        ++count;\n        if (extendOnSeparators) to += this.thousandsSeparator.length;\n      }\n    }\n\n    return count;\n  }\n\n  _separatorsCountFromSlice (slice: string=this._value): number {\n    return this._separatorsCount(this._removeThousandsSeparators(slice).length, true);\n  }\n\n  override extractInput (fromPos: number=0, toPos: number=this.value.length, flags?: ExtractFlags): string {\n    [fromPos, toPos] = this._adjustRangeWithSeparators(fromPos, toPos);\n\n    return this._removeThousandsSeparators(super.extractInput(fromPos, toPos, flags));\n  }\n\n  \n  override _appendCharRaw (ch: string, flags: AppendFlags={}): ChangeDetails {\n    if (!this.thousandsSeparator) return super._appendCharRaw(ch, flags);\n\n    const prevBeforeTailValue = flags.tail && flags._beforeTailState ?\n      flags._beforeTailState._value :\n      this._value;\n    const prevBeforeTailSeparatorsCount = this._separatorsCountFromSlice(prevBeforeTailValue);\n    this._value = this._removeThousandsSeparators(this.value);\n\n    const appendDetails = super._appendCharRaw(ch, flags);\n\n    this._value = this._insertThousandsSeparators(this._value);\n    const beforeTailValue = flags.tail && flags._beforeTailState ?\n      flags._beforeTailState._value :\n      this._value;\n    const beforeTailSeparatorsCount = this._separatorsCountFromSlice(beforeTailValue);\n\n    appendDetails.tailShift += (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length;\n    appendDetails.skip = !appendDetails.rawInserted && ch === this.thousandsSeparator;\n    return appendDetails;\n  }\n\n  _findSeparatorAround (pos: number): number {\n    if (this.thousandsSeparator) {\n      const searchFrom = pos - this.thousandsSeparator.length + 1;\n      const separatorPos = this.value.indexOf(this.thousandsSeparator, searchFrom);\n      if (separatorPos <= pos) return separatorPos;\n    }\n\n    return -1;\n  }\n\n  _adjustRangeWithSeparators (from: number, to: number): [number, number] {\n    const separatorAroundFromPos = this._findSeparatorAround(from);\n    if (separatorAroundFromPos >= 0) from = separatorAroundFromPos;\n\n    const separatorAroundToPos = this._findSeparatorAround(to);\n    if (separatorAroundToPos >= 0) to = separatorAroundToPos + this.thousandsSeparator.length;\n    return [from, to];\n  }\n\n  \n  override remove (fromPos: number=0, toPos: number=this.value.length): ChangeDetails {\n    [fromPos, toPos] = this._adjustRangeWithSeparators(fromPos, toPos);\n\n    const valueBeforePos = this.value.slice(0, fromPos);\n    const valueAfterPos = this.value.slice(toPos);\n\n    const prevBeforeTailSeparatorsCount = this._separatorsCount(valueBeforePos.length);\n    this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(valueBeforePos + valueAfterPos));\n    const beforeTailSeparatorsCount = this._separatorsCountFromSlice(valueBeforePos);\n\n    return new ChangeDetails({\n      tailShift: (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length,\n    });\n  }\n\n  override nearestInputPos (cursorPos: number, direction?: Direction): number {\n    if (!this.thousandsSeparator) return cursorPos;\n\n    switch (direction) {\n      case DIRECTION.NONE:\n      case DIRECTION.LEFT:\n      case DIRECTION.FORCE_LEFT: {\n        const separatorAtLeftPos = this._findSeparatorAround(cursorPos - 1);\n        if (separatorAtLeftPos >= 0) {\n          const separatorAtLeftEndPos = separatorAtLeftPos + this.thousandsSeparator.length;\n          if (cursorPos < separatorAtLeftEndPos ||\n            this.value.length <= separatorAtLeftEndPos ||\n            direction === DIRECTION.FORCE_LEFT\n          ) {\n            return separatorAtLeftPos;\n          }\n        }\n        break;\n      }\n      case DIRECTION.RIGHT:\n      case DIRECTION.FORCE_RIGHT: {\n        const separatorAtRightPos = this._findSeparatorAround(cursorPos);\n        if (separatorAtRightPos >= 0) {\n          return separatorAtRightPos + this.thousandsSeparator.length;\n        }\n      }\n    }\n\n    return cursorPos;\n  }\n\n  override doValidate (flags: AppendFlags): boolean {\n    // validate as string\n    let valid = Boolean(this._removeThousandsSeparators(this.value).match(this._numberRegExp));\n\n    if (valid) {\n      // validate as number\n      const number = this.number;\n      valid = valid && !isNaN(number) &&\n        // check min bound for negative values\n        (this.min == null || this.min >= 0 || this.min <= this.number) &&\n        // check max bound for positive values\n        (this.max == null || this.max <= 0 || this.number <= this.max);\n    }\n\n    return valid && super.doValidate(flags);\n  }\n\n  override doCommit () {\n    if (this.value) {\n      const number = this.number;\n      let validnum = number;\n\n      // check bounds\n      if (this.min != null) validnum = Math.max(validnum, this.min);\n      if (this.max != null) validnum = Math.min(validnum, this.max);\n\n      if (validnum !== number) this.unmaskedValue = this.format(validnum, this);\n\n      let formatted = this.value;\n\n      if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\n      if (this.padFractionalZeros && this.scale > 0) formatted = this._padFractionalZeros(formatted);\n\n      this._value = formatted;\n    }\n\n    super.doCommit();\n  }\n\n  _normalizeZeros (value: string): string {\n    const parts = this._removeThousandsSeparators(value).split(this.radix);\n\n    // remove leading zeros\n    parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, (match, sign, zeros, num) => sign + num);\n    // add leading zero\n    if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\n\n    if (parts.length > 1) {\n      parts[1] = parts[1].replace(/0*$/, '');  // remove trailing zeros\n      if (!parts[1].length) parts.length = 1;  // remove fractional\n    }\n\n    return this._insertThousandsSeparators(parts.join(this.radix));\n  }\n\n  _padFractionalZeros (value: string): string {\n    if (!value) return value;\n\n    const parts = value.split(this.radix);\n    if (parts.length < 2) parts.push('');\n    parts[1] = parts[1].padEnd(this.scale, '0');\n    return parts.join(this.radix);\n  }\n\n  doSkipInvalid (ch: string, flags: AppendFlags={}, checkTail?: TailDetails): boolean {\n    const dropFractional = this.scale === 0 && ch !== this.thousandsSeparator && (\n      ch === this.radix ||\n      ch === MaskedNumber.UNMASKED_RADIX ||\n      this.mapToRadix.includes(ch)\n    )\n    return super.doSkipInvalid(ch, flags, checkTail) && !dropFractional;\n  }\n\n  override get unmaskedValue (): string {\n    return this._removeThousandsSeparators(\n      this._normalizeZeros(\n        this.value))\n      .replace(this.radix, MaskedNumber.UNMASKED_RADIX);\n  }\n\n  override set unmaskedValue (unmaskedValue: string) {\n    super.unmaskedValue = unmaskedValue;\n  }\n\n  override get typedValue (): number {\n    return this.parse(this.unmaskedValue, this);\n  }\n\n  override set typedValue (n: number) {\n    this.rawInputValue = this.format(n, this).replace(MaskedNumber.UNMASKED_RADIX, this.radix);\n  }\n\n  /** Parsed Number */\n  get number (): number {\n    return this.typedValue;\n  }\n\n  set number (number: number) {\n    this.typedValue = number;\n  }\n\n  /**\n    Is negative allowed\n  */\n  get allowNegative (): boolean {\n    return (this.min != null && this.min < 0) || (this.max != null && this.max < 0);\n  }\n\n  override typedValueEquals (value: any): boolean {\n    // handle  0 -> '' case (typed = 0 even if value = '')\n    // for details see https://github.com/uNmAnNeR/imaskjs/issues/134\n    return (\n      super.typedValueEquals(value) ||\n      MaskedNumber.EMPTY_VALUES.includes(value) && MaskedNumber.EMPTY_VALUES.includes(this.typedValue)\n    ) && !(value === 0 && this.value === '');\n  }\n}\n\n\nIMask.MaskedNumber = MaskedNumber;\n","import createMask, { type FactoryArg } from './factory';\nimport IMask from '../core/holder';\n\n\n// TODO use enum?\n/** Mask pipe source and destination types */\nexport\nconst PIPE_TYPE = {\n  MASKED: 'value',\n  UNMASKED: 'unmaskedValue',\n  TYPED: 'typedValue',\n} as const;\n\ntype ValueOf<T> = T[keyof T];\n\n/** Creates new pipe function depending on mask type, source and destination options */\nexport\nfunction createPipe<Opts extends FactoryArg> (\n  mask: Opts,\n  from: ValueOf<typeof PIPE_TYPE>=PIPE_TYPE.MASKED,\n  to: ValueOf<typeof PIPE_TYPE>=PIPE_TYPE.MASKED\n) {\n  const masked = createMask(mask);\n  return (value: any) => masked.runIsolated(m => {\n    m[from] = value;\n    return m[to];\n  });\n}\n\n/** Pipes value through mask depending on mask type, source and destination options */\nexport\nfunction pipe<Opts extends FactoryArg> (value: any, mask: Opts, from?: ValueOf<typeof PIPE_TYPE>, to?: ValueOf<typeof PIPE_TYPE>) {\n  return createPipe(mask, from, to)(value);\n}\n\n\nIMask.PIPE_TYPE = PIPE_TYPE;\nIMask.createPipe = createPipe;\nIMask.pipe = pipe;\n","import IMask from './imask';\nexport { default as HTMLContenteditableMaskElement } from './controls/html-contenteditable-mask-element';\nexport { default as HTMLInputMaskElement, type InputElement } from './controls/html-input-mask-element';\nexport { default as HTMLMaskElement } from './controls/html-mask-element';\nexport { default as InputMask, type InputMaskElement } from './controls/input';\nexport { default as MaskElement } from './controls/mask-element';\nexport { default as ChangeDetails, type ChangeDetailsOptions } from './core/change-details';\nexport { type AppendTail, type TailDetails } from './core/tail-details';\nexport { DIRECTION, forceDirection, type Direction, type Selection } from './core/utils';\nexport { default as Masked, type AppendFlags, type ExtractFlags, type MaskedOptions, type MaskedState } from './masked/base';\nexport { default as MaskedDate, type DateMaskType, type MaskedDateOptions } from './masked/date';\nexport { default as MaskedDynamic, type DynamicMaskType, type MaskedDynamicOptions, type MaskedDynamicState } from './masked/dynamic';\nexport { default as MaskedEnum, type MaskedEnumOptions } from './masked/enum';\nexport {\n    default as createMask,\n    normalizeOpts,\n    type AllFactoryStaticOpts,\n    type FactoryArg,\n    type FactoryConstructorOpts,\n    type FactoryConstructorReturnMasked,\n    type FactoryInstanceOpts,\n    type FactoryInstanceReturnMasked,\n    type FactoryOpts,\n    type FactoryReturnMasked,\n    type FactoryStaticOpts,\n    type FactoryStaticReturnMasked,\n    type NormalizedOpts\n} from './masked/factory';\nexport { default as MaskedFunction, type MaskedFunctionOptions } from './masked/function';\nexport { default as MaskedNumber, type MaskedNumberOptions } from './masked/number';\nexport { default as MaskedPattern, type BlockPosData, type Definitions, type MaskedPatternOptions, type MaskedPatternState } from './masked/pattern';\nexport { type default as PatternBlock } from './masked/pattern/block';\nexport { default as ChunksTailDetails, type ChunksTailState } from './masked/pattern/chunk-tail-details';\nexport { default as PatternFixedDefinition, type PatternFixedDefinitionOptions, type PatternFixedDefinitionState } from './masked/pattern/fixed-definition';\nexport { default as PatternInputDefinition, type PatternInputDefinitionOptions, type PatternInputDefinitionState } from './masked/pattern/input-definition';\nexport { createPipe, pipe, PIPE_TYPE } from './masked/pipe';\nexport { default as MaskedRange, type MaskedRangeOptions } from './masked/range';\nexport { default as MaskedRegExp, type MaskedRegExpOptions } from './masked/regexp';\n\ntry {\n  (globalThis as any).IMask = IMask;\n} catch(e) {}\nexport default IMask;\n"],"names":["isString","str","String","pick","obj","keys","Array","isArray","_","k","includes","Object","entries","reduce","acc","_ref","v","DIRECTION","NONE","LEFT","FORCE_LEFT","RIGHT","FORCE_RIGHT","forceDirection","direction","escapeRegExp","replace","objectIncludes","b","a","i","arrA","arrB","length","dateA","Date","dateB","getTime","regexpA","RegExp","regexpB","toString","prototype","hasOwnProperty","call","ActionDetails","constructor","opts","assign","this","value","slice","startChangePos","oldValue","oldSelection","start","Math","min","cursorPos","insertedCount","inserted","substr","removedCount","max","end","removed","head","substring","tail","removeDirection","IMask","el","InputMask","maskedClass","mask","Error","MaskedRegExp","MaskedPattern","MaskedDate","Number","MaskedNumber","MaskedDynamic","Masked","Function","MaskedFunction","console","warn","normalizeOpts","instanceOpts","_mask","startsWith","_obj$constructor","name","createMask","nOpts","MaskedClass","MaskElement","selectionStart","_unsafeSelectionStart","e","selectionEnd","_unsafeSelectionEnd","select","_unsafeSelect","isActive","bindEvents","handlers","unbindEvents","HTMLMaskElement","input","super","_handlers","rootElement","_this$input$getRootNo","_this$input$getRootNo2","_this$input","getRootNode","document","activeElement","forEach","event","_toggleEventHandler","EVENTS_MAP","handler","removeEventListener","addEventListener","selectionChange","drop","click","focus","commit","HTMLInputMaskElement","setSelectionRange","HTMLContenteditableMaskElement","root","selection","getSelection","anchorOffset","focusOffset","createRange","range","setStart","firstChild","setEnd","lastChild","removeAllRanges","addRange","textContent","isContentEditable","tagName","masked","_listeners","_value","_unmaskedValue","_saveSelection","bind","_onInput","_onChange","_onDrop","_onFocus","_onClick","alignCursor","alignCursorFriendly","_bindEvents","updateValue","maskEquals","_this$masked","updateOptions","unmaskedValue","updateControl","typedValue","val","typedValueEquals","displayValue","_unbindEvents","_fireEvent","ev","listeners","l","_cursorChanging","_changingCursorPos","pos","_selection","newUnmaskedValue","newValue","newDisplayValue","isChanged","_fireChangeEvents","restOpts","updateMask","updateOpts","updateCursor","_delayUpdateCursor","_abortUpdateCursor","setTimeout","_inputEvent","isComplete","clearTimeout","nearestInputPos","on","push","off","hIndex","indexOf","splice","details","oldRawValue","rawInputValue","offset","raw","doCommit","preventDefault","stopPropagation","destroy","ChangeDetails","static","prep","rawInserted","skip","tailShift","aggregate","ContinuousTailDetails","from","stop","extend","appendTo","append","_appendPlaceholder","state","unshift","beforePos","shiftChar","shift","_update","DEFAULTS","_initialized","withValueRefresh","reset","resolve","flags","parse","format","extractInput","isFilled","totalInputPositions","fromPos","toPos","extractTail","appendTail","_appendCharRaw","ch","_appendChar","checkTail","consistentState","doPrepareChar","consistentTail","appended","doValidate","beforeTailState","overwrite","tailDetails","_appendEager","_beforeTailState","doPrepare","ci","d","doSkipInvalid","eager","remove","fn","_refreshing","rawInput","ret","runIsolated","_isolated","Boolean","skipInvalid","normalize","prepare","prepareChar","validate","parent","deleteCount","tailPos","eagerRemove","valLength","tval","EMPTY_VALUES","undefined","ChunksTailDetails","chunks","map","join","tailChunk","lastChunk","extendLast","firstTailChunk","blockIndex","chunk","lastBlockIter","_mapPosToBlock","chunkBlock","index","_stops","phDetails","_blocks","remainChars","c","props","cstate","chunkShiftPos","PatternCursor","_log","ok","block","_blockStartPos","s","pushState","popState","pop","bindBlock","_pushLeft","_this$block","_pushRight","pushLeftBeforeFilled","isFixed","pushLeftBeforeInput","pushLeftBeforeRequired","isOptional","pushRightBeforeFilled","pushRightBeforeInput","pushRightBeforeRequired","PatternFixedDefinition","isUnmasking","_isRawInput","maxPos","appendEager","isResolved","char","PatternInputDefinition","placeholderChar","displayChar","lazy","maskOpts","boundPos","DEFAULT_DEFINITIONS","search","definitions","_rebuildMask","defs","_maskedBlocks","pattern","unmaskingBlock","optionalBlock","blocks","p","bNames","filter","bName","sort","maskedBlock","isInput","STOP_CHAR","ESCAPE_CHAR","def","maskedState","bi","every","_this$_mapPosToBlock","startBlockIndex","blockIter","_flags$_beforeTailSta","_flags$_beforeTailSta2","blockDetails","chunkTail","_forEachBlocksInRange","bFromPos","bToPos","blockChunk","_findStopBefore","stopBefore","si","toBlockIndex","startBlockIter","endBlockIndex","_blocks2","bDetails","accVal","blockStartPos","fromBlockIter","toBlockIter","isSameBlock","fromBlockStartPos","fromBlockEndPos","removeDetails","cursor","total","maskedBlocks","indices","gi","InputDefinition","FixedDefinition","MaskedRange","_matchFrom","maxLength","to","autofix","patternOpts","fromStr","padStart","toStr","sameCharsCount","repeat","boundaries","minstr","maxstr","placeholder","num","match","padEnd","nextVal","patternBlocks","GET_DEFAULT_BLOCKS","Y","getFullYear","m","getMonth","getDate","bk","date","isDateExist","day","month","year","split","currentMask","compiledMasks","_applyDispatch","currentMaskFlags","prevValueBeforeTail","inputValue","insertValue","_rawInputValue","tailValue","prevMask","prevMaskState","doDispatch","currentMaskRef","dispatch","currentDetails","_this$currentMask","_this$currentMask2","_this$currentMask3","_this$currentMask4","mi","oldMask","_this$currentMask5","inputs","isCurrent","startInputPos","weight","i1","i2","MaskedEnum","enum","_enum","eopts","some","_updateRegExps","allowNegative","scale","radix","_numberRegExp","_mapToRadixRegExp","mapToRadix","_thousandsSeparatorRegExp","thousandsSeparator","_removeThousandsSeparators","_insertThousandsSeparators","parts","prepCh","_separatorsCount","extendOnSeparators","count","_separatorsCountFromSlice","_adjustRangeWithSeparators","prevBeforeTailValue","prevBeforeTailSeparatorsCount","appendDetails","beforeTailValue","beforeTailSeparatorsCount","_findSeparatorAround","searchFrom","separatorPos","separatorAroundFromPos","separatorAroundToPos","valueBeforePos","valueAfterPos","separatorAtLeftPos","separatorAtLeftEndPos","separatorAtRightPos","valid","number","isNaN","validnum","formatted","normalizeZeros","_normalizeZeros","padFractionalZeros","_padFractionalZeros","sign","zeros","test","dropFractional","UNMASKED_RADIX","n","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","toLocaleString","useGrouping","maximumFractionDigits","PIPE_TYPE","MASKED","UNMASKED","TYPED","createPipe","pipe","globalThis"],"mappings":"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"}