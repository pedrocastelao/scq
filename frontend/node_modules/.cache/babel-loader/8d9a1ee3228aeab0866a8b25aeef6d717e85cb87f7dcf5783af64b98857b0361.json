{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pedro\\\\Documents\\\\SCA\\\\ProjetoFinal\\\\frontend\\\\saqe\\\\src\\\\context\\\\authContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from \"react\";\nimport api from \"../pages/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/createContext();\nfunction AuthProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [authenticated, setAuthenticated] = useState(false);\n  async function handleLogin(email, senha) {\n    try {\n      console.log(email, senha);\n      const response = await api.post(\"/login\", {\n        email,\n        senha\n      });\n      console.log(response.data); // Aqui você pode tratar a resposta do backend\n      setAuthenticated(true); // Define o estado de autenticação como verdadeiro\n    } catch (error) {\n      console.error(\"Erro ao fazer login:\", error);\n      // Aqui você pode tratar o erro de acordo com sua lógica de frontend\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      authenticated,\n      handleLogin\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"zbs8MFqNgUfPgDkZLeejYXFpdoQ=\");\n_c = AuthProvider;\nexport { Context, AuthProvider };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","api","jsxDEV","_jsxDEV","Context","AuthProvider","_ref","_s","children","authenticated","setAuthenticated","handleLogin","email","senha","console","log","response","post","data","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Pedro/Documents/SCA/ProjetoFinal/frontend/saqe/src/context/authContext.js"],"sourcesContent":["import React, { createContext, useState } from \"react\";\r\n\r\nimport api from \"../pages/api\";\r\n\r\nconst Context = createContext();\r\n\r\nfunction AuthProvider({ children }) {\r\n  const [authenticated, setAuthenticated] = useState(false);\r\n\r\n  async function handleLogin(email, senha) {\r\n    try {\r\n      console.log(email, senha);\r\n      const response = await api.post(\"/login\", {\r\n        email,\r\n        senha,\r\n      });\r\n\r\n      console.log(response.data); // Aqui você pode tratar a resposta do backend\r\n      setAuthenticated(true); // Define o estado de autenticação como verdadeiro\r\n    } catch (error) {\r\n      console.error(\"Erro ao fazer login:\", error);\r\n      // Aqui você pode tratar o erro de acordo com sua lógica de frontend\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Context.Provider value={{ authenticated, handleLogin }}>\r\n      {children}\r\n    </Context.Provider>\r\n  );\r\n}\r\n\r\nexport { Context, AuthProvider };\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAEtD,OAAOC,GAAG,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,OAAO,gBAAGL,aAAa,CAAC,CAAC;AAE/B,SAASM,YAAYA,CAAAC,IAAA,EAAe;EAAAC,EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAChC,MAAM,CAACG,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEzD,eAAeW,WAAWA,CAACC,KAAK,EAAEC,KAAK,EAAE;IACvC,IAAI;MACFC,OAAO,CAACC,GAAG,CAACH,KAAK,EAAEC,KAAK,CAAC;MACzB,MAAMG,QAAQ,GAAG,MAAMf,GAAG,CAACgB,IAAI,CAAC,QAAQ,EAAE;QACxCL,KAAK;QACLC;MACF,CAAC,CAAC;MAEFC,OAAO,CAACC,GAAG,CAACC,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;MAC5BR,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C;IACF;EACF;;EAEA,oBACEhB,OAAA,CAACC,OAAO,CAACgB,QAAQ;IAACC,KAAK,EAAE;MAAEZ,aAAa;MAAEE;IAAY,CAAE;IAAAH,QAAA,EACrDA;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEvB;AAAClB,EAAA,CAxBQF,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AA0BrB,SAASD,OAAO,EAAEC,YAAY;AAAG,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}