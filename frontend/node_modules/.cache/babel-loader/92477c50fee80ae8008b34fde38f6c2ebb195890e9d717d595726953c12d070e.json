{"ast":null,"code":"import api from \"./api\";\nconst authService = {\n  // Função para fazer login\n  fazerLogin: async (email, senha) => {\n    try {\n      const response = await api.post(\"login\", {\n        email,\n        senha\n      });\n      const {\n        cliente,\n        token\n      } = response.data;\n\n      // Armazene o token no localStorage ou nos cookies\n      localStorage.setItem(\"token\", token);\n\n      // Retorne os dados do cliente\n      return cliente;\n    } catch (error) {\n      console.error(\"Erro ao fazer login:\", error);\n      throw new Error(\"Credenciais inválidas\");\n    }\n  },\n  // Função para fazer logout\n  fazerLogout: () => {\n    // Remova o token do localStorage ou dos cookies\n    localStorage.removeItem(\"token\");\n  },\n  // Função para verificar se o usuário está autenticado\n  isAutenticado: () => {\n    // Verifique se o token está presente\n    return localStorage.getItem(\"token\") !== null;\n  },\n  // Função para obter o token de autenticação\n  getToken: () => {\n    return localStorage.getItem(\"token\");\n  }\n};\nexport default authService;","map":{"version":3,"names":["api","authService","fazerLogin","email","senha","response","post","cliente","token","data","localStorage","setItem","error","console","Error","fazerLogout","removeItem","isAutenticado","getItem","getToken"],"sources":["C:/Users/Pedro/Documents/SCA/ProjetoFinal/frontend/saqe/src/pages/authService.js"],"sourcesContent":["import api from \"./api\";\r\n\r\nconst authService = {\r\n  // Função para fazer login\r\n  fazerLogin: async (email, senha) => {\r\n    try {\r\n      const response = await api.post(\"login\", { email, senha });\r\n      const { cliente, token } = response.data;\r\n\r\n      // Armazene o token no localStorage ou nos cookies\r\n      localStorage.setItem(\"token\", token);\r\n\r\n      // Retorne os dados do cliente\r\n      return cliente;\r\n    } catch (error) {\r\n      console.error(\"Erro ao fazer login:\", error);\r\n      throw new Error(\"Credenciais inválidas\");\r\n    }\r\n  },\r\n\r\n  // Função para fazer logout\r\n  fazerLogout: () => {\r\n    // Remova o token do localStorage ou dos cookies\r\n    localStorage.removeItem(\"token\");\r\n  },\r\n\r\n  // Função para verificar se o usuário está autenticado\r\n  isAutenticado: () => {\r\n    // Verifique se o token está presente\r\n    return localStorage.getItem(\"token\") !== null;\r\n  },\r\n\r\n  // Função para obter o token de autenticação\r\n  getToken: () => {\r\n    return localStorage.getItem(\"token\");\r\n  },\r\n};\r\n\r\nexport default authService;\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,WAAW,GAAG;EAClB;EACAC,UAAU,EAAE,MAAAA,CAAOC,KAAK,EAAEC,KAAK,KAAK;IAClC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,OAAO,EAAE;QAAEH,KAAK;QAAEC;MAAM,CAAC,CAAC;MAC1D,MAAM;QAAEG,OAAO;QAAEC;MAAM,CAAC,GAAGH,QAAQ,CAACI,IAAI;;MAExC;MACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC;;MAEpC;MACA,OAAOD,OAAO;IAChB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAM,IAAIE,KAAK,CAAC,uBAAuB,CAAC;IAC1C;EACF,CAAC;EAED;EACAC,WAAW,EAAEA,CAAA,KAAM;IACjB;IACAL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC;EAED;EACAC,aAAa,EAAEA,CAAA,KAAM;IACnB;IACA,OAAOP,YAAY,CAACQ,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI;EAC/C,CAAC;EAED;EACAC,QAAQ,EAAEA,CAAA,KAAM;IACd,OAAOT,YAAY,CAACQ,OAAO,CAAC,OAAO,CAAC;EACtC;AACF,CAAC;AAED,eAAejB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}