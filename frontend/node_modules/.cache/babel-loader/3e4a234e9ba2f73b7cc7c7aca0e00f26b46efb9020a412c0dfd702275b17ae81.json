{"ast":null,"code":"import MaskedPattern from './pattern.js';\nimport MaskedRange from './range.js';\nimport IMask from '../core/holder.js';\nimport { isString } from '../core/utils.js';\nimport '../core/change-details.js';\nimport './base.js';\nimport '../core/continuous-tail-details.js';\nimport './factory.js';\nimport './pattern/chunk-tail-details.js';\nimport './pattern/cursor.js';\nimport './pattern/fixed-definition.js';\nimport './pattern/input-definition.js';\nimport './regexp.js';\n\n/** Date mask */\nclass MaskedDate extends MaskedPattern {\n  /** Pattern mask for date according to {@link MaskedDate#format} */\n\n  /** Start date */\n\n  /** End date */\n\n  /** */\n\n  constructor(opts) {\n    const {\n      mask,\n      pattern,\n      ...patternOpts\n    } = {\n      ...MaskedDate.DEFAULTS,\n      ...opts\n    };\n    super({\n      ...patternOpts,\n      mask: isString(mask) ? mask : pattern\n    });\n  }\n  updateOptions(opts) {\n    super.updateOptions(opts);\n  }\n  _update(opts) {\n    const {\n      mask,\n      pattern,\n      blocks,\n      ...patternOpts\n    } = {\n      ...MaskedDate.DEFAULTS,\n      ...opts\n    };\n    let patternBlocks = Object.assign({}, MaskedDate.GET_DEFAULT_BLOCKS());\n    // adjust year block\n    if (opts.min) patternBlocks.Y.from = opts.min.getFullYear();\n    if (opts.max) patternBlocks.Y.to = opts.max.getFullYear();\n    if (opts.min && opts.max && patternBlocks.Y.from === patternBlocks.Y.to) {\n      patternBlocks.m.from = opts.min.getMonth() + 1;\n      patternBlocks.m.to = opts.max.getMonth() + 1;\n      if (patternBlocks.m.from === patternBlocks.m.to) {\n        patternBlocks.d.from = opts.min.getDate();\n        patternBlocks.d.to = opts.max.getDate();\n      }\n    }\n    Object.assign(patternBlocks, this.blocks, blocks);\n\n    // add autofix\n    Object.keys(patternBlocks).forEach(bk => {\n      const b = patternBlocks[bk];\n      if (!('autofix' in b) && 'autofix' in opts) b.autofix = opts.autofix;\n    });\n    super._update({\n      ...patternOpts,\n      mask: isString(mask) ? mask : pattern,\n      blocks: patternBlocks\n    });\n  }\n  doValidate(flags) {\n    const date = this.date;\n    return super.doValidate(flags) && (!this.isComplete || this.isDateExist(this.value) && date != null && (this.min == null || this.min <= date) && (this.max == null || date <= this.max));\n  }\n\n  /** Checks if date is exists */\n  isDateExist(str) {\n    return this.format(this.parse(str, this), this).indexOf(str) >= 0;\n  }\n\n  /** Parsed Date */\n  get date() {\n    return this.typedValue;\n  }\n  set date(date) {\n    this.typedValue = date;\n  }\n  get typedValue() {\n    return this.isComplete ? super.typedValue : null;\n  }\n  set typedValue(value) {\n    super.typedValue = value;\n  }\n  maskEquals(mask) {\n    return mask === Date || super.maskEquals(mask);\n  }\n}\nMaskedDate.GET_DEFAULT_BLOCKS = () => ({\n  d: {\n    mask: MaskedRange,\n    from: 1,\n    to: 31,\n    maxLength: 2\n  },\n  m: {\n    mask: MaskedRange,\n    from: 1,\n    to: 12,\n    maxLength: 2\n  },\n  Y: {\n    mask: MaskedRange,\n    from: 1900,\n    to: 9999\n  }\n});\nMaskedDate.DEFAULTS = {\n  mask: Date,\n  pattern: 'd{.}`m{.}`Y',\n  format: date => {\n    if (!date) return '';\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return [day, month, year].join('.');\n  },\n  parse: str => {\n    const [day, month, year] = str.split('.').map(Number);\n    return new Date(year, month - 1, day);\n  }\n};\nIMask.MaskedDate = MaskedDate;\nexport { MaskedDate as default };","map":{"version":3,"names":["MaskedPattern","MaskedRange","IMask","isString","MaskedDate","constructor","opts","mask","pattern","patternOpts","DEFAULTS","updateOptions","_update","blocks","patternBlocks","Object","assign","GET_DEFAULT_BLOCKS","min","Y","from","getFullYear","max","to","m","getMonth","d","getDate","keys","forEach","bk","b","autofix","doValidate","flags","date","isComplete","isDateExist","value","str","format","parse","indexOf","typedValue","maskEquals","Date","maxLength","day","String","padStart","month","year","join","split","map","Number","default"],"sources":["E:/Faculdade/ADS/PROGRAMAÇÃO FULL STACK Il/Projeto/FrontEnd/saqe/node_modules/imask/esm/masked/date.js"],"sourcesContent":["import MaskedPattern from './pattern.js';\nimport MaskedRange from './range.js';\nimport IMask from '../core/holder.js';\nimport { isString } from '../core/utils.js';\nimport '../core/change-details.js';\nimport './base.js';\nimport '../core/continuous-tail-details.js';\nimport './factory.js';\nimport './pattern/chunk-tail-details.js';\nimport './pattern/cursor.js';\nimport './pattern/fixed-definition.js';\nimport './pattern/input-definition.js';\nimport './regexp.js';\n\n/** Date mask */\nclass MaskedDate extends MaskedPattern {\n  /** Pattern mask for date according to {@link MaskedDate#format} */\n\n  /** Start date */\n\n  /** End date */\n\n  /** */\n\n  constructor(opts) {\n    const {\n      mask,\n      pattern,\n      ...patternOpts\n    } = {\n      ...MaskedDate.DEFAULTS,\n      ...opts\n    };\n    super({\n      ...patternOpts,\n      mask: isString(mask) ? mask : pattern\n    });\n  }\n  updateOptions(opts) {\n    super.updateOptions(opts);\n  }\n  _update(opts) {\n    const {\n      mask,\n      pattern,\n      blocks,\n      ...patternOpts\n    } = {\n      ...MaskedDate.DEFAULTS,\n      ...opts\n    };\n    let patternBlocks = Object.assign({}, MaskedDate.GET_DEFAULT_BLOCKS());\n    // adjust year block\n    if (opts.min) patternBlocks.Y.from = opts.min.getFullYear();\n    if (opts.max) patternBlocks.Y.to = opts.max.getFullYear();\n    if (opts.min && opts.max && patternBlocks.Y.from === patternBlocks.Y.to) {\n      patternBlocks.m.from = opts.min.getMonth() + 1;\n      patternBlocks.m.to = opts.max.getMonth() + 1;\n      if (patternBlocks.m.from === patternBlocks.m.to) {\n        patternBlocks.d.from = opts.min.getDate();\n        patternBlocks.d.to = opts.max.getDate();\n      }\n    }\n    Object.assign(patternBlocks, this.blocks, blocks);\n\n    // add autofix\n    Object.keys(patternBlocks).forEach(bk => {\n      const b = patternBlocks[bk];\n      if (!('autofix' in b) && 'autofix' in opts) b.autofix = opts.autofix;\n    });\n    super._update({\n      ...patternOpts,\n      mask: isString(mask) ? mask : pattern,\n      blocks: patternBlocks\n    });\n  }\n  doValidate(flags) {\n    const date = this.date;\n    return super.doValidate(flags) && (!this.isComplete || this.isDateExist(this.value) && date != null && (this.min == null || this.min <= date) && (this.max == null || date <= this.max));\n  }\n\n  /** Checks if date is exists */\n  isDateExist(str) {\n    return this.format(this.parse(str, this), this).indexOf(str) >= 0;\n  }\n\n  /** Parsed Date */\n  get date() {\n    return this.typedValue;\n  }\n  set date(date) {\n    this.typedValue = date;\n  }\n  get typedValue() {\n    return this.isComplete ? super.typedValue : null;\n  }\n  set typedValue(value) {\n    super.typedValue = value;\n  }\n  maskEquals(mask) {\n    return mask === Date || super.maskEquals(mask);\n  }\n}\nMaskedDate.GET_DEFAULT_BLOCKS = () => ({\n  d: {\n    mask: MaskedRange,\n    from: 1,\n    to: 31,\n    maxLength: 2\n  },\n  m: {\n    mask: MaskedRange,\n    from: 1,\n    to: 12,\n    maxLength: 2\n  },\n  Y: {\n    mask: MaskedRange,\n    from: 1900,\n    to: 9999\n  }\n});\nMaskedDate.DEFAULTS = {\n  mask: Date,\n  pattern: 'd{.}`m{.}`Y',\n  format: date => {\n    if (!date) return '';\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return [day, month, year].join('.');\n  },\n  parse: str => {\n    const [day, month, year] = str.split('.').map(Number);\n    return new Date(year, month - 1, day);\n  }\n};\nIMask.MaskedDate = MaskedDate;\n\nexport { MaskedDate as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}