{"ast":null,"code":"import { objectIncludes, DIRECTION } from '../core/utils.js';\nimport ActionDetails from '../core/action-details.js';\nimport createMask, { maskedClass } from '../masked/factory.js';\nimport MaskElement from './mask-element.js';\nimport HTMLInputMaskElement from './html-input-mask-element.js';\nimport HTMLContenteditableMaskElement from './html-contenteditable-mask-element.js';\nimport IMask from '../core/holder.js';\nimport './html-mask-element.js';\n\n/** Listens to element events and controls changes between element and {@link Masked} */\nclass InputMask {\n  /**\n    View element\n  */\n\n  /** Internal {@link Masked} model */\n\n  constructor(el, opts) {\n    this.el = el instanceof MaskElement ? el : el.isContentEditable && el.tagName !== 'INPUT' && el.tagName !== 'TEXTAREA' ? new HTMLContenteditableMaskElement(el) : new HTMLInputMaskElement(el);\n    this.masked = createMask(opts);\n    this._listeners = {};\n    this._value = '';\n    this._unmaskedValue = '';\n    this._saveSelection = this._saveSelection.bind(this);\n    this._onInput = this._onInput.bind(this);\n    this._onChange = this._onChange.bind(this);\n    this._onDrop = this._onDrop.bind(this);\n    this._onFocus = this._onFocus.bind(this);\n    this._onClick = this._onClick.bind(this);\n    this.alignCursor = this.alignCursor.bind(this);\n    this.alignCursorFriendly = this.alignCursorFriendly.bind(this);\n    this._bindEvents();\n\n    // refresh\n    this.updateValue();\n    this._onChange();\n  }\n\n  /** Read or update mask */\n  get mask() {\n    return this.masked.mask;\n  }\n  maskEquals(mask) {\n    var _this$masked;\n    return mask == null || ((_this$masked = this.masked) == null ? void 0 : _this$masked.maskEquals(mask));\n  }\n  set mask(mask) {\n    if (this.maskEquals(mask)) return;\n    if (!(mask instanceof IMask.Masked) && this.masked.constructor === maskedClass(mask)) {\n      // TODO \"any\" no idea\n      this.masked.updateOptions({\n        mask\n      });\n      return;\n    }\n    const masked = mask instanceof IMask.Masked ? mask : createMask({\n      mask\n    });\n    masked.unmaskedValue = this.masked.unmaskedValue;\n    this.masked = masked;\n  }\n\n  /** Raw value */\n  get value() {\n    return this._value;\n  }\n  set value(str) {\n    if (this.value === str) return;\n    this.masked.value = str;\n    this.updateControl();\n    this.alignCursor();\n  }\n\n  /** Unmasked value */\n  get unmaskedValue() {\n    return this._unmaskedValue;\n  }\n  set unmaskedValue(str) {\n    if (this.unmaskedValue === str) return;\n    this.masked.unmaskedValue = str;\n    this.updateControl();\n    this.alignCursor();\n  }\n\n  /** Typed unmasked value */\n  get typedValue() {\n    return this.masked.typedValue;\n  }\n  set typedValue(val) {\n    if (this.masked.typedValueEquals(val)) return;\n    this.masked.typedValue = val;\n    this.updateControl();\n    this.alignCursor();\n  }\n\n  /** Display value */\n  get displayValue() {\n    return this.masked.displayValue;\n  }\n\n  /** Starts listening to element events */\n  _bindEvents() {\n    this.el.bindEvents({\n      selectionChange: this._saveSelection,\n      input: this._onInput,\n      drop: this._onDrop,\n      click: this._onClick,\n      focus: this._onFocus,\n      commit: this._onChange\n    });\n  }\n\n  /** Stops listening to element events */\n  _unbindEvents() {\n    if (this.el) this.el.unbindEvents();\n  }\n\n  /** Fires custom event */\n  _fireEvent(ev, e) {\n    const listeners = this._listeners[ev];\n    if (!listeners) return;\n    listeners.forEach(l => l(e));\n  }\n\n  /** Current selection start */\n  get selectionStart() {\n    return this._cursorChanging ? this._changingCursorPos : this.el.selectionStart;\n  }\n\n  /** Current cursor position */\n  get cursorPos() {\n    return this._cursorChanging ? this._changingCursorPos : this.el.selectionEnd;\n  }\n  set cursorPos(pos) {\n    if (!this.el || !this.el.isActive) return;\n    this.el.select(pos, pos);\n    this._saveSelection();\n  }\n\n  /** Stores current selection */\n  _saveSelection( /* ev */\n  ) {\n    if (this.displayValue !== this.el.value) {\n      console.warn('Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly.'); // eslint-disable-line no-console\n    }\n\n    this._selection = {\n      start: this.selectionStart,\n      end: this.cursorPos\n    };\n  }\n\n  /** Syncronizes model value from view */\n  updateValue() {\n    this.masked.value = this.el.value;\n    this._value = this.masked.value;\n  }\n\n  /** Syncronizes view from model value, fires change events */\n  updateControl() {\n    const newUnmaskedValue = this.masked.unmaskedValue;\n    const newValue = this.masked.value;\n    const newDisplayValue = this.displayValue;\n    const isChanged = this.unmaskedValue !== newUnmaskedValue || this.value !== newValue;\n    this._unmaskedValue = newUnmaskedValue;\n    this._value = newValue;\n    if (this.el.value !== newDisplayValue) this.el.value = newDisplayValue;\n    if (isChanged) this._fireChangeEvents();\n  }\n\n  /** Updates options with deep equal check, recreates @{link Masked} model if mask type changes */\n  updateOptions(opts) {\n    const {\n      mask,\n      ...restOpts\n    } = opts;\n    const updateMask = !this.maskEquals(mask);\n    const updateOpts = !objectIncludes(this.masked, restOpts);\n    if (updateMask) this.mask = mask;\n    if (updateOpts) this.masked.updateOptions(restOpts); // TODO \"any\" no idea\n\n    if (updateMask || updateOpts) this.updateControl();\n  }\n\n  /** Updates cursor */\n  updateCursor(cursorPos) {\n    if (cursorPos == null) return;\n    this.cursorPos = cursorPos;\n\n    // also queue change cursor for mobile browsers\n    this._delayUpdateCursor(cursorPos);\n  }\n\n  /** Delays cursor update to support mobile browsers */\n  _delayUpdateCursor(cursorPos) {\n    this._abortUpdateCursor();\n    this._changingCursorPos = cursorPos;\n    this._cursorChanging = setTimeout(() => {\n      if (!this.el) return; // if was destroyed\n      this.cursorPos = this._changingCursorPos;\n      this._abortUpdateCursor();\n    }, 10);\n  }\n\n  /** Fires custom events */\n  _fireChangeEvents() {\n    this._fireEvent('accept', this._inputEvent);\n    if (this.masked.isComplete) this._fireEvent('complete', this._inputEvent);\n  }\n\n  /** Aborts delayed cursor update */\n  _abortUpdateCursor() {\n    if (this._cursorChanging) {\n      clearTimeout(this._cursorChanging);\n      delete this._cursorChanging;\n    }\n  }\n\n  /** Aligns cursor to nearest available position */\n  alignCursor() {\n    this.cursorPos = this.masked.nearestInputPos(this.masked.nearestInputPos(this.cursorPos, DIRECTION.LEFT));\n  }\n\n  /** Aligns cursor only if selection is empty */\n  alignCursorFriendly() {\n    if (this.selectionStart !== this.cursorPos) return; // skip if range is selected\n    this.alignCursor();\n  }\n\n  /** Adds listener on custom event */\n  on(ev, handler) {\n    if (!this._listeners[ev]) this._listeners[ev] = [];\n    this._listeners[ev].push(handler);\n    return this;\n  }\n\n  /** Removes custom event listener */\n  off(ev, handler) {\n    if (!this._listeners[ev]) return this;\n    if (!handler) {\n      delete this._listeners[ev];\n      return this;\n    }\n    const hIndex = this._listeners[ev].indexOf(handler);\n    if (hIndex >= 0) this._listeners[ev].splice(hIndex, 1);\n    return this;\n  }\n\n  /** Handles view input event */\n  _onInput(e) {\n    this._inputEvent = e;\n    this._abortUpdateCursor();\n\n    // fix strange IE behavior\n    if (!this._selection) return this.updateValue();\n    const details = new ActionDetails({\n      // new state\n      value: this.el.value,\n      cursorPos: this.cursorPos,\n      // old state\n      oldValue: this.displayValue,\n      oldSelection: this._selection\n    });\n    const oldRawValue = this.masked.rawInputValue;\n    const offset = this.masked.splice(details.startChangePos, details.removed.length, details.inserted, details.removeDirection, {\n      input: true,\n      raw: true\n    }).offset;\n\n    // force align in remove direction only if no input chars were removed\n    // otherwise we still need to align with NONE (to get out from fixed symbols for instance)\n    const removeDirection = oldRawValue === this.masked.rawInputValue ? details.removeDirection : DIRECTION.NONE;\n    let cursorPos = this.masked.nearestInputPos(details.startChangePos + offset, removeDirection);\n    if (removeDirection !== DIRECTION.NONE) cursorPos = this.masked.nearestInputPos(cursorPos, DIRECTION.NONE);\n    this.updateControl();\n    this.updateCursor(cursorPos);\n    delete this._inputEvent;\n  }\n\n  /** Handles view change event and commits model value */\n  _onChange() {\n    if (this.displayValue !== this.el.value) {\n      this.updateValue();\n    }\n    this.masked.doCommit();\n    this.updateControl();\n    this._saveSelection();\n  }\n\n  /** Handles view drop event, prevents by default */\n  _onDrop(ev) {\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  /** Restore last selection on focus */\n  _onFocus(ev) {\n    this.alignCursorFriendly();\n  }\n\n  /** Restore last selection on focus */\n  _onClick(ev) {\n    this.alignCursorFriendly();\n  }\n\n  /** Unbind view events and removes element reference */\n  destroy() {\n    this._unbindEvents();\n    // @ts-ignore why not\n    this._listeners.length = 0;\n    delete this.el;\n  }\n}\nIMask.InputMask = InputMask;\nexport { InputMask as default };","map":{"version":3,"names":["objectIncludes","DIRECTION","ActionDetails","createMask","maskedClass","MaskElement","HTMLInputMaskElement","HTMLContenteditableMaskElement","IMask","InputMask","constructor","el","opts","isContentEditable","tagName","masked","_listeners","_value","_unmaskedValue","_saveSelection","bind","_onInput","_onChange","_onDrop","_onFocus","_onClick","alignCursor","alignCursorFriendly","_bindEvents","updateValue","mask","maskEquals","_this$masked","Masked","updateOptions","unmaskedValue","value","str","updateControl","typedValue","val","typedValueEquals","displayValue","bindEvents","selectionChange","input","drop","click","focus","commit","_unbindEvents","unbindEvents","_fireEvent","ev","e","listeners","forEach","l","selectionStart","_cursorChanging","_changingCursorPos","cursorPos","selectionEnd","pos","isActive","select","console","warn","_selection","start","end","newUnmaskedValue","newValue","newDisplayValue","isChanged","_fireChangeEvents","restOpts","updateMask","updateOpts","updateCursor","_delayUpdateCursor","_abortUpdateCursor","setTimeout","_inputEvent","isComplete","clearTimeout","nearestInputPos","LEFT","on","handler","push","off","hIndex","indexOf","splice","details","oldValue","oldSelection","oldRawValue","rawInputValue","offset","startChangePos","removed","length","inserted","removeDirection","raw","NONE","doCommit","preventDefault","stopPropagation","destroy","default"],"sources":["E:/Faculdade/ADS/PROGRAMAÇÃO FULL STACK Il/Projeto/FrontEnd/saqe/node_modules/imask/esm/controls/input.js"],"sourcesContent":["import { objectIncludes, DIRECTION } from '../core/utils.js';\nimport ActionDetails from '../core/action-details.js';\nimport createMask, { maskedClass } from '../masked/factory.js';\nimport MaskElement from './mask-element.js';\nimport HTMLInputMaskElement from './html-input-mask-element.js';\nimport HTMLContenteditableMaskElement from './html-contenteditable-mask-element.js';\nimport IMask from '../core/holder.js';\nimport './html-mask-element.js';\n\n/** Listens to element events and controls changes between element and {@link Masked} */\nclass InputMask {\n  /**\n    View element\n  */\n\n  /** Internal {@link Masked} model */\n\n  constructor(el, opts) {\n    this.el = el instanceof MaskElement ? el : el.isContentEditable && el.tagName !== 'INPUT' && el.tagName !== 'TEXTAREA' ? new HTMLContenteditableMaskElement(el) : new HTMLInputMaskElement(el);\n    this.masked = createMask(opts);\n    this._listeners = {};\n    this._value = '';\n    this._unmaskedValue = '';\n    this._saveSelection = this._saveSelection.bind(this);\n    this._onInput = this._onInput.bind(this);\n    this._onChange = this._onChange.bind(this);\n    this._onDrop = this._onDrop.bind(this);\n    this._onFocus = this._onFocus.bind(this);\n    this._onClick = this._onClick.bind(this);\n    this.alignCursor = this.alignCursor.bind(this);\n    this.alignCursorFriendly = this.alignCursorFriendly.bind(this);\n    this._bindEvents();\n\n    // refresh\n    this.updateValue();\n    this._onChange();\n  }\n\n  /** Read or update mask */\n  get mask() {\n    return this.masked.mask;\n  }\n  maskEquals(mask) {\n    var _this$masked;\n    return mask == null || ((_this$masked = this.masked) == null ? void 0 : _this$masked.maskEquals(mask));\n  }\n  set mask(mask) {\n    if (this.maskEquals(mask)) return;\n    if (!(mask instanceof IMask.Masked) && this.masked.constructor === maskedClass(mask)) {\n      // TODO \"any\" no idea\n      this.masked.updateOptions({\n        mask\n      });\n      return;\n    }\n    const masked = mask instanceof IMask.Masked ? mask : createMask({\n      mask\n    });\n    masked.unmaskedValue = this.masked.unmaskedValue;\n    this.masked = masked;\n  }\n\n  /** Raw value */\n  get value() {\n    return this._value;\n  }\n  set value(str) {\n    if (this.value === str) return;\n    this.masked.value = str;\n    this.updateControl();\n    this.alignCursor();\n  }\n\n  /** Unmasked value */\n  get unmaskedValue() {\n    return this._unmaskedValue;\n  }\n  set unmaskedValue(str) {\n    if (this.unmaskedValue === str) return;\n    this.masked.unmaskedValue = str;\n    this.updateControl();\n    this.alignCursor();\n  }\n\n  /** Typed unmasked value */\n  get typedValue() {\n    return this.masked.typedValue;\n  }\n  set typedValue(val) {\n    if (this.masked.typedValueEquals(val)) return;\n    this.masked.typedValue = val;\n    this.updateControl();\n    this.alignCursor();\n  }\n\n  /** Display value */\n  get displayValue() {\n    return this.masked.displayValue;\n  }\n\n  /** Starts listening to element events */\n  _bindEvents() {\n    this.el.bindEvents({\n      selectionChange: this._saveSelection,\n      input: this._onInput,\n      drop: this._onDrop,\n      click: this._onClick,\n      focus: this._onFocus,\n      commit: this._onChange\n    });\n  }\n\n  /** Stops listening to element events */\n  _unbindEvents() {\n    if (this.el) this.el.unbindEvents();\n  }\n\n  /** Fires custom event */\n  _fireEvent(ev, e) {\n    const listeners = this._listeners[ev];\n    if (!listeners) return;\n    listeners.forEach(l => l(e));\n  }\n\n  /** Current selection start */\n  get selectionStart() {\n    return this._cursorChanging ? this._changingCursorPos : this.el.selectionStart;\n  }\n\n  /** Current cursor position */\n  get cursorPos() {\n    return this._cursorChanging ? this._changingCursorPos : this.el.selectionEnd;\n  }\n  set cursorPos(pos) {\n    if (!this.el || !this.el.isActive) return;\n    this.el.select(pos, pos);\n    this._saveSelection();\n  }\n\n  /** Stores current selection */\n  _saveSelection( /* ev */\n  ) {\n    if (this.displayValue !== this.el.value) {\n      console.warn('Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly.'); // eslint-disable-line no-console\n    }\n\n    this._selection = {\n      start: this.selectionStart,\n      end: this.cursorPos\n    };\n  }\n\n  /** Syncronizes model value from view */\n  updateValue() {\n    this.masked.value = this.el.value;\n    this._value = this.masked.value;\n  }\n\n  /** Syncronizes view from model value, fires change events */\n  updateControl() {\n    const newUnmaskedValue = this.masked.unmaskedValue;\n    const newValue = this.masked.value;\n    const newDisplayValue = this.displayValue;\n    const isChanged = this.unmaskedValue !== newUnmaskedValue || this.value !== newValue;\n    this._unmaskedValue = newUnmaskedValue;\n    this._value = newValue;\n    if (this.el.value !== newDisplayValue) this.el.value = newDisplayValue;\n    if (isChanged) this._fireChangeEvents();\n  }\n\n  /** Updates options with deep equal check, recreates @{link Masked} model if mask type changes */\n  updateOptions(opts) {\n    const {\n      mask,\n      ...restOpts\n    } = opts;\n    const updateMask = !this.maskEquals(mask);\n    const updateOpts = !objectIncludes(this.masked, restOpts);\n    if (updateMask) this.mask = mask;\n    if (updateOpts) this.masked.updateOptions(restOpts); // TODO \"any\" no idea\n\n    if (updateMask || updateOpts) this.updateControl();\n  }\n\n  /** Updates cursor */\n  updateCursor(cursorPos) {\n    if (cursorPos == null) return;\n    this.cursorPos = cursorPos;\n\n    // also queue change cursor for mobile browsers\n    this._delayUpdateCursor(cursorPos);\n  }\n\n  /** Delays cursor update to support mobile browsers */\n  _delayUpdateCursor(cursorPos) {\n    this._abortUpdateCursor();\n    this._changingCursorPos = cursorPos;\n    this._cursorChanging = setTimeout(() => {\n      if (!this.el) return; // if was destroyed\n      this.cursorPos = this._changingCursorPos;\n      this._abortUpdateCursor();\n    }, 10);\n  }\n\n  /** Fires custom events */\n  _fireChangeEvents() {\n    this._fireEvent('accept', this._inputEvent);\n    if (this.masked.isComplete) this._fireEvent('complete', this._inputEvent);\n  }\n\n  /** Aborts delayed cursor update */\n  _abortUpdateCursor() {\n    if (this._cursorChanging) {\n      clearTimeout(this._cursorChanging);\n      delete this._cursorChanging;\n    }\n  }\n\n  /** Aligns cursor to nearest available position */\n  alignCursor() {\n    this.cursorPos = this.masked.nearestInputPos(this.masked.nearestInputPos(this.cursorPos, DIRECTION.LEFT));\n  }\n\n  /** Aligns cursor only if selection is empty */\n  alignCursorFriendly() {\n    if (this.selectionStart !== this.cursorPos) return; // skip if range is selected\n    this.alignCursor();\n  }\n\n  /** Adds listener on custom event */\n  on(ev, handler) {\n    if (!this._listeners[ev]) this._listeners[ev] = [];\n    this._listeners[ev].push(handler);\n    return this;\n  }\n\n  /** Removes custom event listener */\n  off(ev, handler) {\n    if (!this._listeners[ev]) return this;\n    if (!handler) {\n      delete this._listeners[ev];\n      return this;\n    }\n    const hIndex = this._listeners[ev].indexOf(handler);\n    if (hIndex >= 0) this._listeners[ev].splice(hIndex, 1);\n    return this;\n  }\n\n  /** Handles view input event */\n  _onInput(e) {\n    this._inputEvent = e;\n    this._abortUpdateCursor();\n\n    // fix strange IE behavior\n    if (!this._selection) return this.updateValue();\n    const details = new ActionDetails({\n      // new state\n      value: this.el.value,\n      cursorPos: this.cursorPos,\n      // old state\n      oldValue: this.displayValue,\n      oldSelection: this._selection\n    });\n    const oldRawValue = this.masked.rawInputValue;\n    const offset = this.masked.splice(details.startChangePos, details.removed.length, details.inserted, details.removeDirection, {\n      input: true,\n      raw: true\n    }).offset;\n\n    // force align in remove direction only if no input chars were removed\n    // otherwise we still need to align with NONE (to get out from fixed symbols for instance)\n    const removeDirection = oldRawValue === this.masked.rawInputValue ? details.removeDirection : DIRECTION.NONE;\n    let cursorPos = this.masked.nearestInputPos(details.startChangePos + offset, removeDirection);\n    if (removeDirection !== DIRECTION.NONE) cursorPos = this.masked.nearestInputPos(cursorPos, DIRECTION.NONE);\n    this.updateControl();\n    this.updateCursor(cursorPos);\n    delete this._inputEvent;\n  }\n\n  /** Handles view change event and commits model value */\n  _onChange() {\n    if (this.displayValue !== this.el.value) {\n      this.updateValue();\n    }\n    this.masked.doCommit();\n    this.updateControl();\n    this._saveSelection();\n  }\n\n  /** Handles view drop event, prevents by default */\n  _onDrop(ev) {\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  /** Restore last selection on focus */\n  _onFocus(ev) {\n    this.alignCursorFriendly();\n  }\n\n  /** Restore last selection on focus */\n  _onClick(ev) {\n    this.alignCursorFriendly();\n  }\n\n  /** Unbind view events and removes element reference */\n  destroy() {\n    this._unbindEvents();\n    // @ts-ignore why not\n    this._listeners.length = 0;\n    delete this.el;\n  }\n}\nIMask.InputMask = InputMask;\n\nexport { InputMask as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}