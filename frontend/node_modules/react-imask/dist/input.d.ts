import React from 'react';
import { IMaskInputProps } from './mixin';
declare const IMaskInput: React.ForwardRefExoticComponent<(Omit<{
    accept?: string;
    acceptCharset?: string;
    action?: string;
    allowFullScreen?: boolean;
    allowTransparency?: boolean;
    alt?: string;
    as?: string;
    async?: boolean;
    autoComplete?: string;
    autoPlay?: boolean;
    capture?: boolean | "user" | "environment";
    cellPadding?: string | number;
    cellSpacing?: string | number;
    charSet?: string;
    challenge?: string;
    checked?: boolean;
    cite?: string;
    classID?: string;
    cols?: number;
    colSpan?: number;
    controls?: boolean;
    coords?: string;
    crossOrigin?: "" | "anonymous" | "use-credentials";
    data?: string;
    dateTime?: string;
    default?: boolean;
    defer?: boolean;
    disabled?: boolean;
    download?: any;
    encType?: string;
    form?: string;
    formAction?: string;
    formEncType?: string;
    formMethod?: string;
    formNoValidate?: boolean;
    formTarget?: string;
    frameBorder?: string | number;
    headers?: string;
    height?: string | number;
    high?: number;
    href?: string;
    hrefLang?: string;
    htmlFor?: string;
    httpEquiv?: string;
    integrity?: string;
    keyParams?: string;
    keyType?: string;
    kind?: string;
    label?: string;
    list?: string;
    loop?: boolean;
    low?: number;
    manifest?: string;
    marginHeight?: number;
    marginWidth?: number;
    media?: string;
    mediaGroup?: string;
    method?: string;
    minLength?: number;
    multiple?: boolean;
    muted?: boolean;
    name?: string;
    noValidate?: boolean;
    open?: boolean;
    optimum?: number;
    placeholder?: string;
    playsInline?: boolean;
    poster?: string;
    preload?: string;
    readOnly?: boolean;
    required?: boolean;
    reversed?: boolean;
    rows?: number;
    rowSpan?: number;
    sandbox?: string;
    scope?: string;
    scoped?: boolean;
    scrolling?: string;
    seamless?: boolean;
    selected?: boolean;
    shape?: string;
    size?: number;
    sizes?: string;
    span?: number;
    src?: string;
    srcDoc?: string;
    srcLang?: string;
    srcSet?: string;
    start?: number;
    step?: string | number;
    summary?: string;
    target?: string;
    type?: string;
    useMap?: string;
    width?: string | number;
    wmode?: string;
    wrap?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    autoFocus?: boolean;
    className?: string;
    contentEditable?: (boolean | "true" | "false") | "inherit";
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    nonce?: string;
    slot?: string;
    spellCheck?: boolean | "true" | "false";
    style?: React.CSSProperties;
    tabIndex?: number;
    title?: string;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: React.AriaRole;
    about?: string;
    content?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    rel?: string;
    resource?: string;
    rev?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "search" | "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    'aria-activedescendant'?: string;
    'aria-atomic'?: boolean | "true" | "false";
    'aria-autocomplete'?: "list" | "none" | "inline" | "both";
    'aria-busy'?: boolean | "true" | "false";
    'aria-checked'?: boolean | "true" | "false" | "mixed";
    'aria-colcount'?: number;
    'aria-colindex'?: number;
    'aria-colspan'?: number;
    'aria-controls'?: string;
    'aria-current'?: boolean | "date" | "step" | "time" | "true" | "false" | "page" | "location";
    'aria-describedby'?: string;
    'aria-details'?: string;
    'aria-disabled'?: boolean | "true" | "false";
    'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup";
    'aria-errormessage'?: string;
    'aria-expanded'?: boolean | "true" | "false";
    'aria-flowto'?: string;
    'aria-grabbed'?: boolean | "true" | "false";
    'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    'aria-hidden'?: boolean | "true" | "false";
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling";
    'aria-keyshortcuts'?: string;
    'aria-label'?: string;
    'aria-labelledby'?: string;
    'aria-level'?: number;
    'aria-live'?: "off" | "assertive" | "polite";
    'aria-modal'?: boolean | "true" | "false";
    'aria-multiline'?: boolean | "true" | "false";
    'aria-multiselectable'?: boolean | "true" | "false";
    'aria-orientation'?: "horizontal" | "vertical";
    'aria-owns'?: string;
    'aria-placeholder'?: string;
    'aria-posinset'?: number;
    'aria-pressed'?: boolean | "true" | "false" | "mixed";
    'aria-readonly'?: boolean | "true" | "false";
    'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    'aria-required'?: boolean | "true" | "false";
    'aria-roledescription'?: string;
    'aria-rowcount'?: number;
    'aria-rowindex'?: number;
    'aria-rowspan'?: number;
    'aria-selected'?: boolean | "true" | "false";
    'aria-setsize'?: number;
    'aria-sort'?: "none" | "ascending" | "descending" | "other";
    'aria-valuemax'?: number;
    'aria-valuemin'?: number;
    'aria-valuenow'?: number;
    'aria-valuetext'?: string;
    children?: React.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    };
    onCopy?: React.ClipboardEventHandler<HTMLInputElement>;
    onCopyCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onCut?: React.ClipboardEventHandler<HTMLInputElement>;
    onCutCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onPaste?: React.ClipboardEventHandler<HTMLInputElement>;
    onPasteCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onCompositionEnd?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionEndCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionStart?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionStartCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdate?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onFocus?: React.FocusEventHandler<HTMLInputElement>;
    onFocusCapture?: React.FocusEventHandler<HTMLInputElement>;
    onBlur?: React.FocusEventHandler<HTMLInputElement>;
    onBlurCapture?: React.FocusEventHandler<HTMLInputElement>;
    onChange?: React.FormEventHandler<HTMLInputElement>;
    onChangeCapture?: React.FormEventHandler<HTMLInputElement>;
    onBeforeInput?: React.FormEventHandler<HTMLInputElement>;
    onBeforeInputCapture?: React.FormEventHandler<HTMLInputElement>;
    onInput?: React.FormEventHandler<HTMLInputElement>;
    onInputCapture?: React.FormEventHandler<HTMLInputElement>;
    onReset?: React.FormEventHandler<HTMLInputElement>;
    onResetCapture?: React.FormEventHandler<HTMLInputElement>;
    onSubmit?: React.FormEventHandler<HTMLInputElement>;
    onSubmitCapture?: React.FormEventHandler<HTMLInputElement>;
    onInvalid?: React.FormEventHandler<HTMLInputElement>;
    onInvalidCapture?: React.FormEventHandler<HTMLInputElement>;
    onLoad?: React.ReactEventHandler<HTMLInputElement>;
    onLoadCapture?: React.ReactEventHandler<HTMLInputElement>;
    onError?: React.ReactEventHandler<HTMLInputElement>;
    onErrorCapture?: React.ReactEventHandler<HTMLInputElement>;
    onKeyDown?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyDownCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyPress?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyPressCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyUp?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyUpCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onAbort?: React.ReactEventHandler<HTMLInputElement>;
    onAbortCapture?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlay?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayCapture?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayThrough?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayThroughCapture?: React.ReactEventHandler<HTMLInputElement>;
    onDurationChange?: React.ReactEventHandler<HTMLInputElement>;
    onDurationChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEmptied?: React.ReactEventHandler<HTMLInputElement>;
    onEmptiedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEncrypted?: React.ReactEventHandler<HTMLInputElement>;
    onEncryptedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEnded?: React.ReactEventHandler<HTMLInputElement>;
    onEndedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedData?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedDataCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedMetadata?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedMetadataCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadStart?: React.ReactEventHandler<HTMLInputElement>;
    onLoadStartCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPause?: React.ReactEventHandler<HTMLInputElement>;
    onPauseCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPlay?: React.ReactEventHandler<HTMLInputElement>;
    onPlayCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPlaying?: React.ReactEventHandler<HTMLInputElement>;
    onPlayingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onProgress?: React.ReactEventHandler<HTMLInputElement>;
    onProgressCapture?: React.ReactEventHandler<HTMLInputElement>;
    onRateChange?: React.ReactEventHandler<HTMLInputElement>;
    onRateChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onResize?: React.ReactEventHandler<HTMLInputElement>;
    onResizeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSeeked?: React.ReactEventHandler<HTMLInputElement>;
    onSeekedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSeeking?: React.ReactEventHandler<HTMLInputElement>;
    onSeekingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onStalled?: React.ReactEventHandler<HTMLInputElement>;
    onStalledCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSuspend?: React.ReactEventHandler<HTMLInputElement>;
    onSuspendCapture?: React.ReactEventHandler<HTMLInputElement>;
    onTimeUpdate?: React.ReactEventHandler<HTMLInputElement>;
    onTimeUpdateCapture?: React.ReactEventHandler<HTMLInputElement>;
    onVolumeChange?: React.ReactEventHandler<HTMLInputElement>;
    onVolumeChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onWaiting?: React.ReactEventHandler<HTMLInputElement>;
    onWaitingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onAuxClick?: React.MouseEventHandler<HTMLInputElement>;
    onAuxClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onClick?: React.MouseEventHandler<HTMLInputElement>;
    onClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onContextMenu?: React.MouseEventHandler<HTMLInputElement>;
    onContextMenuCapture?: React.MouseEventHandler<HTMLInputElement>;
    onDoubleClick?: React.MouseEventHandler<HTMLInputElement>;
    onDoubleClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onDrag?: React.DragEventHandler<HTMLInputElement>;
    onDragCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragEnd?: React.DragEventHandler<HTMLInputElement>;
    onDragEndCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragEnter?: React.DragEventHandler<HTMLInputElement>;
    onDragEnterCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragExit?: React.DragEventHandler<HTMLInputElement>;
    onDragExitCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragLeave?: React.DragEventHandler<HTMLInputElement>;
    onDragLeaveCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragOver?: React.DragEventHandler<HTMLInputElement>;
    onDragOverCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragStart?: React.DragEventHandler<HTMLInputElement>;
    onDragStartCapture?: React.DragEventHandler<HTMLInputElement>;
    onDrop?: React.DragEventHandler<HTMLInputElement>;
    onDropCapture?: React.DragEventHandler<HTMLInputElement>;
    onMouseDown?: React.MouseEventHandler<HTMLInputElement>;
    onMouseDownCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseEnter?: React.MouseEventHandler<HTMLInputElement>;
    onMouseLeave?: React.MouseEventHandler<HTMLInputElement>;
    onMouseMove?: React.MouseEventHandler<HTMLInputElement>;
    onMouseMoveCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOut?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOutCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOver?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOverCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseUp?: React.MouseEventHandler<HTMLInputElement>;
    onMouseUpCapture?: React.MouseEventHandler<HTMLInputElement>;
    onSelect?: React.ReactEventHandler<HTMLInputElement>;
    onSelectCapture?: React.ReactEventHandler<HTMLInputElement>;
    onTouchCancel?: React.TouchEventHandler<HTMLInputElement>;
    onTouchCancelCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchEnd?: React.TouchEventHandler<HTMLInputElement>;
    onTouchEndCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchMove?: React.TouchEventHandler<HTMLInputElement>;
    onTouchMoveCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchStart?: React.TouchEventHandler<HTMLInputElement>;
    onTouchStartCapture?: React.TouchEventHandler<HTMLInputElement>;
    onPointerDown?: React.PointerEventHandler<HTMLInputElement>;
    onPointerDownCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerMove?: React.PointerEventHandler<HTMLInputElement>;
    onPointerMoveCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerUp?: React.PointerEventHandler<HTMLInputElement>;
    onPointerUpCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerCancel?: React.PointerEventHandler<HTMLInputElement>;
    onPointerCancelCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerEnter?: React.PointerEventHandler<HTMLInputElement>;
    onPointerEnterCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerLeave?: React.PointerEventHandler<HTMLInputElement>;
    onPointerLeaveCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOver?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOverCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOut?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOutCapture?: React.PointerEventHandler<HTMLInputElement>;
    onGotPointerCapture?: React.PointerEventHandler<HTMLInputElement>;
    onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement>;
    onLostPointerCapture?: React.PointerEventHandler<HTMLInputElement>;
    onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement>;
    onScroll?: React.UIEventHandler<HTMLInputElement>;
    onScrollCapture?: React.UIEventHandler<HTMLInputElement>;
    onWheel?: React.WheelEventHandler<HTMLInputElement>;
    onWheelCapture?: React.WheelEventHandler<HTMLInputElement>;
    onAnimationStart?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationStartCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationEnd?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationEndCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationIteration?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationIterationCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onTransitionEnd?: React.TransitionEventHandler<HTMLInputElement>;
    onTransitionEndCapture?: React.TransitionEventHandler<HTMLInputElement>;
    key?: React.Key;
} & Partial<Pick<import("../../imask/esm").Masked<any>, "mask" | "parent" | "prepare" | "prepareChar" | "validate" | "commit" | "format" | "parse" | "overwrite" | "eager" | "skipInvalid">> & {
    mask: typeof import("../../imask/esm").Masked | typeof import("../../imask/esm").MaskedPattern | typeof import("../../imask/esm").MaskedDate | typeof import("../../imask/esm").MaskedNumber | typeof import("../../imask/esm").MaskedEnum | typeof import("../../imask/esm").MaskedRange | typeof import("../../imask/esm").MaskedRegExp | typeof import("../../imask/esm").MaskedFunction | typeof import("../../imask/esm").MaskedDynamic;
} & {
    unmask?: boolean | "typed";
} & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}> & import("./mixin").ReactMaskProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}>> & import("./mixin").ReactMaskProps<HTMLInputElement, import("./mixin").IMaskMixinProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}>>> & {
    ref?: React.Ref<React.ComponentType<IMaskInputProps<HTMLInputElement, import("./mixin").IMaskMixinProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
        unmask?: boolean | "typed";
    }) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
        unmask?: boolean | "typed";
    }>>>>>;
}, "ref"> | Omit<{
    accept?: string;
    acceptCharset?: string;
    action?: string;
    allowFullScreen?: boolean;
    allowTransparency?: boolean;
    alt?: string;
    as?: string;
    async?: boolean;
    autoComplete?: string;
    autoPlay?: boolean;
    capture?: boolean | "user" | "environment";
    cellPadding?: string | number;
    cellSpacing?: string | number;
    charSet?: string;
    challenge?: string;
    checked?: boolean;
    cite?: string;
    classID?: string;
    cols?: number;
    colSpan?: number;
    controls?: boolean;
    coords?: string;
    crossOrigin?: "" | "anonymous" | "use-credentials";
    data?: string;
    dateTime?: string;
    default?: boolean;
    defer?: boolean;
    disabled?: boolean;
    download?: any;
    encType?: string;
    form?: string;
    formAction?: string;
    formEncType?: string;
    formMethod?: string;
    formNoValidate?: boolean;
    formTarget?: string;
    frameBorder?: string | number;
    headers?: string;
    height?: string | number;
    high?: number;
    href?: string;
    hrefLang?: string;
    htmlFor?: string;
    httpEquiv?: string;
    integrity?: string;
    keyParams?: string;
    keyType?: string;
    kind?: string;
    label?: string;
    list?: string;
    loop?: boolean;
    low?: number;
    manifest?: string;
    marginHeight?: number;
    marginWidth?: number;
    media?: string;
    mediaGroup?: string;
    method?: string;
    minLength?: number;
    multiple?: boolean;
    muted?: boolean;
    name?: string;
    noValidate?: boolean;
    open?: boolean;
    optimum?: number;
    placeholder?: string;
    playsInline?: boolean;
    poster?: string;
    preload?: string;
    readOnly?: boolean;
    required?: boolean;
    reversed?: boolean;
    rows?: number;
    rowSpan?: number;
    sandbox?: string;
    scope?: string;
    scoped?: boolean;
    scrolling?: string;
    seamless?: boolean;
    selected?: boolean;
    shape?: string;
    size?: number;
    sizes?: string;
    span?: number;
    src?: string;
    srcDoc?: string;
    srcLang?: string;
    srcSet?: string;
    start?: number;
    step?: string | number;
    summary?: string;
    target?: string;
    type?: string;
    useMap?: string;
    width?: string | number;
    wmode?: string;
    wrap?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    autoFocus?: boolean;
    className?: string;
    contentEditable?: (boolean | "true" | "false") | "inherit";
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    nonce?: string;
    slot?: string;
    spellCheck?: boolean | "true" | "false";
    style?: React.CSSProperties;
    tabIndex?: number;
    title?: string;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: React.AriaRole;
    about?: string;
    content?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    rel?: string;
    resource?: string;
    rev?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "search" | "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    'aria-activedescendant'?: string;
    'aria-atomic'?: boolean | "true" | "false";
    'aria-autocomplete'?: "list" | "none" | "inline" | "both";
    'aria-busy'?: boolean | "true" | "false";
    'aria-checked'?: boolean | "true" | "false" | "mixed";
    'aria-colcount'?: number;
    'aria-colindex'?: number;
    'aria-colspan'?: number;
    'aria-controls'?: string;
    'aria-current'?: boolean | "date" | "step" | "time" | "true" | "false" | "page" | "location";
    'aria-describedby'?: string;
    'aria-details'?: string;
    'aria-disabled'?: boolean | "true" | "false";
    'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup";
    'aria-errormessage'?: string;
    'aria-expanded'?: boolean | "true" | "false";
    'aria-flowto'?: string;
    'aria-grabbed'?: boolean | "true" | "false";
    'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    'aria-hidden'?: boolean | "true" | "false";
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling";
    'aria-keyshortcuts'?: string;
    'aria-label'?: string;
    'aria-labelledby'?: string;
    'aria-level'?: number;
    'aria-live'?: "off" | "assertive" | "polite";
    'aria-modal'?: boolean | "true" | "false";
    'aria-multiline'?: boolean | "true" | "false";
    'aria-multiselectable'?: boolean | "true" | "false";
    'aria-orientation'?: "horizontal" | "vertical";
    'aria-owns'?: string;
    'aria-placeholder'?: string;
    'aria-posinset'?: number;
    'aria-pressed'?: boolean | "true" | "false" | "mixed";
    'aria-readonly'?: boolean | "true" | "false";
    'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    'aria-required'?: boolean | "true" | "false";
    'aria-roledescription'?: string;
    'aria-rowcount'?: number;
    'aria-rowindex'?: number;
    'aria-rowspan'?: number;
    'aria-selected'?: boolean | "true" | "false";
    'aria-setsize'?: number;
    'aria-sort'?: "none" | "ascending" | "descending" | "other";
    'aria-valuemax'?: number;
    'aria-valuemin'?: number;
    'aria-valuenow'?: number;
    'aria-valuetext'?: string;
    children?: React.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    };
    onCopy?: React.ClipboardEventHandler<HTMLInputElement>;
    onCopyCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onCut?: React.ClipboardEventHandler<HTMLInputElement>;
    onCutCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onPaste?: React.ClipboardEventHandler<HTMLInputElement>;
    onPasteCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onCompositionEnd?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionEndCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionStart?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionStartCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdate?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onFocus?: React.FocusEventHandler<HTMLInputElement>;
    onFocusCapture?: React.FocusEventHandler<HTMLInputElement>;
    onBlur?: React.FocusEventHandler<HTMLInputElement>;
    onBlurCapture?: React.FocusEventHandler<HTMLInputElement>;
    onChange?: React.FormEventHandler<HTMLInputElement>;
    onChangeCapture?: React.FormEventHandler<HTMLInputElement>;
    onBeforeInput?: React.FormEventHandler<HTMLInputElement>;
    onBeforeInputCapture?: React.FormEventHandler<HTMLInputElement>;
    onInput?: React.FormEventHandler<HTMLInputElement>;
    onInputCapture?: React.FormEventHandler<HTMLInputElement>;
    onReset?: React.FormEventHandler<HTMLInputElement>;
    onResetCapture?: React.FormEventHandler<HTMLInputElement>;
    onSubmit?: React.FormEventHandler<HTMLInputElement>;
    onSubmitCapture?: React.FormEventHandler<HTMLInputElement>;
    onInvalid?: React.FormEventHandler<HTMLInputElement>;
    onInvalidCapture?: React.FormEventHandler<HTMLInputElement>;
    onLoad?: React.ReactEventHandler<HTMLInputElement>;
    onLoadCapture?: React.ReactEventHandler<HTMLInputElement>;
    onError?: React.ReactEventHandler<HTMLInputElement>;
    onErrorCapture?: React.ReactEventHandler<HTMLInputElement>;
    onKeyDown?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyDownCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyPress?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyPressCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyUp?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyUpCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onAbort?: React.ReactEventHandler<HTMLInputElement>;
    onAbortCapture?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlay?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayCapture?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayThrough?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayThroughCapture?: React.ReactEventHandler<HTMLInputElement>;
    onDurationChange?: React.ReactEventHandler<HTMLInputElement>;
    onDurationChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEmptied?: React.ReactEventHandler<HTMLInputElement>;
    onEmptiedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEncrypted?: React.ReactEventHandler<HTMLInputElement>;
    onEncryptedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEnded?: React.ReactEventHandler<HTMLInputElement>;
    onEndedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedData?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedDataCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedMetadata?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedMetadataCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadStart?: React.ReactEventHandler<HTMLInputElement>;
    onLoadStartCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPause?: React.ReactEventHandler<HTMLInputElement>;
    onPauseCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPlay?: React.ReactEventHandler<HTMLInputElement>;
    onPlayCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPlaying?: React.ReactEventHandler<HTMLInputElement>;
    onPlayingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onProgress?: React.ReactEventHandler<HTMLInputElement>;
    onProgressCapture?: React.ReactEventHandler<HTMLInputElement>;
    onRateChange?: React.ReactEventHandler<HTMLInputElement>;
    onRateChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onResize?: React.ReactEventHandler<HTMLInputElement>;
    onResizeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSeeked?: React.ReactEventHandler<HTMLInputElement>;
    onSeekedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSeeking?: React.ReactEventHandler<HTMLInputElement>;
    onSeekingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onStalled?: React.ReactEventHandler<HTMLInputElement>;
    onStalledCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSuspend?: React.ReactEventHandler<HTMLInputElement>;
    onSuspendCapture?: React.ReactEventHandler<HTMLInputElement>;
    onTimeUpdate?: React.ReactEventHandler<HTMLInputElement>;
    onTimeUpdateCapture?: React.ReactEventHandler<HTMLInputElement>;
    onVolumeChange?: React.ReactEventHandler<HTMLInputElement>;
    onVolumeChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onWaiting?: React.ReactEventHandler<HTMLInputElement>;
    onWaitingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onAuxClick?: React.MouseEventHandler<HTMLInputElement>;
    onAuxClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onClick?: React.MouseEventHandler<HTMLInputElement>;
    onClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onContextMenu?: React.MouseEventHandler<HTMLInputElement>;
    onContextMenuCapture?: React.MouseEventHandler<HTMLInputElement>;
    onDoubleClick?: React.MouseEventHandler<HTMLInputElement>;
    onDoubleClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onDrag?: React.DragEventHandler<HTMLInputElement>;
    onDragCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragEnd?: React.DragEventHandler<HTMLInputElement>;
    onDragEndCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragEnter?: React.DragEventHandler<HTMLInputElement>;
    onDragEnterCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragExit?: React.DragEventHandler<HTMLInputElement>;
    onDragExitCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragLeave?: React.DragEventHandler<HTMLInputElement>;
    onDragLeaveCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragOver?: React.DragEventHandler<HTMLInputElement>;
    onDragOverCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragStart?: React.DragEventHandler<HTMLInputElement>;
    onDragStartCapture?: React.DragEventHandler<HTMLInputElement>;
    onDrop?: React.DragEventHandler<HTMLInputElement>;
    onDropCapture?: React.DragEventHandler<HTMLInputElement>;
    onMouseDown?: React.MouseEventHandler<HTMLInputElement>;
    onMouseDownCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseEnter?: React.MouseEventHandler<HTMLInputElement>;
    onMouseLeave?: React.MouseEventHandler<HTMLInputElement>;
    onMouseMove?: React.MouseEventHandler<HTMLInputElement>;
    onMouseMoveCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOut?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOutCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOver?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOverCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseUp?: React.MouseEventHandler<HTMLInputElement>;
    onMouseUpCapture?: React.MouseEventHandler<HTMLInputElement>;
    onSelect?: React.ReactEventHandler<HTMLInputElement>;
    onSelectCapture?: React.ReactEventHandler<HTMLInputElement>;
    onTouchCancel?: React.TouchEventHandler<HTMLInputElement>;
    onTouchCancelCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchEnd?: React.TouchEventHandler<HTMLInputElement>;
    onTouchEndCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchMove?: React.TouchEventHandler<HTMLInputElement>;
    onTouchMoveCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchStart?: React.TouchEventHandler<HTMLInputElement>;
    onTouchStartCapture?: React.TouchEventHandler<HTMLInputElement>;
    onPointerDown?: React.PointerEventHandler<HTMLInputElement>;
    onPointerDownCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerMove?: React.PointerEventHandler<HTMLInputElement>;
    onPointerMoveCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerUp?: React.PointerEventHandler<HTMLInputElement>;
    onPointerUpCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerCancel?: React.PointerEventHandler<HTMLInputElement>;
    onPointerCancelCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerEnter?: React.PointerEventHandler<HTMLInputElement>;
    onPointerEnterCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerLeave?: React.PointerEventHandler<HTMLInputElement>;
    onPointerLeaveCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOver?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOverCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOut?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOutCapture?: React.PointerEventHandler<HTMLInputElement>;
    onGotPointerCapture?: React.PointerEventHandler<HTMLInputElement>;
    onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement>;
    onLostPointerCapture?: React.PointerEventHandler<HTMLInputElement>;
    onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement>;
    onScroll?: React.UIEventHandler<HTMLInputElement>;
    onScrollCapture?: React.UIEventHandler<HTMLInputElement>;
    onWheel?: React.WheelEventHandler<HTMLInputElement>;
    onWheelCapture?: React.WheelEventHandler<HTMLInputElement>;
    onAnimationStart?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationStartCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationEnd?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationEndCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationIteration?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationIterationCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onTransitionEnd?: React.TransitionEventHandler<HTMLInputElement>;
    onTransitionEndCapture?: React.TransitionEventHandler<HTMLInputElement>;
    key?: React.Key;
} & Partial<Pick<import("../../imask/esm").Masked<any>, "mask" | "parent" | "prepare" | "prepareChar" | "validate" | "commit" | "format" | "parse" | "overwrite" | "eager" | "skipInvalid">> & {
    mask: import("../../imask/esm").Masked<any>;
} & {
    unmask?: boolean | "typed";
} & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}> & import("./mixin").ReactMaskProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}>> & import("./mixin").ReactMaskProps<HTMLInputElement, import("./mixin").IMaskMixinProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}>>> & {
    ref?: React.Ref<React.ComponentType<IMaskInputProps<HTMLInputElement, import("./mixin").IMaskMixinProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
        unmask?: boolean | "typed";
    }) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
        unmask?: boolean | "typed";
    }>>>>>;
}, "ref"> | Omit<{
    accept?: string;
    acceptCharset?: string;
    action?: string;
    allowFullScreen?: boolean;
    allowTransparency?: boolean;
    alt?: string;
    as?: string;
    async?: boolean;
    autoComplete?: string;
    autoPlay?: boolean;
    capture?: boolean | "user" | "environment";
    cellPadding?: string | number;
    cellSpacing?: string | number;
    charSet?: string;
    challenge?: string;
    checked?: boolean;
    cite?: string;
    classID?: string;
    cols?: number;
    colSpan?: number;
    controls?: boolean;
    coords?: string;
    crossOrigin?: "" | "anonymous" | "use-credentials";
    data?: string;
    dateTime?: string;
    default?: boolean;
    defer?: boolean;
    disabled?: boolean;
    download?: any;
    encType?: string;
    form?: string;
    formAction?: string;
    formEncType?: string;
    formMethod?: string;
    formNoValidate?: boolean;
    formTarget?: string;
    frameBorder?: string | number;
    headers?: string;
    height?: string | number;
    high?: number;
    href?: string;
    hrefLang?: string;
    htmlFor?: string;
    httpEquiv?: string;
    integrity?: string;
    keyParams?: string;
    keyType?: string;
    kind?: string;
    label?: string;
    list?: string;
    loop?: boolean;
    low?: number;
    manifest?: string;
    marginHeight?: number;
    marginWidth?: number;
    media?: string;
    mediaGroup?: string;
    method?: string;
    minLength?: number;
    multiple?: boolean;
    muted?: boolean;
    name?: string;
    noValidate?: boolean;
    open?: boolean;
    optimum?: number;
    placeholder?: string;
    playsInline?: boolean;
    poster?: string;
    preload?: string;
    readOnly?: boolean;
    required?: boolean;
    reversed?: boolean;
    rows?: number;
    rowSpan?: number;
    sandbox?: string;
    scope?: string;
    scoped?: boolean;
    scrolling?: string;
    seamless?: boolean;
    selected?: boolean;
    shape?: string;
    size?: number;
    sizes?: string;
    span?: number;
    src?: string;
    srcDoc?: string;
    srcLang?: string;
    srcSet?: string;
    start?: number;
    step?: string | number;
    summary?: string;
    target?: string;
    type?: string;
    useMap?: string;
    width?: string | number;
    wmode?: string;
    wrap?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    autoFocus?: boolean;
    className?: string;
    contentEditable?: (boolean | "true" | "false") | "inherit";
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    nonce?: string;
    slot?: string;
    spellCheck?: boolean | "true" | "false";
    style?: React.CSSProperties;
    tabIndex?: number;
    title?: string;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: React.AriaRole;
    about?: string;
    content?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    rel?: string;
    resource?: string;
    rev?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "search" | "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    'aria-activedescendant'?: string;
    'aria-atomic'?: boolean | "true" | "false";
    'aria-autocomplete'?: "list" | "none" | "inline" | "both";
    'aria-busy'?: boolean | "true" | "false";
    'aria-checked'?: boolean | "true" | "false" | "mixed";
    'aria-colcount'?: number;
    'aria-colindex'?: number;
    'aria-colspan'?: number;
    'aria-controls'?: string;
    'aria-current'?: boolean | "date" | "step" | "time" | "true" | "false" | "page" | "location";
    'aria-describedby'?: string;
    'aria-details'?: string;
    'aria-disabled'?: boolean | "true" | "false";
    'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup";
    'aria-errormessage'?: string;
    'aria-expanded'?: boolean | "true" | "false";
    'aria-flowto'?: string;
    'aria-grabbed'?: boolean | "true" | "false";
    'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    'aria-hidden'?: boolean | "true" | "false";
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling";
    'aria-keyshortcuts'?: string;
    'aria-label'?: string;
    'aria-labelledby'?: string;
    'aria-level'?: number;
    'aria-live'?: "off" | "assertive" | "polite";
    'aria-modal'?: boolean | "true" | "false";
    'aria-multiline'?: boolean | "true" | "false";
    'aria-multiselectable'?: boolean | "true" | "false";
    'aria-orientation'?: "horizontal" | "vertical";
    'aria-owns'?: string;
    'aria-placeholder'?: string;
    'aria-posinset'?: number;
    'aria-pressed'?: boolean | "true" | "false" | "mixed";
    'aria-readonly'?: boolean | "true" | "false";
    'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    'aria-required'?: boolean | "true" | "false";
    'aria-roledescription'?: string;
    'aria-rowcount'?: number;
    'aria-rowindex'?: number;
    'aria-rowspan'?: number;
    'aria-selected'?: boolean | "true" | "false";
    'aria-setsize'?: number;
    'aria-sort'?: "none" | "ascending" | "descending" | "other";
    'aria-valuemax'?: number;
    'aria-valuemin'?: number;
    'aria-valuenow'?: number;
    'aria-valuetext'?: string;
    children?: React.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    };
    onCopy?: React.ClipboardEventHandler<HTMLInputElement>;
    onCopyCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onCut?: React.ClipboardEventHandler<HTMLInputElement>;
    onCutCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onPaste?: React.ClipboardEventHandler<HTMLInputElement>;
    onPasteCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onCompositionEnd?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionEndCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionStart?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionStartCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdate?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onFocus?: React.FocusEventHandler<HTMLInputElement>;
    onFocusCapture?: React.FocusEventHandler<HTMLInputElement>;
    onBlur?: React.FocusEventHandler<HTMLInputElement>;
    onBlurCapture?: React.FocusEventHandler<HTMLInputElement>;
    onChange?: React.FormEventHandler<HTMLInputElement>;
    onChangeCapture?: React.FormEventHandler<HTMLInputElement>;
    onBeforeInput?: React.FormEventHandler<HTMLInputElement>;
    onBeforeInputCapture?: React.FormEventHandler<HTMLInputElement>;
    onInput?: React.FormEventHandler<HTMLInputElement>;
    onInputCapture?: React.FormEventHandler<HTMLInputElement>;
    onReset?: React.FormEventHandler<HTMLInputElement>;
    onResetCapture?: React.FormEventHandler<HTMLInputElement>;
    onSubmit?: React.FormEventHandler<HTMLInputElement>;
    onSubmitCapture?: React.FormEventHandler<HTMLInputElement>;
    onInvalid?: React.FormEventHandler<HTMLInputElement>;
    onInvalidCapture?: React.FormEventHandler<HTMLInputElement>;
    onLoad?: React.ReactEventHandler<HTMLInputElement>;
    onLoadCapture?: React.ReactEventHandler<HTMLInputElement>;
    onError?: React.ReactEventHandler<HTMLInputElement>;
    onErrorCapture?: React.ReactEventHandler<HTMLInputElement>;
    onKeyDown?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyDownCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyPress?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyPressCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyUp?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyUpCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onAbort?: React.ReactEventHandler<HTMLInputElement>;
    onAbortCapture?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlay?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayCapture?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayThrough?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayThroughCapture?: React.ReactEventHandler<HTMLInputElement>;
    onDurationChange?: React.ReactEventHandler<HTMLInputElement>;
    onDurationChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEmptied?: React.ReactEventHandler<HTMLInputElement>;
    onEmptiedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEncrypted?: React.ReactEventHandler<HTMLInputElement>;
    onEncryptedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEnded?: React.ReactEventHandler<HTMLInputElement>;
    onEndedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedData?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedDataCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedMetadata?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedMetadataCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadStart?: React.ReactEventHandler<HTMLInputElement>;
    onLoadStartCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPause?: React.ReactEventHandler<HTMLInputElement>;
    onPauseCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPlay?: React.ReactEventHandler<HTMLInputElement>;
    onPlayCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPlaying?: React.ReactEventHandler<HTMLInputElement>;
    onPlayingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onProgress?: React.ReactEventHandler<HTMLInputElement>;
    onProgressCapture?: React.ReactEventHandler<HTMLInputElement>;
    onRateChange?: React.ReactEventHandler<HTMLInputElement>;
    onRateChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onResize?: React.ReactEventHandler<HTMLInputElement>;
    onResizeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSeeked?: React.ReactEventHandler<HTMLInputElement>;
    onSeekedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSeeking?: React.ReactEventHandler<HTMLInputElement>;
    onSeekingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onStalled?: React.ReactEventHandler<HTMLInputElement>;
    onStalledCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSuspend?: React.ReactEventHandler<HTMLInputElement>;
    onSuspendCapture?: React.ReactEventHandler<HTMLInputElement>;
    onTimeUpdate?: React.ReactEventHandler<HTMLInputElement>;
    onTimeUpdateCapture?: React.ReactEventHandler<HTMLInputElement>;
    onVolumeChange?: React.ReactEventHandler<HTMLInputElement>;
    onVolumeChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onWaiting?: React.ReactEventHandler<HTMLInputElement>;
    onWaitingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onAuxClick?: React.MouseEventHandler<HTMLInputElement>;
    onAuxClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onClick?: React.MouseEventHandler<HTMLInputElement>;
    onClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onContextMenu?: React.MouseEventHandler<HTMLInputElement>;
    onContextMenuCapture?: React.MouseEventHandler<HTMLInputElement>;
    onDoubleClick?: React.MouseEventHandler<HTMLInputElement>;
    onDoubleClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onDrag?: React.DragEventHandler<HTMLInputElement>;
    onDragCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragEnd?: React.DragEventHandler<HTMLInputElement>;
    onDragEndCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragEnter?: React.DragEventHandler<HTMLInputElement>;
    onDragEnterCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragExit?: React.DragEventHandler<HTMLInputElement>;
    onDragExitCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragLeave?: React.DragEventHandler<HTMLInputElement>;
    onDragLeaveCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragOver?: React.DragEventHandler<HTMLInputElement>;
    onDragOverCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragStart?: React.DragEventHandler<HTMLInputElement>;
    onDragStartCapture?: React.DragEventHandler<HTMLInputElement>;
    onDrop?: React.DragEventHandler<HTMLInputElement>;
    onDropCapture?: React.DragEventHandler<HTMLInputElement>;
    onMouseDown?: React.MouseEventHandler<HTMLInputElement>;
    onMouseDownCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseEnter?: React.MouseEventHandler<HTMLInputElement>;
    onMouseLeave?: React.MouseEventHandler<HTMLInputElement>;
    onMouseMove?: React.MouseEventHandler<HTMLInputElement>;
    onMouseMoveCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOut?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOutCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOver?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOverCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseUp?: React.MouseEventHandler<HTMLInputElement>;
    onMouseUpCapture?: React.MouseEventHandler<HTMLInputElement>;
    onSelect?: React.ReactEventHandler<HTMLInputElement>;
    onSelectCapture?: React.ReactEventHandler<HTMLInputElement>;
    onTouchCancel?: React.TouchEventHandler<HTMLInputElement>;
    onTouchCancelCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchEnd?: React.TouchEventHandler<HTMLInputElement>;
    onTouchEndCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchMove?: React.TouchEventHandler<HTMLInputElement>;
    onTouchMoveCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchStart?: React.TouchEventHandler<HTMLInputElement>;
    onTouchStartCapture?: React.TouchEventHandler<HTMLInputElement>;
    onPointerDown?: React.PointerEventHandler<HTMLInputElement>;
    onPointerDownCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerMove?: React.PointerEventHandler<HTMLInputElement>;
    onPointerMoveCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerUp?: React.PointerEventHandler<HTMLInputElement>;
    onPointerUpCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerCancel?: React.PointerEventHandler<HTMLInputElement>;
    onPointerCancelCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerEnter?: React.PointerEventHandler<HTMLInputElement>;
    onPointerEnterCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerLeave?: React.PointerEventHandler<HTMLInputElement>;
    onPointerLeaveCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOver?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOverCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOut?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOutCapture?: React.PointerEventHandler<HTMLInputElement>;
    onGotPointerCapture?: React.PointerEventHandler<HTMLInputElement>;
    onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement>;
    onLostPointerCapture?: React.PointerEventHandler<HTMLInputElement>;
    onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement>;
    onScroll?: React.UIEventHandler<HTMLInputElement>;
    onScrollCapture?: React.UIEventHandler<HTMLInputElement>;
    onWheel?: React.WheelEventHandler<HTMLInputElement>;
    onWheelCapture?: React.WheelEventHandler<HTMLInputElement>;
    onAnimationStart?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationStartCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationEnd?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationEndCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationIteration?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationIterationCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onTransitionEnd?: React.TransitionEventHandler<HTMLInputElement>;
    onTransitionEndCapture?: React.TransitionEventHandler<HTMLInputElement>;
    key?: React.Key;
} & Omit<import("../../imask/esm").MaskedDateOptions<Date>, "mask"> & {
    mask: DateConstructor;
} & {
    unmask?: boolean | "typed";
} & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}> & import("./mixin").ReactMaskProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}>> & import("./mixin").ReactMaskProps<HTMLInputElement, import("./mixin").IMaskMixinProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}>>> & {
    ref?: React.Ref<React.ComponentType<IMaskInputProps<HTMLInputElement, import("./mixin").IMaskMixinProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
        unmask?: boolean | "typed";
    }) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
        unmask?: boolean | "typed";
    }>>>>>;
}, "ref"> | Omit<{
    accept?: string;
    acceptCharset?: string;
    action?: string;
    allowFullScreen?: boolean;
    allowTransparency?: boolean;
    alt?: string;
    as?: string;
    async?: boolean;
    autoComplete?: string;
    autoPlay?: boolean;
    capture?: boolean | "user" | "environment";
    cellPadding?: string | number;
    cellSpacing?: string | number;
    charSet?: string;
    challenge?: string;
    checked?: boolean;
    cite?: string;
    classID?: string;
    cols?: number;
    colSpan?: number;
    controls?: boolean;
    coords?: string;
    crossOrigin?: "" | "anonymous" | "use-credentials";
    data?: string;
    dateTime?: string;
    default?: boolean;
    defer?: boolean;
    disabled?: boolean;
    download?: any;
    encType?: string;
    form?: string;
    formAction?: string;
    formEncType?: string;
    formMethod?: string;
    formNoValidate?: boolean;
    formTarget?: string;
    frameBorder?: string | number;
    headers?: string;
    height?: string | number;
    high?: number;
    href?: string;
    hrefLang?: string;
    htmlFor?: string;
    httpEquiv?: string;
    integrity?: string;
    keyParams?: string;
    keyType?: string;
    kind?: string;
    label?: string;
    list?: string;
    loop?: boolean;
    low?: number;
    manifest?: string;
    marginHeight?: number;
    marginWidth?: number;
    media?: string;
    mediaGroup?: string;
    method?: string;
    minLength?: number;
    multiple?: boolean;
    muted?: boolean;
    name?: string;
    noValidate?: boolean;
    open?: boolean;
    optimum?: number;
    placeholder?: string;
    playsInline?: boolean;
    poster?: string;
    preload?: string;
    readOnly?: boolean;
    required?: boolean;
    reversed?: boolean;
    rows?: number;
    rowSpan?: number;
    sandbox?: string;
    scope?: string;
    scoped?: boolean;
    scrolling?: string;
    seamless?: boolean;
    selected?: boolean;
    shape?: string;
    size?: number;
    sizes?: string;
    span?: number;
    src?: string;
    srcDoc?: string;
    srcLang?: string;
    srcSet?: string;
    start?: number;
    step?: string | number;
    summary?: string;
    target?: string;
    type?: string;
    useMap?: string;
    width?: string | number;
    wmode?: string;
    wrap?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    autoFocus?: boolean;
    className?: string;
    contentEditable?: (boolean | "true" | "false") | "inherit";
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    nonce?: string;
    slot?: string;
    spellCheck?: boolean | "true" | "false";
    style?: React.CSSProperties;
    tabIndex?: number;
    title?: string;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: React.AriaRole;
    about?: string;
    content?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    rel?: string;
    resource?: string;
    rev?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "search" | "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    'aria-activedescendant'?: string;
    'aria-atomic'?: boolean | "true" | "false";
    'aria-autocomplete'?: "list" | "none" | "inline" | "both";
    'aria-busy'?: boolean | "true" | "false";
    'aria-checked'?: boolean | "true" | "false" | "mixed";
    'aria-colcount'?: number;
    'aria-colindex'?: number;
    'aria-colspan'?: number;
    'aria-controls'?: string;
    'aria-current'?: boolean | "date" | "step" | "time" | "true" | "false" | "page" | "location";
    'aria-describedby'?: string;
    'aria-details'?: string;
    'aria-disabled'?: boolean | "true" | "false";
    'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup";
    'aria-errormessage'?: string;
    'aria-expanded'?: boolean | "true" | "false";
    'aria-flowto'?: string;
    'aria-grabbed'?: boolean | "true" | "false";
    'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    'aria-hidden'?: boolean | "true" | "false";
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling";
    'aria-keyshortcuts'?: string;
    'aria-label'?: string;
    'aria-labelledby'?: string;
    'aria-level'?: number;
    'aria-live'?: "off" | "assertive" | "polite";
    'aria-modal'?: boolean | "true" | "false";
    'aria-multiline'?: boolean | "true" | "false";
    'aria-multiselectable'?: boolean | "true" | "false";
    'aria-orientation'?: "horizontal" | "vertical";
    'aria-owns'?: string;
    'aria-placeholder'?: string;
    'aria-posinset'?: number;
    'aria-pressed'?: boolean | "true" | "false" | "mixed";
    'aria-readonly'?: boolean | "true" | "false";
    'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    'aria-required'?: boolean | "true" | "false";
    'aria-roledescription'?: string;
    'aria-rowcount'?: number;
    'aria-rowindex'?: number;
    'aria-rowspan'?: number;
    'aria-selected'?: boolean | "true" | "false";
    'aria-setsize'?: number;
    'aria-sort'?: "none" | "ascending" | "descending" | "other";
    'aria-valuemax'?: number;
    'aria-valuemin'?: number;
    'aria-valuenow'?: number;
    'aria-valuetext'?: string;
    children?: React.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    };
    onCopy?: React.ClipboardEventHandler<HTMLInputElement>;
    onCopyCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onCut?: React.ClipboardEventHandler<HTMLInputElement>;
    onCutCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onPaste?: React.ClipboardEventHandler<HTMLInputElement>;
    onPasteCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onCompositionEnd?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionEndCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionStart?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionStartCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdate?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onFocus?: React.FocusEventHandler<HTMLInputElement>;
    onFocusCapture?: React.FocusEventHandler<HTMLInputElement>;
    onBlur?: React.FocusEventHandler<HTMLInputElement>;
    onBlurCapture?: React.FocusEventHandler<HTMLInputElement>;
    onChange?: React.FormEventHandler<HTMLInputElement>;
    onChangeCapture?: React.FormEventHandler<HTMLInputElement>;
    onBeforeInput?: React.FormEventHandler<HTMLInputElement>;
    onBeforeInputCapture?: React.FormEventHandler<HTMLInputElement>;
    onInput?: React.FormEventHandler<HTMLInputElement>;
    onInputCapture?: React.FormEventHandler<HTMLInputElement>;
    onReset?: React.FormEventHandler<HTMLInputElement>;
    onResetCapture?: React.FormEventHandler<HTMLInputElement>;
    onSubmit?: React.FormEventHandler<HTMLInputElement>;
    onSubmitCapture?: React.FormEventHandler<HTMLInputElement>;
    onInvalid?: React.FormEventHandler<HTMLInputElement>;
    onInvalidCapture?: React.FormEventHandler<HTMLInputElement>;
    onLoad?: React.ReactEventHandler<HTMLInputElement>;
    onLoadCapture?: React.ReactEventHandler<HTMLInputElement>;
    onError?: React.ReactEventHandler<HTMLInputElement>;
    onErrorCapture?: React.ReactEventHandler<HTMLInputElement>;
    onKeyDown?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyDownCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyPress?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyPressCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyUp?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyUpCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onAbort?: React.ReactEventHandler<HTMLInputElement>;
    onAbortCapture?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlay?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayCapture?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayThrough?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayThroughCapture?: React.ReactEventHandler<HTMLInputElement>;
    onDurationChange?: React.ReactEventHandler<HTMLInputElement>;
    onDurationChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEmptied?: React.ReactEventHandler<HTMLInputElement>;
    onEmptiedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEncrypted?: React.ReactEventHandler<HTMLInputElement>;
    onEncryptedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEnded?: React.ReactEventHandler<HTMLInputElement>;
    onEndedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedData?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedDataCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedMetadata?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedMetadataCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadStart?: React.ReactEventHandler<HTMLInputElement>;
    onLoadStartCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPause?: React.ReactEventHandler<HTMLInputElement>;
    onPauseCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPlay?: React.ReactEventHandler<HTMLInputElement>;
    onPlayCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPlaying?: React.ReactEventHandler<HTMLInputElement>;
    onPlayingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onProgress?: React.ReactEventHandler<HTMLInputElement>;
    onProgressCapture?: React.ReactEventHandler<HTMLInputElement>;
    onRateChange?: React.ReactEventHandler<HTMLInputElement>;
    onRateChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onResize?: React.ReactEventHandler<HTMLInputElement>;
    onResizeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSeeked?: React.ReactEventHandler<HTMLInputElement>;
    onSeekedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSeeking?: React.ReactEventHandler<HTMLInputElement>;
    onSeekingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onStalled?: React.ReactEventHandler<HTMLInputElement>;
    onStalledCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSuspend?: React.ReactEventHandler<HTMLInputElement>;
    onSuspendCapture?: React.ReactEventHandler<HTMLInputElement>;
    onTimeUpdate?: React.ReactEventHandler<HTMLInputElement>;
    onTimeUpdateCapture?: React.ReactEventHandler<HTMLInputElement>;
    onVolumeChange?: React.ReactEventHandler<HTMLInputElement>;
    onVolumeChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onWaiting?: React.ReactEventHandler<HTMLInputElement>;
    onWaitingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onAuxClick?: React.MouseEventHandler<HTMLInputElement>;
    onAuxClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onClick?: React.MouseEventHandler<HTMLInputElement>;
    onClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onContextMenu?: React.MouseEventHandler<HTMLInputElement>;
    onContextMenuCapture?: React.MouseEventHandler<HTMLInputElement>;
    onDoubleClick?: React.MouseEventHandler<HTMLInputElement>;
    onDoubleClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onDrag?: React.DragEventHandler<HTMLInputElement>;
    onDragCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragEnd?: React.DragEventHandler<HTMLInputElement>;
    onDragEndCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragEnter?: React.DragEventHandler<HTMLInputElement>;
    onDragEnterCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragExit?: React.DragEventHandler<HTMLInputElement>;
    onDragExitCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragLeave?: React.DragEventHandler<HTMLInputElement>;
    onDragLeaveCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragOver?: React.DragEventHandler<HTMLInputElement>;
    onDragOverCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragStart?: React.DragEventHandler<HTMLInputElement>;
    onDragStartCapture?: React.DragEventHandler<HTMLInputElement>;
    onDrop?: React.DragEventHandler<HTMLInputElement>;
    onDropCapture?: React.DragEventHandler<HTMLInputElement>;
    onMouseDown?: React.MouseEventHandler<HTMLInputElement>;
    onMouseDownCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseEnter?: React.MouseEventHandler<HTMLInputElement>;
    onMouseLeave?: React.MouseEventHandler<HTMLInputElement>;
    onMouseMove?: React.MouseEventHandler<HTMLInputElement>;
    onMouseMoveCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOut?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOutCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOver?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOverCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseUp?: React.MouseEventHandler<HTMLInputElement>;
    onMouseUpCapture?: React.MouseEventHandler<HTMLInputElement>;
    onSelect?: React.ReactEventHandler<HTMLInputElement>;
    onSelectCapture?: React.ReactEventHandler<HTMLInputElement>;
    onTouchCancel?: React.TouchEventHandler<HTMLInputElement>;
    onTouchCancelCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchEnd?: React.TouchEventHandler<HTMLInputElement>;
    onTouchEndCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchMove?: React.TouchEventHandler<HTMLInputElement>;
    onTouchMoveCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchStart?: React.TouchEventHandler<HTMLInputElement>;
    onTouchStartCapture?: React.TouchEventHandler<HTMLInputElement>;
    onPointerDown?: React.PointerEventHandler<HTMLInputElement>;
    onPointerDownCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerMove?: React.PointerEventHandler<HTMLInputElement>;
    onPointerMoveCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerUp?: React.PointerEventHandler<HTMLInputElement>;
    onPointerUpCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerCancel?: React.PointerEventHandler<HTMLInputElement>;
    onPointerCancelCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerEnter?: React.PointerEventHandler<HTMLInputElement>;
    onPointerEnterCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerLeave?: React.PointerEventHandler<HTMLInputElement>;
    onPointerLeaveCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOver?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOverCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOut?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOutCapture?: React.PointerEventHandler<HTMLInputElement>;
    onGotPointerCapture?: React.PointerEventHandler<HTMLInputElement>;
    onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement>;
    onLostPointerCapture?: React.PointerEventHandler<HTMLInputElement>;
    onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement>;
    onScroll?: React.UIEventHandler<HTMLInputElement>;
    onScrollCapture?: React.UIEventHandler<HTMLInputElement>;
    onWheel?: React.WheelEventHandler<HTMLInputElement>;
    onWheelCapture?: React.WheelEventHandler<HTMLInputElement>;
    onAnimationStart?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationStartCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationEnd?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationEndCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationIteration?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationIterationCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onTransitionEnd?: React.TransitionEventHandler<HTMLInputElement>;
    onTransitionEndCapture?: React.TransitionEventHandler<HTMLInputElement>;
    key?: React.Key;
} & Partial<Pick<import("../../imask/esm").MaskedNumber, "mask" | "parent" | "prepare" | "prepareChar" | "validate" | "commit" | "format" | "parse" | "overwrite" | "eager" | "skipInvalid" | "min" | "max" | "radix" | "thousandsSeparator" | "mapToRadix" | "scale" | "normalizeZeros" | "padFractionalZeros">> & {
    unmask?: boolean | "typed";
} & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}> & import("./mixin").ReactMaskProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}>> & import("./mixin").ReactMaskProps<HTMLInputElement, import("./mixin").IMaskMixinProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}>>> & {
    ref?: React.Ref<React.ComponentType<IMaskInputProps<HTMLInputElement, import("./mixin").IMaskMixinProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
        unmask?: boolean | "typed";
    }) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
        unmask?: boolean | "typed";
    }>>>>>;
}, "ref"> | Omit<{
    accept?: string;
    acceptCharset?: string;
    action?: string;
    allowFullScreen?: boolean;
    allowTransparency?: boolean;
    alt?: string;
    as?: string;
    async?: boolean;
    autoComplete?: string;
    autoPlay?: boolean;
    capture?: boolean | "user" | "environment";
    cellPadding?: string | number;
    cellSpacing?: string | number;
    charSet?: string;
    challenge?: string;
    checked?: boolean;
    cite?: string;
    classID?: string;
    cols?: number;
    colSpan?: number;
    controls?: boolean;
    coords?: string;
    crossOrigin?: "" | "anonymous" | "use-credentials";
    data?: string;
    dateTime?: string;
    default?: boolean;
    defer?: boolean;
    disabled?: boolean;
    download?: any;
    encType?: string;
    form?: string;
    formAction?: string;
    formEncType?: string;
    formMethod?: string;
    formNoValidate?: boolean;
    formTarget?: string;
    frameBorder?: string | number;
    headers?: string;
    height?: string | number;
    high?: number;
    href?: string;
    hrefLang?: string;
    htmlFor?: string;
    httpEquiv?: string;
    integrity?: string;
    keyParams?: string;
    keyType?: string;
    kind?: string;
    label?: string;
    list?: string;
    loop?: boolean;
    low?: number;
    manifest?: string;
    marginHeight?: number;
    marginWidth?: number;
    media?: string;
    mediaGroup?: string;
    method?: string;
    minLength?: number;
    multiple?: boolean;
    muted?: boolean;
    name?: string;
    noValidate?: boolean;
    open?: boolean;
    optimum?: number;
    placeholder?: string;
    playsInline?: boolean;
    poster?: string;
    preload?: string;
    readOnly?: boolean;
    required?: boolean;
    reversed?: boolean;
    rows?: number;
    rowSpan?: number;
    sandbox?: string;
    scope?: string;
    scoped?: boolean;
    scrolling?: string;
    seamless?: boolean;
    selected?: boolean;
    shape?: string;
    size?: number;
    sizes?: string;
    span?: number;
    src?: string;
    srcDoc?: string;
    srcLang?: string;
    srcSet?: string;
    start?: number;
    step?: string | number;
    summary?: string;
    target?: string;
    type?: string;
    useMap?: string;
    width?: string | number;
    wmode?: string;
    wrap?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    autoFocus?: boolean;
    className?: string;
    contentEditable?: (boolean | "true" | "false") | "inherit";
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    nonce?: string;
    slot?: string;
    spellCheck?: boolean | "true" | "false";
    style?: React.CSSProperties;
    tabIndex?: number;
    title?: string;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: React.AriaRole;
    about?: string;
    content?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    rel?: string;
    resource?: string;
    rev?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "search" | "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    'aria-activedescendant'?: string;
    'aria-atomic'?: boolean | "true" | "false";
    'aria-autocomplete'?: "list" | "none" | "inline" | "both";
    'aria-busy'?: boolean | "true" | "false";
    'aria-checked'?: boolean | "true" | "false" | "mixed";
    'aria-colcount'?: number;
    'aria-colindex'?: number;
    'aria-colspan'?: number;
    'aria-controls'?: string;
    'aria-current'?: boolean | "date" | "step" | "time" | "true" | "false" | "page" | "location";
    'aria-describedby'?: string;
    'aria-details'?: string;
    'aria-disabled'?: boolean | "true" | "false";
    'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup";
    'aria-errormessage'?: string;
    'aria-expanded'?: boolean | "true" | "false";
    'aria-flowto'?: string;
    'aria-grabbed'?: boolean | "true" | "false";
    'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    'aria-hidden'?: boolean | "true" | "false";
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling";
    'aria-keyshortcuts'?: string;
    'aria-label'?: string;
    'aria-labelledby'?: string;
    'aria-level'?: number;
    'aria-live'?: "off" | "assertive" | "polite";
    'aria-modal'?: boolean | "true" | "false";
    'aria-multiline'?: boolean | "true" | "false";
    'aria-multiselectable'?: boolean | "true" | "false";
    'aria-orientation'?: "horizontal" | "vertical";
    'aria-owns'?: string;
    'aria-placeholder'?: string;
    'aria-posinset'?: number;
    'aria-pressed'?: boolean | "true" | "false" | "mixed";
    'aria-readonly'?: boolean | "true" | "false";
    'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    'aria-required'?: boolean | "true" | "false";
    'aria-roledescription'?: string;
    'aria-rowcount'?: number;
    'aria-rowindex'?: number;
    'aria-rowspan'?: number;
    'aria-selected'?: boolean | "true" | "false";
    'aria-setsize'?: number;
    'aria-sort'?: "none" | "ascending" | "descending" | "other";
    'aria-valuemax'?: number;
    'aria-valuemin'?: number;
    'aria-valuenow'?: number;
    'aria-valuetext'?: string;
    children?: React.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    };
    onCopy?: React.ClipboardEventHandler<HTMLInputElement>;
    onCopyCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onCut?: React.ClipboardEventHandler<HTMLInputElement>;
    onCutCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onPaste?: React.ClipboardEventHandler<HTMLInputElement>;
    onPasteCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onCompositionEnd?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionEndCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionStart?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionStartCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdate?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onFocus?: React.FocusEventHandler<HTMLInputElement>;
    onFocusCapture?: React.FocusEventHandler<HTMLInputElement>;
    onBlur?: React.FocusEventHandler<HTMLInputElement>;
    onBlurCapture?: React.FocusEventHandler<HTMLInputElement>;
    onChange?: React.FormEventHandler<HTMLInputElement>;
    onChangeCapture?: React.FormEventHandler<HTMLInputElement>;
    onBeforeInput?: React.FormEventHandler<HTMLInputElement>;
    onBeforeInputCapture?: React.FormEventHandler<HTMLInputElement>;
    onInput?: React.FormEventHandler<HTMLInputElement>;
    onInputCapture?: React.FormEventHandler<HTMLInputElement>;
    onReset?: React.FormEventHandler<HTMLInputElement>;
    onResetCapture?: React.FormEventHandler<HTMLInputElement>;
    onSubmit?: React.FormEventHandler<HTMLInputElement>;
    onSubmitCapture?: React.FormEventHandler<HTMLInputElement>;
    onInvalid?: React.FormEventHandler<HTMLInputElement>;
    onInvalidCapture?: React.FormEventHandler<HTMLInputElement>;
    onLoad?: React.ReactEventHandler<HTMLInputElement>;
    onLoadCapture?: React.ReactEventHandler<HTMLInputElement>;
    onError?: React.ReactEventHandler<HTMLInputElement>;
    onErrorCapture?: React.ReactEventHandler<HTMLInputElement>;
    onKeyDown?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyDownCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyPress?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyPressCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyUp?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyUpCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onAbort?: React.ReactEventHandler<HTMLInputElement>;
    onAbortCapture?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlay?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayCapture?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayThrough?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayThroughCapture?: React.ReactEventHandler<HTMLInputElement>;
    onDurationChange?: React.ReactEventHandler<HTMLInputElement>;
    onDurationChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEmptied?: React.ReactEventHandler<HTMLInputElement>;
    onEmptiedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEncrypted?: React.ReactEventHandler<HTMLInputElement>;
    onEncryptedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEnded?: React.ReactEventHandler<HTMLInputElement>;
    onEndedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedData?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedDataCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedMetadata?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedMetadataCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadStart?: React.ReactEventHandler<HTMLInputElement>;
    onLoadStartCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPause?: React.ReactEventHandler<HTMLInputElement>;
    onPauseCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPlay?: React.ReactEventHandler<HTMLInputElement>;
    onPlayCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPlaying?: React.ReactEventHandler<HTMLInputElement>;
    onPlayingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onProgress?: React.ReactEventHandler<HTMLInputElement>;
    onProgressCapture?: React.ReactEventHandler<HTMLInputElement>;
    onRateChange?: React.ReactEventHandler<HTMLInputElement>;
    onRateChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onResize?: React.ReactEventHandler<HTMLInputElement>;
    onResizeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSeeked?: React.ReactEventHandler<HTMLInputElement>;
    onSeekedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSeeking?: React.ReactEventHandler<HTMLInputElement>;
    onSeekingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onStalled?: React.ReactEventHandler<HTMLInputElement>;
    onStalledCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSuspend?: React.ReactEventHandler<HTMLInputElement>;
    onSuspendCapture?: React.ReactEventHandler<HTMLInputElement>;
    onTimeUpdate?: React.ReactEventHandler<HTMLInputElement>;
    onTimeUpdateCapture?: React.ReactEventHandler<HTMLInputElement>;
    onVolumeChange?: React.ReactEventHandler<HTMLInputElement>;
    onVolumeChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onWaiting?: React.ReactEventHandler<HTMLInputElement>;
    onWaitingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onAuxClick?: React.MouseEventHandler<HTMLInputElement>;
    onAuxClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onClick?: React.MouseEventHandler<HTMLInputElement>;
    onClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onContextMenu?: React.MouseEventHandler<HTMLInputElement>;
    onContextMenuCapture?: React.MouseEventHandler<HTMLInputElement>;
    onDoubleClick?: React.MouseEventHandler<HTMLInputElement>;
    onDoubleClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onDrag?: React.DragEventHandler<HTMLInputElement>;
    onDragCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragEnd?: React.DragEventHandler<HTMLInputElement>;
    onDragEndCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragEnter?: React.DragEventHandler<HTMLInputElement>;
    onDragEnterCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragExit?: React.DragEventHandler<HTMLInputElement>;
    onDragExitCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragLeave?: React.DragEventHandler<HTMLInputElement>;
    onDragLeaveCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragOver?: React.DragEventHandler<HTMLInputElement>;
    onDragOverCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragStart?: React.DragEventHandler<HTMLInputElement>;
    onDragStartCapture?: React.DragEventHandler<HTMLInputElement>;
    onDrop?: React.DragEventHandler<HTMLInputElement>;
    onDropCapture?: React.DragEventHandler<HTMLInputElement>;
    onMouseDown?: React.MouseEventHandler<HTMLInputElement>;
    onMouseDownCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseEnter?: React.MouseEventHandler<HTMLInputElement>;
    onMouseLeave?: React.MouseEventHandler<HTMLInputElement>;
    onMouseMove?: React.MouseEventHandler<HTMLInputElement>;
    onMouseMoveCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOut?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOutCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOver?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOverCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseUp?: React.MouseEventHandler<HTMLInputElement>;
    onMouseUpCapture?: React.MouseEventHandler<HTMLInputElement>;
    onSelect?: React.ReactEventHandler<HTMLInputElement>;
    onSelectCapture?: React.ReactEventHandler<HTMLInputElement>;
    onTouchCancel?: React.TouchEventHandler<HTMLInputElement>;
    onTouchCancelCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchEnd?: React.TouchEventHandler<HTMLInputElement>;
    onTouchEndCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchMove?: React.TouchEventHandler<HTMLInputElement>;
    onTouchMoveCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchStart?: React.TouchEventHandler<HTMLInputElement>;
    onTouchStartCapture?: React.TouchEventHandler<HTMLInputElement>;
    onPointerDown?: React.PointerEventHandler<HTMLInputElement>;
    onPointerDownCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerMove?: React.PointerEventHandler<HTMLInputElement>;
    onPointerMoveCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerUp?: React.PointerEventHandler<HTMLInputElement>;
    onPointerUpCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerCancel?: React.PointerEventHandler<HTMLInputElement>;
    onPointerCancelCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerEnter?: React.PointerEventHandler<HTMLInputElement>;
    onPointerEnterCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerLeave?: React.PointerEventHandler<HTMLInputElement>;
    onPointerLeaveCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOver?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOverCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOut?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOutCapture?: React.PointerEventHandler<HTMLInputElement>;
    onGotPointerCapture?: React.PointerEventHandler<HTMLInputElement>;
    onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement>;
    onLostPointerCapture?: React.PointerEventHandler<HTMLInputElement>;
    onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement>;
    onScroll?: React.UIEventHandler<HTMLInputElement>;
    onScrollCapture?: React.UIEventHandler<HTMLInputElement>;
    onWheel?: React.WheelEventHandler<HTMLInputElement>;
    onWheelCapture?: React.WheelEventHandler<HTMLInputElement>;
    onAnimationStart?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationStartCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationEnd?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationEndCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationIteration?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationIterationCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onTransitionEnd?: React.TransitionEventHandler<HTMLInputElement>;
    onTransitionEndCapture?: React.TransitionEventHandler<HTMLInputElement>;
    key?: React.Key;
} & Partial<Pick<import("../../imask/esm").MaskedPattern<string>, "mask" | "parent" | "prepare" | "prepareChar" | "validate" | "commit" | "format" | "parse" | "overwrite" | "eager" | "skipInvalid" | "definitions" | "blocks" | "placeholderChar" | "displayChar" | "lazy">> & {
    unmask?: boolean | "typed";
} & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}> & import("./mixin").ReactMaskProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}>> & import("./mixin").ReactMaskProps<HTMLInputElement, import("./mixin").IMaskMixinProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}>>> & {
    ref?: React.Ref<React.ComponentType<IMaskInputProps<HTMLInputElement, import("./mixin").IMaskMixinProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
        unmask?: boolean | "typed";
    }) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
        unmask?: boolean | "typed";
    }>>>>>;
}, "ref"> | Omit<{
    accept?: string;
    acceptCharset?: string;
    action?: string;
    allowFullScreen?: boolean;
    allowTransparency?: boolean;
    alt?: string;
    as?: string;
    async?: boolean;
    autoComplete?: string;
    autoPlay?: boolean;
    capture?: boolean | "user" | "environment";
    cellPadding?: string | number;
    cellSpacing?: string | number;
    charSet?: string;
    challenge?: string;
    checked?: boolean;
    cite?: string;
    classID?: string;
    cols?: number;
    colSpan?: number;
    controls?: boolean;
    coords?: string;
    crossOrigin?: "" | "anonymous" | "use-credentials";
    data?: string;
    dateTime?: string;
    default?: boolean;
    defer?: boolean;
    disabled?: boolean;
    download?: any;
    encType?: string;
    form?: string;
    formAction?: string;
    formEncType?: string;
    formMethod?: string;
    formNoValidate?: boolean;
    formTarget?: string;
    frameBorder?: string | number;
    headers?: string;
    height?: string | number;
    high?: number;
    href?: string;
    hrefLang?: string;
    htmlFor?: string;
    httpEquiv?: string;
    integrity?: string;
    keyParams?: string;
    keyType?: string;
    kind?: string;
    label?: string;
    list?: string;
    loop?: boolean;
    low?: number;
    manifest?: string;
    marginHeight?: number;
    marginWidth?: number;
    media?: string;
    mediaGroup?: string;
    method?: string;
    minLength?: number;
    multiple?: boolean;
    muted?: boolean;
    name?: string;
    noValidate?: boolean;
    open?: boolean;
    optimum?: number;
    placeholder?: string;
    playsInline?: boolean;
    poster?: string;
    preload?: string;
    readOnly?: boolean;
    required?: boolean;
    reversed?: boolean;
    rows?: number;
    rowSpan?: number;
    sandbox?: string;
    scope?: string;
    scoped?: boolean;
    scrolling?: string;
    seamless?: boolean;
    selected?: boolean;
    shape?: string;
    size?: number;
    sizes?: string;
    span?: number;
    src?: string;
    srcDoc?: string;
    srcLang?: string;
    srcSet?: string;
    start?: number;
    step?: string | number;
    summary?: string;
    target?: string;
    type?: string;
    useMap?: string;
    width?: string | number;
    wmode?: string;
    wrap?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    autoFocus?: boolean;
    className?: string;
    contentEditable?: (boolean | "true" | "false") | "inherit";
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    nonce?: string;
    slot?: string;
    spellCheck?: boolean | "true" | "false";
    style?: React.CSSProperties;
    tabIndex?: number;
    title?: string;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: React.AriaRole;
    about?: string;
    content?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    rel?: string;
    resource?: string;
    rev?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "search" | "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    'aria-activedescendant'?: string;
    'aria-atomic'?: boolean | "true" | "false";
    'aria-autocomplete'?: "list" | "none" | "inline" | "both";
    'aria-busy'?: boolean | "true" | "false";
    'aria-checked'?: boolean | "true" | "false" | "mixed";
    'aria-colcount'?: number;
    'aria-colindex'?: number;
    'aria-colspan'?: number;
    'aria-controls'?: string;
    'aria-current'?: boolean | "date" | "step" | "time" | "true" | "false" | "page" | "location";
    'aria-describedby'?: string;
    'aria-details'?: string;
    'aria-disabled'?: boolean | "true" | "false";
    'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup";
    'aria-errormessage'?: string;
    'aria-expanded'?: boolean | "true" | "false";
    'aria-flowto'?: string;
    'aria-grabbed'?: boolean | "true" | "false";
    'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    'aria-hidden'?: boolean | "true" | "false";
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling";
    'aria-keyshortcuts'?: string;
    'aria-label'?: string;
    'aria-labelledby'?: string;
    'aria-level'?: number;
    'aria-live'?: "off" | "assertive" | "polite";
    'aria-modal'?: boolean | "true" | "false";
    'aria-multiline'?: boolean | "true" | "false";
    'aria-multiselectable'?: boolean | "true" | "false";
    'aria-orientation'?: "horizontal" | "vertical";
    'aria-owns'?: string;
    'aria-placeholder'?: string;
    'aria-posinset'?: number;
    'aria-pressed'?: boolean | "true" | "false" | "mixed";
    'aria-readonly'?: boolean | "true" | "false";
    'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    'aria-required'?: boolean | "true" | "false";
    'aria-roledescription'?: string;
    'aria-rowcount'?: number;
    'aria-rowindex'?: number;
    'aria-rowspan'?: number;
    'aria-selected'?: boolean | "true" | "false";
    'aria-setsize'?: number;
    'aria-sort'?: "none" | "ascending" | "descending" | "other";
    'aria-valuemax'?: number;
    'aria-valuemin'?: number;
    'aria-valuenow'?: number;
    'aria-valuetext'?: string;
    children?: React.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    };
    onCopy?: React.ClipboardEventHandler<HTMLInputElement>;
    onCopyCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onCut?: React.ClipboardEventHandler<HTMLInputElement>;
    onCutCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onPaste?: React.ClipboardEventHandler<HTMLInputElement>;
    onPasteCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onCompositionEnd?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionEndCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionStart?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionStartCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdate?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onFocus?: React.FocusEventHandler<HTMLInputElement>;
    onFocusCapture?: React.FocusEventHandler<HTMLInputElement>;
    onBlur?: React.FocusEventHandler<HTMLInputElement>;
    onBlurCapture?: React.FocusEventHandler<HTMLInputElement>;
    onChange?: React.FormEventHandler<HTMLInputElement>;
    onChangeCapture?: React.FormEventHandler<HTMLInputElement>;
    onBeforeInput?: React.FormEventHandler<HTMLInputElement>;
    onBeforeInputCapture?: React.FormEventHandler<HTMLInputElement>;
    onInput?: React.FormEventHandler<HTMLInputElement>;
    onInputCapture?: React.FormEventHandler<HTMLInputElement>;
    onReset?: React.FormEventHandler<HTMLInputElement>;
    onResetCapture?: React.FormEventHandler<HTMLInputElement>;
    onSubmit?: React.FormEventHandler<HTMLInputElement>;
    onSubmitCapture?: React.FormEventHandler<HTMLInputElement>;
    onInvalid?: React.FormEventHandler<HTMLInputElement>;
    onInvalidCapture?: React.FormEventHandler<HTMLInputElement>;
    onLoad?: React.ReactEventHandler<HTMLInputElement>;
    onLoadCapture?: React.ReactEventHandler<HTMLInputElement>;
    onError?: React.ReactEventHandler<HTMLInputElement>;
    onErrorCapture?: React.ReactEventHandler<HTMLInputElement>;
    onKeyDown?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyDownCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyPress?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyPressCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyUp?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyUpCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onAbort?: React.ReactEventHandler<HTMLInputElement>;
    onAbortCapture?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlay?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayCapture?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayThrough?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayThroughCapture?: React.ReactEventHandler<HTMLInputElement>;
    onDurationChange?: React.ReactEventHandler<HTMLInputElement>;
    onDurationChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEmptied?: React.ReactEventHandler<HTMLInputElement>;
    onEmptiedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEncrypted?: React.ReactEventHandler<HTMLInputElement>;
    onEncryptedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEnded?: React.ReactEventHandler<HTMLInputElement>;
    onEndedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedData?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedDataCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedMetadata?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedMetadataCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadStart?: React.ReactEventHandler<HTMLInputElement>;
    onLoadStartCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPause?: React.ReactEventHandler<HTMLInputElement>;
    onPauseCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPlay?: React.ReactEventHandler<HTMLInputElement>;
    onPlayCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPlaying?: React.ReactEventHandler<HTMLInputElement>;
    onPlayingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onProgress?: React.ReactEventHandler<HTMLInputElement>;
    onProgressCapture?: React.ReactEventHandler<HTMLInputElement>;
    onRateChange?: React.ReactEventHandler<HTMLInputElement>;
    onRateChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onResize?: React.ReactEventHandler<HTMLInputElement>;
    onResizeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSeeked?: React.ReactEventHandler<HTMLInputElement>;
    onSeekedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSeeking?: React.ReactEventHandler<HTMLInputElement>;
    onSeekingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onStalled?: React.ReactEventHandler<HTMLInputElement>;
    onStalledCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSuspend?: React.ReactEventHandler<HTMLInputElement>;
    onSuspendCapture?: React.ReactEventHandler<HTMLInputElement>;
    onTimeUpdate?: React.ReactEventHandler<HTMLInputElement>;
    onTimeUpdateCapture?: React.ReactEventHandler<HTMLInputElement>;
    onVolumeChange?: React.ReactEventHandler<HTMLInputElement>;
    onVolumeChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onWaiting?: React.ReactEventHandler<HTMLInputElement>;
    onWaitingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onAuxClick?: React.MouseEventHandler<HTMLInputElement>;
    onAuxClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onClick?: React.MouseEventHandler<HTMLInputElement>;
    onClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onContextMenu?: React.MouseEventHandler<HTMLInputElement>;
    onContextMenuCapture?: React.MouseEventHandler<HTMLInputElement>;
    onDoubleClick?: React.MouseEventHandler<HTMLInputElement>;
    onDoubleClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onDrag?: React.DragEventHandler<HTMLInputElement>;
    onDragCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragEnd?: React.DragEventHandler<HTMLInputElement>;
    onDragEndCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragEnter?: React.DragEventHandler<HTMLInputElement>;
    onDragEnterCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragExit?: React.DragEventHandler<HTMLInputElement>;
    onDragExitCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragLeave?: React.DragEventHandler<HTMLInputElement>;
    onDragLeaveCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragOver?: React.DragEventHandler<HTMLInputElement>;
    onDragOverCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragStart?: React.DragEventHandler<HTMLInputElement>;
    onDragStartCapture?: React.DragEventHandler<HTMLInputElement>;
    onDrop?: React.DragEventHandler<HTMLInputElement>;
    onDropCapture?: React.DragEventHandler<HTMLInputElement>;
    onMouseDown?: React.MouseEventHandler<HTMLInputElement>;
    onMouseDownCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseEnter?: React.MouseEventHandler<HTMLInputElement>;
    onMouseLeave?: React.MouseEventHandler<HTMLInputElement>;
    onMouseMove?: React.MouseEventHandler<HTMLInputElement>;
    onMouseMoveCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOut?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOutCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOver?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOverCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseUp?: React.MouseEventHandler<HTMLInputElement>;
    onMouseUpCapture?: React.MouseEventHandler<HTMLInputElement>;
    onSelect?: React.ReactEventHandler<HTMLInputElement>;
    onSelectCapture?: React.ReactEventHandler<HTMLInputElement>;
    onTouchCancel?: React.TouchEventHandler<HTMLInputElement>;
    onTouchCancelCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchEnd?: React.TouchEventHandler<HTMLInputElement>;
    onTouchEndCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchMove?: React.TouchEventHandler<HTMLInputElement>;
    onTouchMoveCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchStart?: React.TouchEventHandler<HTMLInputElement>;
    onTouchStartCapture?: React.TouchEventHandler<HTMLInputElement>;
    onPointerDown?: React.PointerEventHandler<HTMLInputElement>;
    onPointerDownCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerMove?: React.PointerEventHandler<HTMLInputElement>;
    onPointerMoveCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerUp?: React.PointerEventHandler<HTMLInputElement>;
    onPointerUpCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerCancel?: React.PointerEventHandler<HTMLInputElement>;
    onPointerCancelCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerEnter?: React.PointerEventHandler<HTMLInputElement>;
    onPointerEnterCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerLeave?: React.PointerEventHandler<HTMLInputElement>;
    onPointerLeaveCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOver?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOverCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOut?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOutCapture?: React.PointerEventHandler<HTMLInputElement>;
    onGotPointerCapture?: React.PointerEventHandler<HTMLInputElement>;
    onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement>;
    onLostPointerCapture?: React.PointerEventHandler<HTMLInputElement>;
    onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement>;
    onScroll?: React.UIEventHandler<HTMLInputElement>;
    onScrollCapture?: React.UIEventHandler<HTMLInputElement>;
    onWheel?: React.WheelEventHandler<HTMLInputElement>;
    onWheelCapture?: React.WheelEventHandler<HTMLInputElement>;
    onAnimationStart?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationStartCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationEnd?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationEndCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationIteration?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationIterationCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onTransitionEnd?: React.TransitionEventHandler<HTMLInputElement>;
    onTransitionEndCapture?: React.TransitionEventHandler<HTMLInputElement>;
    key?: React.Key;
} & Partial<Pick<import("../../imask/esm").MaskedDynamic<any>, "mask" | "parent" | "prepare" | "prepareChar" | "validate" | "commit" | "format" | "parse" | "overwrite" | "eager" | "skipInvalid" | "dispatch">> & {
    unmask?: boolean | "typed";
} & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}> & import("./mixin").ReactMaskProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}>> & import("./mixin").ReactMaskProps<HTMLInputElement, import("./mixin").IMaskMixinProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}>>> & {
    ref?: React.Ref<React.ComponentType<IMaskInputProps<HTMLInputElement, import("./mixin").IMaskMixinProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
        unmask?: boolean | "typed";
    }) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
        unmask?: boolean | "typed";
    }>>>>>;
}, "ref"> | Omit<{
    accept?: string;
    acceptCharset?: string;
    action?: string;
    allowFullScreen?: boolean;
    allowTransparency?: boolean;
    alt?: string;
    as?: string;
    async?: boolean;
    autoComplete?: string;
    autoPlay?: boolean;
    capture?: boolean | "user" | "environment";
    cellPadding?: string | number;
    cellSpacing?: string | number;
    charSet?: string;
    challenge?: string;
    checked?: boolean;
    cite?: string;
    classID?: string;
    cols?: number;
    colSpan?: number;
    controls?: boolean;
    coords?: string;
    crossOrigin?: "" | "anonymous" | "use-credentials";
    data?: string;
    dateTime?: string;
    default?: boolean;
    defer?: boolean;
    disabled?: boolean;
    download?: any;
    encType?: string;
    form?: string;
    formAction?: string;
    formEncType?: string;
    formMethod?: string;
    formNoValidate?: boolean;
    formTarget?: string;
    frameBorder?: string | number;
    headers?: string;
    height?: string | number;
    high?: number;
    href?: string;
    hrefLang?: string;
    htmlFor?: string;
    httpEquiv?: string;
    integrity?: string;
    keyParams?: string;
    keyType?: string;
    kind?: string;
    label?: string;
    list?: string;
    loop?: boolean;
    low?: number;
    manifest?: string;
    marginHeight?: number;
    marginWidth?: number;
    media?: string;
    mediaGroup?: string;
    method?: string;
    minLength?: number;
    multiple?: boolean;
    muted?: boolean;
    name?: string;
    noValidate?: boolean;
    open?: boolean;
    optimum?: number;
    placeholder?: string;
    playsInline?: boolean;
    poster?: string;
    preload?: string;
    readOnly?: boolean;
    required?: boolean;
    reversed?: boolean;
    rows?: number;
    rowSpan?: number;
    sandbox?: string;
    scope?: string;
    scoped?: boolean;
    scrolling?: string;
    seamless?: boolean;
    selected?: boolean;
    shape?: string;
    size?: number;
    sizes?: string;
    span?: number;
    src?: string;
    srcDoc?: string;
    srcLang?: string;
    srcSet?: string;
    start?: number;
    step?: string | number;
    summary?: string;
    target?: string;
    type?: string;
    useMap?: string;
    width?: string | number;
    wmode?: string;
    wrap?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    autoFocus?: boolean;
    className?: string;
    contentEditable?: (boolean | "true" | "false") | "inherit";
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    nonce?: string;
    slot?: string;
    spellCheck?: boolean | "true" | "false";
    style?: React.CSSProperties;
    tabIndex?: number;
    title?: string;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: React.AriaRole;
    about?: string;
    content?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    rel?: string;
    resource?: string;
    rev?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "search" | "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    'aria-activedescendant'?: string;
    'aria-atomic'?: boolean | "true" | "false";
    'aria-autocomplete'?: "list" | "none" | "inline" | "both";
    'aria-busy'?: boolean | "true" | "false";
    'aria-checked'?: boolean | "true" | "false" | "mixed";
    'aria-colcount'?: number;
    'aria-colindex'?: number;
    'aria-colspan'?: number;
    'aria-controls'?: string;
    'aria-current'?: boolean | "date" | "step" | "time" | "true" | "false" | "page" | "location";
    'aria-describedby'?: string;
    'aria-details'?: string;
    'aria-disabled'?: boolean | "true" | "false";
    'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup";
    'aria-errormessage'?: string;
    'aria-expanded'?: boolean | "true" | "false";
    'aria-flowto'?: string;
    'aria-grabbed'?: boolean | "true" | "false";
    'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    'aria-hidden'?: boolean | "true" | "false";
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling";
    'aria-keyshortcuts'?: string;
    'aria-label'?: string;
    'aria-labelledby'?: string;
    'aria-level'?: number;
    'aria-live'?: "off" | "assertive" | "polite";
    'aria-modal'?: boolean | "true" | "false";
    'aria-multiline'?: boolean | "true" | "false";
    'aria-multiselectable'?: boolean | "true" | "false";
    'aria-orientation'?: "horizontal" | "vertical";
    'aria-owns'?: string;
    'aria-placeholder'?: string;
    'aria-posinset'?: number;
    'aria-pressed'?: boolean | "true" | "false" | "mixed";
    'aria-readonly'?: boolean | "true" | "false";
    'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    'aria-required'?: boolean | "true" | "false";
    'aria-roledescription'?: string;
    'aria-rowcount'?: number;
    'aria-rowindex'?: number;
    'aria-rowspan'?: number;
    'aria-selected'?: boolean | "true" | "false";
    'aria-setsize'?: number;
    'aria-sort'?: "none" | "ascending" | "descending" | "other";
    'aria-valuemax'?: number;
    'aria-valuemin'?: number;
    'aria-valuenow'?: number;
    'aria-valuetext'?: string;
    children?: React.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    };
    onCopy?: React.ClipboardEventHandler<HTMLInputElement>;
    onCopyCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onCut?: React.ClipboardEventHandler<HTMLInputElement>;
    onCutCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onPaste?: React.ClipboardEventHandler<HTMLInputElement>;
    onPasteCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onCompositionEnd?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionEndCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionStart?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionStartCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdate?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onFocus?: React.FocusEventHandler<HTMLInputElement>;
    onFocusCapture?: React.FocusEventHandler<HTMLInputElement>;
    onBlur?: React.FocusEventHandler<HTMLInputElement>;
    onBlurCapture?: React.FocusEventHandler<HTMLInputElement>;
    onChange?: React.FormEventHandler<HTMLInputElement>;
    onChangeCapture?: React.FormEventHandler<HTMLInputElement>;
    onBeforeInput?: React.FormEventHandler<HTMLInputElement>;
    onBeforeInputCapture?: React.FormEventHandler<HTMLInputElement>;
    onInput?: React.FormEventHandler<HTMLInputElement>;
    onInputCapture?: React.FormEventHandler<HTMLInputElement>;
    onReset?: React.FormEventHandler<HTMLInputElement>;
    onResetCapture?: React.FormEventHandler<HTMLInputElement>;
    onSubmit?: React.FormEventHandler<HTMLInputElement>;
    onSubmitCapture?: React.FormEventHandler<HTMLInputElement>;
    onInvalid?: React.FormEventHandler<HTMLInputElement>;
    onInvalidCapture?: React.FormEventHandler<HTMLInputElement>;
    onLoad?: React.ReactEventHandler<HTMLInputElement>;
    onLoadCapture?: React.ReactEventHandler<HTMLInputElement>;
    onError?: React.ReactEventHandler<HTMLInputElement>;
    onErrorCapture?: React.ReactEventHandler<HTMLInputElement>;
    onKeyDown?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyDownCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyPress?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyPressCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyUp?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyUpCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onAbort?: React.ReactEventHandler<HTMLInputElement>;
    onAbortCapture?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlay?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayCapture?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayThrough?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayThroughCapture?: React.ReactEventHandler<HTMLInputElement>;
    onDurationChange?: React.ReactEventHandler<HTMLInputElement>;
    onDurationChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEmptied?: React.ReactEventHandler<HTMLInputElement>;
    onEmptiedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEncrypted?: React.ReactEventHandler<HTMLInputElement>;
    onEncryptedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEnded?: React.ReactEventHandler<HTMLInputElement>;
    onEndedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedData?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedDataCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedMetadata?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedMetadataCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadStart?: React.ReactEventHandler<HTMLInputElement>;
    onLoadStartCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPause?: React.ReactEventHandler<HTMLInputElement>;
    onPauseCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPlay?: React.ReactEventHandler<HTMLInputElement>;
    onPlayCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPlaying?: React.ReactEventHandler<HTMLInputElement>;
    onPlayingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onProgress?: React.ReactEventHandler<HTMLInputElement>;
    onProgressCapture?: React.ReactEventHandler<HTMLInputElement>;
    onRateChange?: React.ReactEventHandler<HTMLInputElement>;
    onRateChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onResize?: React.ReactEventHandler<HTMLInputElement>;
    onResizeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSeeked?: React.ReactEventHandler<HTMLInputElement>;
    onSeekedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSeeking?: React.ReactEventHandler<HTMLInputElement>;
    onSeekingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onStalled?: React.ReactEventHandler<HTMLInputElement>;
    onStalledCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSuspend?: React.ReactEventHandler<HTMLInputElement>;
    onSuspendCapture?: React.ReactEventHandler<HTMLInputElement>;
    onTimeUpdate?: React.ReactEventHandler<HTMLInputElement>;
    onTimeUpdateCapture?: React.ReactEventHandler<HTMLInputElement>;
    onVolumeChange?: React.ReactEventHandler<HTMLInputElement>;
    onVolumeChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onWaiting?: React.ReactEventHandler<HTMLInputElement>;
    onWaitingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onAuxClick?: React.MouseEventHandler<HTMLInputElement>;
    onAuxClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onClick?: React.MouseEventHandler<HTMLInputElement>;
    onClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onContextMenu?: React.MouseEventHandler<HTMLInputElement>;
    onContextMenuCapture?: React.MouseEventHandler<HTMLInputElement>;
    onDoubleClick?: React.MouseEventHandler<HTMLInputElement>;
    onDoubleClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onDrag?: React.DragEventHandler<HTMLInputElement>;
    onDragCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragEnd?: React.DragEventHandler<HTMLInputElement>;
    onDragEndCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragEnter?: React.DragEventHandler<HTMLInputElement>;
    onDragEnterCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragExit?: React.DragEventHandler<HTMLInputElement>;
    onDragExitCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragLeave?: React.DragEventHandler<HTMLInputElement>;
    onDragLeaveCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragOver?: React.DragEventHandler<HTMLInputElement>;
    onDragOverCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragStart?: React.DragEventHandler<HTMLInputElement>;
    onDragStartCapture?: React.DragEventHandler<HTMLInputElement>;
    onDrop?: React.DragEventHandler<HTMLInputElement>;
    onDropCapture?: React.DragEventHandler<HTMLInputElement>;
    onMouseDown?: React.MouseEventHandler<HTMLInputElement>;
    onMouseDownCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseEnter?: React.MouseEventHandler<HTMLInputElement>;
    onMouseLeave?: React.MouseEventHandler<HTMLInputElement>;
    onMouseMove?: React.MouseEventHandler<HTMLInputElement>;
    onMouseMoveCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOut?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOutCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOver?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOverCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseUp?: React.MouseEventHandler<HTMLInputElement>;
    onMouseUpCapture?: React.MouseEventHandler<HTMLInputElement>;
    onSelect?: React.ReactEventHandler<HTMLInputElement>;
    onSelectCapture?: React.ReactEventHandler<HTMLInputElement>;
    onTouchCancel?: React.TouchEventHandler<HTMLInputElement>;
    onTouchCancelCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchEnd?: React.TouchEventHandler<HTMLInputElement>;
    onTouchEndCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchMove?: React.TouchEventHandler<HTMLInputElement>;
    onTouchMoveCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchStart?: React.TouchEventHandler<HTMLInputElement>;
    onTouchStartCapture?: React.TouchEventHandler<HTMLInputElement>;
    onPointerDown?: React.PointerEventHandler<HTMLInputElement>;
    onPointerDownCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerMove?: React.PointerEventHandler<HTMLInputElement>;
    onPointerMoveCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerUp?: React.PointerEventHandler<HTMLInputElement>;
    onPointerUpCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerCancel?: React.PointerEventHandler<HTMLInputElement>;
    onPointerCancelCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerEnter?: React.PointerEventHandler<HTMLInputElement>;
    onPointerEnterCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerLeave?: React.PointerEventHandler<HTMLInputElement>;
    onPointerLeaveCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOver?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOverCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOut?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOutCapture?: React.PointerEventHandler<HTMLInputElement>;
    onGotPointerCapture?: React.PointerEventHandler<HTMLInputElement>;
    onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement>;
    onLostPointerCapture?: React.PointerEventHandler<HTMLInputElement>;
    onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement>;
    onScroll?: React.UIEventHandler<HTMLInputElement>;
    onScrollCapture?: React.UIEventHandler<HTMLInputElement>;
    onWheel?: React.WheelEventHandler<HTMLInputElement>;
    onWheelCapture?: React.WheelEventHandler<HTMLInputElement>;
    onAnimationStart?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationStartCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationEnd?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationEndCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationIteration?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationIterationCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onTransitionEnd?: React.TransitionEventHandler<HTMLInputElement>;
    onTransitionEndCapture?: React.TransitionEventHandler<HTMLInputElement>;
    key?: React.Key;
} & Partial<Pick<import("../../imask/esm").MaskedRegExp, "mask" | "parent" | "prepare" | "prepareChar" | "validate" | "commit" | "format" | "parse" | "overwrite" | "eager" | "skipInvalid">> & {
    unmask?: boolean | "typed";
} & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}> & import("./mixin").ReactMaskProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}>> & import("./mixin").ReactMaskProps<HTMLInputElement, import("./mixin").IMaskMixinProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}>>> & {
    ref?: React.Ref<React.ComponentType<IMaskInputProps<HTMLInputElement, import("./mixin").IMaskMixinProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
        unmask?: boolean | "typed";
    }) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
        unmask?: boolean | "typed";
    }>>>>>;
}, "ref"> | Omit<{
    accept?: string;
    acceptCharset?: string;
    action?: string;
    allowFullScreen?: boolean;
    allowTransparency?: boolean;
    alt?: string;
    as?: string;
    async?: boolean;
    autoComplete?: string;
    autoPlay?: boolean;
    capture?: boolean | "user" | "environment";
    cellPadding?: string | number;
    cellSpacing?: string | number;
    charSet?: string;
    challenge?: string;
    checked?: boolean;
    cite?: string;
    classID?: string;
    cols?: number;
    colSpan?: number;
    controls?: boolean;
    coords?: string;
    crossOrigin?: "" | "anonymous" | "use-credentials";
    data?: string;
    dateTime?: string;
    default?: boolean;
    defer?: boolean;
    disabled?: boolean;
    download?: any;
    encType?: string;
    form?: string;
    formAction?: string;
    formEncType?: string;
    formMethod?: string;
    formNoValidate?: boolean;
    formTarget?: string;
    frameBorder?: string | number;
    headers?: string;
    height?: string | number;
    high?: number;
    href?: string;
    hrefLang?: string;
    htmlFor?: string;
    httpEquiv?: string;
    integrity?: string;
    keyParams?: string;
    keyType?: string;
    kind?: string;
    label?: string;
    list?: string;
    loop?: boolean;
    low?: number;
    manifest?: string;
    marginHeight?: number;
    marginWidth?: number;
    media?: string;
    mediaGroup?: string;
    method?: string;
    minLength?: number;
    multiple?: boolean;
    muted?: boolean;
    name?: string;
    noValidate?: boolean;
    open?: boolean;
    optimum?: number;
    placeholder?: string;
    playsInline?: boolean;
    poster?: string;
    preload?: string;
    readOnly?: boolean;
    required?: boolean;
    reversed?: boolean;
    rows?: number;
    rowSpan?: number;
    sandbox?: string;
    scope?: string;
    scoped?: boolean;
    scrolling?: string;
    seamless?: boolean;
    selected?: boolean;
    shape?: string;
    size?: number;
    sizes?: string;
    span?: number;
    src?: string;
    srcDoc?: string;
    srcLang?: string;
    srcSet?: string;
    start?: number;
    step?: string | number;
    summary?: string;
    target?: string;
    type?: string;
    useMap?: string;
    width?: string | number;
    wmode?: string;
    wrap?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    autoFocus?: boolean;
    className?: string;
    contentEditable?: (boolean | "true" | "false") | "inherit";
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    id?: string;
    lang?: string;
    nonce?: string;
    slot?: string;
    spellCheck?: boolean | "true" | "false";
    style?: React.CSSProperties;
    tabIndex?: number;
    title?: string;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: React.AriaRole;
    about?: string;
    content?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    rel?: string;
    resource?: string;
    rev?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "search" | "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    'aria-activedescendant'?: string;
    'aria-atomic'?: boolean | "true" | "false";
    'aria-autocomplete'?: "list" | "none" | "inline" | "both";
    'aria-busy'?: boolean | "true" | "false";
    'aria-checked'?: boolean | "true" | "false" | "mixed";
    'aria-colcount'?: number;
    'aria-colindex'?: number;
    'aria-colspan'?: number;
    'aria-controls'?: string;
    'aria-current'?: boolean | "date" | "step" | "time" | "true" | "false" | "page" | "location";
    'aria-describedby'?: string;
    'aria-details'?: string;
    'aria-disabled'?: boolean | "true" | "false";
    'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup";
    'aria-errormessage'?: string;
    'aria-expanded'?: boolean | "true" | "false";
    'aria-flowto'?: string;
    'aria-grabbed'?: boolean | "true" | "false";
    'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    'aria-hidden'?: boolean | "true" | "false";
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling";
    'aria-keyshortcuts'?: string;
    'aria-label'?: string;
    'aria-labelledby'?: string;
    'aria-level'?: number;
    'aria-live'?: "off" | "assertive" | "polite";
    'aria-modal'?: boolean | "true" | "false";
    'aria-multiline'?: boolean | "true" | "false";
    'aria-multiselectable'?: boolean | "true" | "false";
    'aria-orientation'?: "horizontal" | "vertical";
    'aria-owns'?: string;
    'aria-placeholder'?: string;
    'aria-posinset'?: number;
    'aria-pressed'?: boolean | "true" | "false" | "mixed";
    'aria-readonly'?: boolean | "true" | "false";
    'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    'aria-required'?: boolean | "true" | "false";
    'aria-roledescription'?: string;
    'aria-rowcount'?: number;
    'aria-rowindex'?: number;
    'aria-rowspan'?: number;
    'aria-selected'?: boolean | "true" | "false";
    'aria-setsize'?: number;
    'aria-sort'?: "none" | "ascending" | "descending" | "other";
    'aria-valuemax'?: number;
    'aria-valuemin'?: number;
    'aria-valuenow'?: number;
    'aria-valuetext'?: string;
    children?: React.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    };
    onCopy?: React.ClipboardEventHandler<HTMLInputElement>;
    onCopyCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onCut?: React.ClipboardEventHandler<HTMLInputElement>;
    onCutCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onPaste?: React.ClipboardEventHandler<HTMLInputElement>;
    onPasteCapture?: React.ClipboardEventHandler<HTMLInputElement>;
    onCompositionEnd?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionEndCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionStart?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionStartCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdate?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLInputElement>;
    onFocus?: React.FocusEventHandler<HTMLInputElement>;
    onFocusCapture?: React.FocusEventHandler<HTMLInputElement>;
    onBlur?: React.FocusEventHandler<HTMLInputElement>;
    onBlurCapture?: React.FocusEventHandler<HTMLInputElement>;
    onChange?: React.FormEventHandler<HTMLInputElement>;
    onChangeCapture?: React.FormEventHandler<HTMLInputElement>;
    onBeforeInput?: React.FormEventHandler<HTMLInputElement>;
    onBeforeInputCapture?: React.FormEventHandler<HTMLInputElement>;
    onInput?: React.FormEventHandler<HTMLInputElement>;
    onInputCapture?: React.FormEventHandler<HTMLInputElement>;
    onReset?: React.FormEventHandler<HTMLInputElement>;
    onResetCapture?: React.FormEventHandler<HTMLInputElement>;
    onSubmit?: React.FormEventHandler<HTMLInputElement>;
    onSubmitCapture?: React.FormEventHandler<HTMLInputElement>;
    onInvalid?: React.FormEventHandler<HTMLInputElement>;
    onInvalidCapture?: React.FormEventHandler<HTMLInputElement>;
    onLoad?: React.ReactEventHandler<HTMLInputElement>;
    onLoadCapture?: React.ReactEventHandler<HTMLInputElement>;
    onError?: React.ReactEventHandler<HTMLInputElement>;
    onErrorCapture?: React.ReactEventHandler<HTMLInputElement>;
    onKeyDown?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyDownCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyPress?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyPressCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyUp?: React.KeyboardEventHandler<HTMLInputElement>;
    onKeyUpCapture?: React.KeyboardEventHandler<HTMLInputElement>;
    onAbort?: React.ReactEventHandler<HTMLInputElement>;
    onAbortCapture?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlay?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayCapture?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayThrough?: React.ReactEventHandler<HTMLInputElement>;
    onCanPlayThroughCapture?: React.ReactEventHandler<HTMLInputElement>;
    onDurationChange?: React.ReactEventHandler<HTMLInputElement>;
    onDurationChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEmptied?: React.ReactEventHandler<HTMLInputElement>;
    onEmptiedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEncrypted?: React.ReactEventHandler<HTMLInputElement>;
    onEncryptedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onEnded?: React.ReactEventHandler<HTMLInputElement>;
    onEndedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedData?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedDataCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedMetadata?: React.ReactEventHandler<HTMLInputElement>;
    onLoadedMetadataCapture?: React.ReactEventHandler<HTMLInputElement>;
    onLoadStart?: React.ReactEventHandler<HTMLInputElement>;
    onLoadStartCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPause?: React.ReactEventHandler<HTMLInputElement>;
    onPauseCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPlay?: React.ReactEventHandler<HTMLInputElement>;
    onPlayCapture?: React.ReactEventHandler<HTMLInputElement>;
    onPlaying?: React.ReactEventHandler<HTMLInputElement>;
    onPlayingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onProgress?: React.ReactEventHandler<HTMLInputElement>;
    onProgressCapture?: React.ReactEventHandler<HTMLInputElement>;
    onRateChange?: React.ReactEventHandler<HTMLInputElement>;
    onRateChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onResize?: React.ReactEventHandler<HTMLInputElement>;
    onResizeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSeeked?: React.ReactEventHandler<HTMLInputElement>;
    onSeekedCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSeeking?: React.ReactEventHandler<HTMLInputElement>;
    onSeekingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onStalled?: React.ReactEventHandler<HTMLInputElement>;
    onStalledCapture?: React.ReactEventHandler<HTMLInputElement>;
    onSuspend?: React.ReactEventHandler<HTMLInputElement>;
    onSuspendCapture?: React.ReactEventHandler<HTMLInputElement>;
    onTimeUpdate?: React.ReactEventHandler<HTMLInputElement>;
    onTimeUpdateCapture?: React.ReactEventHandler<HTMLInputElement>;
    onVolumeChange?: React.ReactEventHandler<HTMLInputElement>;
    onVolumeChangeCapture?: React.ReactEventHandler<HTMLInputElement>;
    onWaiting?: React.ReactEventHandler<HTMLInputElement>;
    onWaitingCapture?: React.ReactEventHandler<HTMLInputElement>;
    onAuxClick?: React.MouseEventHandler<HTMLInputElement>;
    onAuxClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onClick?: React.MouseEventHandler<HTMLInputElement>;
    onClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onContextMenu?: React.MouseEventHandler<HTMLInputElement>;
    onContextMenuCapture?: React.MouseEventHandler<HTMLInputElement>;
    onDoubleClick?: React.MouseEventHandler<HTMLInputElement>;
    onDoubleClickCapture?: React.MouseEventHandler<HTMLInputElement>;
    onDrag?: React.DragEventHandler<HTMLInputElement>;
    onDragCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragEnd?: React.DragEventHandler<HTMLInputElement>;
    onDragEndCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragEnter?: React.DragEventHandler<HTMLInputElement>;
    onDragEnterCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragExit?: React.DragEventHandler<HTMLInputElement>;
    onDragExitCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragLeave?: React.DragEventHandler<HTMLInputElement>;
    onDragLeaveCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragOver?: React.DragEventHandler<HTMLInputElement>;
    onDragOverCapture?: React.DragEventHandler<HTMLInputElement>;
    onDragStart?: React.DragEventHandler<HTMLInputElement>;
    onDragStartCapture?: React.DragEventHandler<HTMLInputElement>;
    onDrop?: React.DragEventHandler<HTMLInputElement>;
    onDropCapture?: React.DragEventHandler<HTMLInputElement>;
    onMouseDown?: React.MouseEventHandler<HTMLInputElement>;
    onMouseDownCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseEnter?: React.MouseEventHandler<HTMLInputElement>;
    onMouseLeave?: React.MouseEventHandler<HTMLInputElement>;
    onMouseMove?: React.MouseEventHandler<HTMLInputElement>;
    onMouseMoveCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOut?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOutCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOver?: React.MouseEventHandler<HTMLInputElement>;
    onMouseOverCapture?: React.MouseEventHandler<HTMLInputElement>;
    onMouseUp?: React.MouseEventHandler<HTMLInputElement>;
    onMouseUpCapture?: React.MouseEventHandler<HTMLInputElement>;
    onSelect?: React.ReactEventHandler<HTMLInputElement>;
    onSelectCapture?: React.ReactEventHandler<HTMLInputElement>;
    onTouchCancel?: React.TouchEventHandler<HTMLInputElement>;
    onTouchCancelCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchEnd?: React.TouchEventHandler<HTMLInputElement>;
    onTouchEndCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchMove?: React.TouchEventHandler<HTMLInputElement>;
    onTouchMoveCapture?: React.TouchEventHandler<HTMLInputElement>;
    onTouchStart?: React.TouchEventHandler<HTMLInputElement>;
    onTouchStartCapture?: React.TouchEventHandler<HTMLInputElement>;
    onPointerDown?: React.PointerEventHandler<HTMLInputElement>;
    onPointerDownCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerMove?: React.PointerEventHandler<HTMLInputElement>;
    onPointerMoveCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerUp?: React.PointerEventHandler<HTMLInputElement>;
    onPointerUpCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerCancel?: React.PointerEventHandler<HTMLInputElement>;
    onPointerCancelCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerEnter?: React.PointerEventHandler<HTMLInputElement>;
    onPointerEnterCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerLeave?: React.PointerEventHandler<HTMLInputElement>;
    onPointerLeaveCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOver?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOverCapture?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOut?: React.PointerEventHandler<HTMLInputElement>;
    onPointerOutCapture?: React.PointerEventHandler<HTMLInputElement>;
    onGotPointerCapture?: React.PointerEventHandler<HTMLInputElement>;
    onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement>;
    onLostPointerCapture?: React.PointerEventHandler<HTMLInputElement>;
    onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement>;
    onScroll?: React.UIEventHandler<HTMLInputElement>;
    onScrollCapture?: React.UIEventHandler<HTMLInputElement>;
    onWheel?: React.WheelEventHandler<HTMLInputElement>;
    onWheelCapture?: React.WheelEventHandler<HTMLInputElement>;
    onAnimationStart?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationStartCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationEnd?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationEndCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationIteration?: React.AnimationEventHandler<HTMLInputElement>;
    onAnimationIterationCapture?: React.AnimationEventHandler<HTMLInputElement>;
    onTransitionEnd?: React.TransitionEventHandler<HTMLInputElement>;
    onTransitionEndCapture?: React.TransitionEventHandler<HTMLInputElement>;
    key?: React.Key;
} & Partial<Pick<import("../../imask/esm").MaskedFunction<any>, "mask" | "parent" | "prepare" | "prepareChar" | "validate" | "commit" | "format" | "parse" | "overwrite" | "eager" | "skipInvalid">> & {
    unmask?: boolean | "typed";
} & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}> & import("./mixin").ReactMaskProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}>> & import("./mixin").ReactMaskProps<HTMLInputElement, import("./mixin").IMaskMixinProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
    unmask?: boolean | "typed";
}>>> & {
    ref?: React.Ref<React.ComponentType<IMaskInputProps<HTMLInputElement, import("./mixin").IMaskMixinProps<HTMLInputElement, (import("../../imask/esm").FactoryOpts & {
        unmask?: boolean | "typed";
    }) & import("./mixin").ReactMaskProps<HTMLInputElement, import("../../imask/esm").FactoryOpts & {
        unmask?: boolean | "typed";
    }>>>>>;
}, "ref">) & React.RefAttributes<unknown>>;
export default IMaskInput;
//# sourceMappingURL=input.d.ts.map