(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('imask'), require('react'), require('prop-types')) :
  typeof define === 'function' && define.amd ? define(['exports', 'imask', 'react', 'prop-types'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ReactIMask = {}, global.IMask, global.React, global.PropTypes));
})(this, (function (exports, IMask, React, PropTypes) { 'use strict';

  const MASK_PROPS = {
    // common
    mask: PropTypes.oneOfType([PropTypes.array, PropTypes.func, PropTypes.string, PropTypes.instanceOf(RegExp), PropTypes.oneOf([Date, Number, IMask.Masked]), PropTypes.instanceOf(IMask.Masked)]),
    value: PropTypes.any,
    unmask: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['typed'])]),
    prepare: PropTypes.func,
    prepareChar: PropTypes.func,
    validate: PropTypes.func,
    commit: PropTypes.func,
    overwrite: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['shift'])]),
    eager: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['append', 'remove'])]),
    skipInvalid: PropTypes.bool,
    // events
    onAccept: PropTypes.func,
    onComplete: PropTypes.func,
    // pattern
    placeholderChar: PropTypes.string,
    displayChar: PropTypes.string,
    lazy: PropTypes.bool,
    definitions: PropTypes.object,
    blocks: PropTypes.object,
    // enum
    enum: PropTypes.arrayOf(PropTypes.string),
    // range
    maxLength: PropTypes.number,
    from: PropTypes.number,
    to: PropTypes.number,
    // date
    pattern: PropTypes.string,
    format: PropTypes.func,
    parse: PropTypes.func,
    autofix: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['pad'])]),
    // number
    radix: PropTypes.string,
    thousandsSeparator: PropTypes.string,
    mapToRadix: PropTypes.arrayOf(PropTypes.string),
    scale: PropTypes.number,
    normalizeZeros: PropTypes.bool,
    padFractionalZeros: PropTypes.bool,
    min: PropTypes.oneOfType([PropTypes.number, PropTypes.instanceOf(Date)]),
    max: PropTypes.oneOfType([PropTypes.number, PropTypes.instanceOf(Date)]),
    // dynamic
    dispatch: PropTypes.func,
    // ref
    inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
      current: PropTypes.object
    })])
  };
  const MASK_PROPS_NAMES = Object.keys(MASK_PROPS).filter(p => p !== 'value');
  const NON_MASK_OPTIONS_PROPS_NAMES = ['value', 'unmask', 'onAccept', 'onComplete', 'inputRef'];
  const MASK_OPTIONS_PROPS_NAMES = MASK_PROPS_NAMES.filter(pName => NON_MASK_OPTIONS_PROPS_NAMES.indexOf(pName) < 0);
  function IMaskMixin(ComposedComponent) {
    var _class;
    const MaskedComponent = (_class = class MaskedComponent extends React.Component {
      constructor(props) {
        super(props);
        this.element = void 0;
        this.maskRef = void 0;
        this._inputRef = this._inputRef.bind(this);
      }
      componentDidMount() {
        if (!this.props.mask) return;
        this.initMask();
      }
      componentDidUpdate() {
        const props = this.props;
        const maskOptions = this._extractMaskOptionsFromProps(props);
        if (maskOptions.mask) {
          if (this.maskRef) {
            this.maskRef.updateOptions(maskOptions);
            if ('value' in props) this.maskValue = props.value;
          } else {
            this.initMask(maskOptions);
          }
        } else {
          this.destroyMask();
          if ('value' in props) {
            var _this$element;
            if ((_this$element = this.element) != null && _this$element.isContentEditable && this.element.tagName !== 'INPUT' && this.element.tagName !== 'TEXTAREA') this.element.textContent = props.value;else this.element.value = props.value;
          }
        }
      }
      componentWillUnmount() {
        this.destroyMask();
      }
      _inputRef(el) {
        this.element = el;
        if (this.props.inputRef) {
          if (Object.prototype.hasOwnProperty.call(this.props.inputRef, 'current')) this.props.inputRef.current = el;else this.props.inputRef(el);
        }
      }
      initMask(maskOptions) {
        if (maskOptions === void 0) {
          maskOptions = this._extractMaskOptionsFromProps(this.props);
        }
        this.maskRef = IMask(this.element, maskOptions).on('accept', this._onAccept.bind(this)).on('complete', this._onComplete.bind(this));
        if ('value' in this.props) this.maskValue = this.props.value;
      }
      destroyMask() {
        if (this.maskRef) {
          this.maskRef.destroy();
          delete this.maskRef;
        }
      }
      _extractMaskOptionsFromProps(props) {
        const {
          ...cloneProps
        } = props;

        // keep only mask options
        Object.keys(cloneProps).filter(prop => MASK_OPTIONS_PROPS_NAMES.indexOf(prop) < 0).forEach(nonMaskProp => {
          delete cloneProps[nonMaskProp];
        });
        return cloneProps;
      }
      _extractNonMaskProps(props) {
        const {
          ...cloneProps
        } = props;
        MASK_PROPS_NAMES.forEach(maskProp => {
          delete cloneProps[maskProp];
        });
        return cloneProps;
      }
      get maskValue() {
        if (this.props.unmask === 'typed') return this.maskRef.typedValue;
        if (this.props.unmask) return this.maskRef.unmaskedValue;
        return this.maskRef.value;
      }
      set maskValue(value) {
        value = value == null && this.props.unmask !== 'typed' ? '' : value;
        if (this.props.unmask === 'typed') this.maskRef.typedValue = value;else if (this.props.unmask) this.maskRef.unmaskedValue = value;else this.maskRef.value = value;
      }
      _onAccept(e) {
        if (this.props.onAccept && this.maskRef) this.props.onAccept(this.maskValue, this.maskRef, e);
      }
      _onComplete(e) {
        if (this.props.onComplete && this.maskRef) this.props.onComplete(this.maskValue, this.maskRef, e);
      }
      render() {
        return React.createElement(ComposedComponent, {
          ...this._extractNonMaskProps(this.props),
          inputRef: this._inputRef
        });
      }
    }, _class.displayName = void 0, _class.propTypes = void 0, _class);
    const nestedComponentName = ComposedComponent.displayName || ComposedComponent.name || 'Component';
    MaskedComponent.displayName = "IMask(" + nestedComponentName + ")";
    MaskedComponent.propTypes = MASK_PROPS;
    return React.forwardRef((props, ref) => React.createElement(MaskedComponent, {
      ...props,
      ref
    }));
  }

  const IMaskInputClass = IMaskMixin(_ref => {
    let {
      inputRef,
      ...props
    } = _ref;
    return React.createElement('input', {
      ...props,
      ref: inputRef
    });
  });
  const IMaskInputFn = (props, ref) => React.createElement(IMaskInputClass, {
    ...props,
    ref
  });
  const IMaskInput = React.forwardRef(IMaskInputFn);

  function useIMask(opts, _temp) {
    let {
      onAccept,
      onComplete
    } = _temp === void 0 ? {} : _temp;
    const ref = React.useRef(null);
    const maskRef = React.useRef(null);
    const [initialized, setInitialized] = React.useState(false);
    const [lastAcceptState, setLastAcceptState] = React.useState({});
    const [value, setValue] = React.useState('');
    const [unmaskedValue, setUnmaskedValue] = React.useState('');
    const [typedValue, setTypedValue] = React.useState();
    const _destroyMask = React.useCallback(() => {
      var _maskRef$current;
      (_maskRef$current = maskRef.current) == null ? void 0 : _maskRef$current.destroy();
      maskRef.current = null;
    }, []);
    const _onAccept = React.useCallback(event => {
      const m = maskRef.current;
      if (!m) return;
      setLastAcceptState({
        value: m.value,
        unmaskedValue: m.unmaskedValue,
        typedValue: m.typedValue
      });
      setTypedValue(m.typedValue);
      setUnmaskedValue(m.unmaskedValue);
      setValue(m.value);
      onAccept == null ? void 0 : onAccept(m.value, m, event);
    }, [onAccept]);
    const _onComplete = React.useCallback(() => maskRef.current && (onComplete == null ? void 0 : onComplete(maskRef.current.value, maskRef.current)), [onComplete]);
    React.useEffect(() => {
      const el = ref.current;
      if (!el || !(opts != null && opts.mask)) return _destroyMask();
      const mask = maskRef.current;
      if (!mask) {
        if (el && opts != null && opts.mask) {
          maskRef.current = IMask(el, opts);
          _onAccept();
        }
      } else {
        mask == null ? void 0 : mask.updateOptions(opts);
      }
      setInitialized(Boolean(maskRef.current));
    }, [opts, _destroyMask, _onAccept]);
    React.useEffect(() => {
      if (!maskRef.current) return;
      const mask = maskRef.current;
      mask.on('accept', _onAccept);
      mask.on('complete', _onComplete);
      return () => {
        mask.off('accept', _onAccept);
        mask.off('complete', _onComplete);
      };
    }, [_onAccept, _onComplete]);
    React.useEffect(() => {
      const {
        value: lastAcceptValue,
        ...state
      } = lastAcceptState;
      const mask = maskRef.current;
      if (mask && initialized && lastAcceptValue !== value) mask.value = value;
      setLastAcceptState(state);
    }, [value]);
    React.useEffect(() => {
      const {
        unmaskedValue: lastAcceptUnmaskedValue,
        ...state
      } = lastAcceptState;
      const mask = maskRef.current;
      if (mask && initialized && lastAcceptUnmaskedValue !== unmaskedValue) mask.unmaskedValue = unmaskedValue;
      setLastAcceptState(state);
    }, [unmaskedValue]);
    React.useEffect(() => {
      const {
        typedValue: lastAcceptTypedValue,
        ...state
      } = lastAcceptState;
      const mask = maskRef.current;
      if (mask && initialized && lastAcceptTypedValue !== typedValue) mask.typedValue = typedValue;
      setLastAcceptState(state);
    }, [typedValue]);
    React.useEffect(() => _destroyMask, [_destroyMask]);
    return {
      ref,
      maskRef,
      value,
      setValue,
      unmaskedValue,
      setUnmaskedValue,
      typedValue,
      setTypedValue
    };
  }

  exports.IMask = IMask;
  exports.IMaskInput = IMaskInput;
  exports.IMaskMixin = IMaskMixin;
  exports.useIMask = useIMask;

}));
//# sourceMappingURL=react-imask.js.map
