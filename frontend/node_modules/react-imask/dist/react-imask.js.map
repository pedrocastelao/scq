{"version":3,"file":"react-imask.js","sources":["../src/mixin.ts","../src/input.ts","../src/hook.ts"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport IMask, { type InputMask, type InputMaskElement, type FactoryOpts, type AllFactoryStaticOpts } from 'imask';\n\n\nexport\ntype Falsy = false | 0 | \"\" | null | undefined;\n\ntype ReactMaskOpts = FactoryOpts & { unmask?: 'typed' | boolean };\n\nexport\ntype UnmaskValue<Opts extends ReactMaskOpts> =\n  Opts['unmask'] extends 'typed' ? InputMask<Opts>['typedValue'] :\n  Opts['unmask'] extends Falsy ? InputMask<Opts>['value'] :\n  InputMask<Opts>['unmaskedValue']\n;\n\nexport\ntype ReactMaskProps<\n  MaskElement extends InputMaskElement,\n  Opts extends ReactMaskOpts=ReactMaskOpts,\n> = {\n  onAccept?: (value: UnmaskValue<Opts>, maskRef: InputMask<Opts>, e?: InputEvent) => void;\n  onComplete?: (value: UnmaskValue<Opts>, maskRef: InputMask<Opts>, e?: InputEvent) => void;\n  unmask?: Opts['unmask'];\n  value?: UnmaskValue<Opts>;\n  inputRef?: React.Ref<MaskElement>;\n  ref?: React.Ref<React.ComponentType<IMaskInputProps<MaskElement>>>;\n}\n\nconst MASK_PROPS: { [key in keyof (AllFactoryStaticOpts & ReactMaskProps<InputMaskElement, AllFactoryStaticOpts>)]: any } = {\n  // common\n  mask: PropTypes.oneOfType([\n    PropTypes.array,\n    PropTypes.func,\n    PropTypes.string,\n    PropTypes.instanceOf(RegExp),\n    PropTypes.oneOf([Date, Number, IMask.Masked]),\n    PropTypes.instanceOf(IMask.Masked),\n  ]),\n  value: PropTypes.any,\n  unmask: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf(['typed']),\n  ]),\n  prepare: PropTypes.func,\n  prepareChar: PropTypes.func,\n  validate: PropTypes.func,\n  commit: PropTypes.func,\n  overwrite: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf(['shift']),\n  ]),\n  eager: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf(['append', 'remove']),\n  ]),\n  skipInvalid: PropTypes.bool,\n\n  // events\n  onAccept: PropTypes.func,\n  onComplete: PropTypes.func,\n\n  // pattern\n  placeholderChar: PropTypes.string,\n  displayChar: PropTypes.string,\n  lazy: PropTypes.bool,\n  definitions: PropTypes.object,\n  blocks: PropTypes.object,\n\n  // enum\n  enum: PropTypes.arrayOf(PropTypes.string),\n\n  // range\n  maxLength: PropTypes.number,\n  from: PropTypes.number,\n  to: PropTypes.number,\n\n  // date\n  pattern: PropTypes.string,\n  format: PropTypes.func,\n  parse: PropTypes.func,\n  autofix: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf(['pad']),\n  ]),\n\n  // number\n  radix: PropTypes.string,\n  thousandsSeparator: PropTypes.string,\n  mapToRadix: PropTypes.arrayOf(PropTypes.string),\n  scale: PropTypes.number,\n  normalizeZeros: PropTypes.bool,\n  padFractionalZeros: PropTypes.bool,\n  min: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.instanceOf(Date),\n  ]),\n  max: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.instanceOf(Date),\n  ]),\n\n  // dynamic\n  dispatch: PropTypes.func,\n\n  // ref\n  inputRef: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.object }),\n  ]),\n} as const;\n\nconst MASK_PROPS_NAMES = (Object.keys(MASK_PROPS) as Array<keyof typeof MASK_PROPS>).filter(p => p !== 'value');\nconst NON_MASK_OPTIONS_PROPS_NAMES = ['value', 'unmask', 'onAccept', 'onComplete', 'inputRef'] as const;\n\ntype ReactElementProps<MaskElement extends InputMaskElement> = Omit<Omit<React.HTMLProps<MaskElement>, keyof typeof MASK_PROPS>, typeof NON_MASK_OPTIONS_PROPS_NAMES[number]>;\ntype NonMaskProps<\n  MaskElement extends InputMaskElement,\n  Props extends IMaskMixinProps<MaskElement>=IMaskMixinProps<MaskElement>\n> = Omit<Props, keyof FactoryOpts>;\n\nexport\ntype ReactMixinComponent<\n  MaskElement extends InputMaskElement,\n> = React.ComponentType<ReactElementProps<MaskElement> & { inputRef: React.Ref<MaskElement>; }>;\n\ntype MaskPropsKeys = Exclude<keyof typeof MASK_PROPS, typeof NON_MASK_OPTIONS_PROPS_NAMES[number]>;\nconst MASK_OPTIONS_PROPS_NAMES = MASK_PROPS_NAMES.filter(pName =>\n  NON_MASK_OPTIONS_PROPS_NAMES.indexOf(pName as typeof NON_MASK_OPTIONS_PROPS_NAMES[number]) < 0\n) as Array<MaskPropsKeys>;\n\ntype MaskOpts<\n  MaskElement extends InputMaskElement,\n  Props extends IMaskInputProps<MaskElement>=IMaskInputProps<MaskElement>\n> = Extract<Props, FactoryOpts>;\n\nexport type IMaskMixinProps<\n  MaskElement extends InputMaskElement,\n  Props extends ReactMaskOpts & ReactMaskProps<MaskElement>=ReactMaskOpts & ReactMaskProps<MaskElement>,\n> = Props & ReactMaskProps<MaskElement, Props>;\n\nexport type IMaskInputProps<\n  MaskElement extends InputMaskElement,\n  Props extends IMaskMixinProps<MaskElement>=IMaskMixinProps<MaskElement>,\n> = ReactElementProps<MaskElement> & IMaskMixinProps<MaskElement, Props>;\n\n\nexport default function IMaskMixin<\n  MaskElement extends InputMaskElement,\n  Props extends IMaskInputProps<MaskElement>,\n>(ComposedComponent: ReactMixinComponent<MaskElement>) {\n  const MaskedComponent = class extends React.Component<Props> {\n    static displayName: string;\n    static propTypes: typeof MASK_PROPS;\n\n    element: MaskElement;\n    maskRef: InputMask<MaskOpts<MaskElement, Props>>;\n\n    constructor (props: Props) {\n      super(props);\n      this._inputRef = this._inputRef.bind(this);\n    }\n\n    componentDidMount () {\n      if (!this.props.mask) return;\n\n      this.initMask();\n    }\n\n    componentDidUpdate () {\n      const props = this.props;\n      const maskOptions = this._extractMaskOptionsFromProps(props);\n      if (maskOptions.mask) {\n        if (this.maskRef) {\n          this.maskRef.updateOptions(maskOptions);\n          if ('value' in props) this.maskValue = props.value;\n        } else {\n          this.initMask(maskOptions);\n        }\n      } else {\n        this.destroyMask();\n        if ('value' in props) {\n          if ((this.element as HTMLElement)?.isContentEditable && (this.element as HTMLElement).tagName !== 'INPUT' && (this.element as HTMLElement).tagName !== 'TEXTAREA') (this.element as HTMLElement).textContent = props.value;\n          else (this.element as HTMLInputElement).value = props.value;\n        }\n      }\n    }\n\n    componentWillUnmount () {\n      this.destroyMask();\n    }\n\n    _inputRef (el: MaskElement) {\n      this.element = el;\n      if (this.props.inputRef) {\n        if (Object.prototype.hasOwnProperty.call(this.props.inputRef, 'current'))\n          (this.props.inputRef as React.MutableRefObject<MaskElement>).current = el;\n        else\n          (this.props.inputRef as React.RefCallback<MaskElement>)(el);\n      }\n    }\n\n    initMask (maskOptions: MaskOpts<MaskElement, Props> = this._extractMaskOptionsFromProps(this.props)) {\n      this.maskRef = IMask(this.element, maskOptions)\n        .on('accept', this._onAccept.bind(this))\n        .on('complete', this._onComplete.bind(this));\n\n      if ('value' in this.props) this.maskValue = this.props.value;\n    }\n\n    destroyMask () {\n      if (this.maskRef) {\n        this.maskRef.destroy();\n        delete this.maskRef;\n      }\n    }\n\n    _extractMaskOptionsFromProps (props: Readonly<Props>): MaskOpts<MaskElement, Props> {\n      const { ...cloneProps }: Readonly<Props> = props;\n\n      // keep only mask options\n      (Object.keys(cloneProps) as Array<keyof Props>)\n        .filter(prop => MASK_OPTIONS_PROPS_NAMES.indexOf(prop as MaskPropsKeys) < 0)\n        .forEach(nonMaskProp => {\n          delete cloneProps[nonMaskProp];\n        });\n\n      return cloneProps as MaskOpts<MaskElement, Props>;\n    }\n\n    _extractNonMaskProps (props: Readonly<Props>): NonMaskProps<MaskElement, Props> {\n      const { ...cloneProps }: Readonly<Props> = props;\n\n      (MASK_PROPS_NAMES as Array<keyof Props>).forEach(maskProp => {\n        delete cloneProps[maskProp];\n      });\n\n      return cloneProps as NonMaskProps<MaskElement, Props>;\n    }\n\n    get maskValue (): UnmaskValue<Props> {\n      if (this.props.unmask === 'typed') return this.maskRef.typedValue as unknown as UnmaskValue<Props>;\n      if (this.props.unmask) return this.maskRef.unmaskedValue as unknown as UnmaskValue<Props>;\n      return this.maskRef.value as unknown as UnmaskValue<Props>;\n    }\n\n    set maskValue (value: UnmaskValue<Props>) {\n      value = (value == null && this.props.unmask !== 'typed' ? '' : value) as UnmaskValue<Props>;\n      if (this.props.unmask === 'typed') this.maskRef.typedValue = value;\n      else if (this.props.unmask) this.maskRef.unmaskedValue = value;\n      else this.maskRef.value = value;\n    }\n\n    _onAccept (e?: InputEvent) {\n      if (this.props.onAccept && this.maskRef) this.props.onAccept(this.maskValue, this.maskRef, e);\n    }\n\n    _onComplete (e?: InputEvent) {\n      if (this.props.onComplete && this.maskRef) this.props.onComplete(this.maskValue, this.maskRef, e);\n    }\n\n    render () {\n      return React.createElement(ComposedComponent, {\n        ...this._extractNonMaskProps(this.props),\n        inputRef: this._inputRef,\n      });\n    }\n  };\n\n  const nestedComponentName = ComposedComponent.displayName || ComposedComponent.name || 'Component';\n  MaskedComponent.displayName = `IMask(${nestedComponentName})`;\n  MaskedComponent.propTypes = MASK_PROPS;\n\n  return React.forwardRef<\n    React.ComponentType<Props>,\n    Props\n  >((props, ref) => React.createElement(MaskedComponent, { ...props, ref }));\n}\n","import React from 'react';\nimport IMaskMixin, { IMaskInputProps } from './mixin';\n\n\nconst IMaskInputClass = IMaskMixin(({ inputRef, ...props }) =>\n  React.createElement('input', {\n    ...props,\n    ref: inputRef,\n  })\n);\n\nconst IMaskInputFn = <\n  Props extends IMaskInputProps<HTMLInputElement>,\n>(\n  props: Props,\n  ref: React.Ref<React.ComponentType<Props>>\n) =>\n  React.createElement(IMaskInputClass, { ...props, ref })\n;\n\nconst IMaskInput = React.forwardRef(IMaskInputFn as <\n  Props extends IMaskInputProps<HTMLInputElement>,\n>(\n  props: Props & { ref?: React.Ref<React.ComponentType<Props>> }\n) => React.ReactElement<Props>);\n\n\nexport default IMaskInput;\n","import IMask, { type InputMask, type InputMaskElement, type FactoryOpts } from 'imask';\nimport { useEffect, useCallback, useState, useRef, Dispatch } from 'react';\nimport type { MutableRefObject } from 'react';\nimport type { ReactMaskProps } from './mixin';\n\n\nexport default\nfunction useIMask<\n  MaskElement extends InputMaskElement,\n  Opts extends FactoryOpts,\n>(\n  opts: Opts,\n  { onAccept, onComplete }: Partial<Pick<ReactMaskProps<MaskElement, Opts>, 'onAccept' | 'onComplete'>> = {}\n): {\n  ref: MutableRefObject<MaskElement>,\n  maskRef: MutableRefObject<InputMask<Opts>>,\n  value: InputMask<Opts>['value'],\n  setValue: Dispatch<InputMask<Opts>['value']>,\n  unmaskedValue: InputMask<Opts>['unmaskedValue'],\n  setUnmaskedValue: Dispatch<InputMask<Opts>['unmaskedValue']>,\n  typedValue: InputMask<Opts>['typedValue'],\n  setTypedValue: Dispatch<InputMask<Opts>['typedValue']>,\n} {\n  const ref = useRef<MaskElement>(null);\n  const maskRef = useRef<InputMask<Opts>>(null);\n  const [initialized, setInitialized] = useState<boolean>(false);\n  const [lastAcceptState, setLastAcceptState] = useState<{\n    value?: InputMask<Opts>['value'],\n    unmaskedValue?: InputMask<Opts>['unmaskedValue'],\n    typedValue?: InputMask<Opts>['typedValue'],\n  }>({});\n  const [value, setValue] = useState<InputMask<Opts>['value']>('');\n  const [unmaskedValue, setUnmaskedValue] = useState<InputMask<Opts>['unmaskedValue']>('');\n  const [typedValue, setTypedValue] = useState<InputMask<Opts>['typedValue']>();\n\n  const _destroyMask = useCallback(() => {\n    maskRef.current?.destroy();\n    maskRef.current = null;\n  }, []);\n\n  const _onAccept = useCallback(\n    (event?: InputEvent) => {\n      const m = maskRef.current;\n      if (!m) return;\n\n      setLastAcceptState({\n        value: m.value,\n        unmaskedValue: m.unmaskedValue,\n        typedValue: m.typedValue,\n      });\n      setTypedValue(m.typedValue);\n      setUnmaskedValue(m.unmaskedValue);\n      setValue(m.value);\n      onAccept?.(m.value, m, event);\n    },\n    [onAccept],\n  );\n\n  const _onComplete = useCallback(\n    () => maskRef.current && onComplete?.(maskRef.current.value, maskRef.current),\n    [onComplete],\n  );\n\n  useEffect(() => {\n    const el = ref.current;\n\n    if (!el || !opts?.mask) return _destroyMask();\n\n    const mask = maskRef.current;\n\n    if (!mask) {\n      if (el && opts?.mask) {\n        maskRef.current = IMask(el, opts);\n        _onAccept();\n      }\n    } else {\n      mask?.updateOptions(opts);\n    }\n    setInitialized(Boolean(maskRef.current));\n  }, [opts, _destroyMask, _onAccept]);\n\n  useEffect(() => {\n    if (!maskRef.current) return;\n\n    const mask = maskRef.current;\n\n    mask.on('accept', _onAccept);\n    mask.on('complete', _onComplete);\n\n    return () => {\n      mask.off('accept', _onAccept);\n      mask.off('complete', _onComplete);\n    };\n  }, [_onAccept, _onComplete]);\n\n  useEffect(() => {\n    const { value: lastAcceptValue, ...state } = lastAcceptState;\n    const mask = maskRef.current;\n    if (mask && initialized && lastAcceptValue !== value) mask.value = value;\n    setLastAcceptState(state);\n  }, [value]);\n\n  useEffect(() => {\n    const { unmaskedValue: lastAcceptUnmaskedValue, ...state } = lastAcceptState;\n    const mask = maskRef.current;\n    if (mask && initialized && lastAcceptUnmaskedValue !== unmaskedValue) mask.unmaskedValue = unmaskedValue;\n    setLastAcceptState(state);\n  }, [unmaskedValue]);\n\n  useEffect(() => {\n    const { typedValue: lastAcceptTypedValue, ...state } = lastAcceptState;\n    const mask = maskRef.current;\n    if (mask && initialized && lastAcceptTypedValue !== typedValue) mask.typedValue = typedValue;\n    setLastAcceptState(state);\n  }, [typedValue]);\n\n  useEffect(() => _destroyMask, [_destroyMask]);\n\n  return {\n    ref,\n    maskRef,\n    value, setValue,\n    unmaskedValue, setUnmaskedValue,\n    typedValue, setTypedValue,\n  };\n}\n"],"names":["MASK_PROPS","mask","PropTypes","oneOfType","array","func","string","instanceOf","RegExp","oneOf","Date","Number","IMask","Masked","value","any","unmask","bool","prepare","prepareChar","validate","commit","overwrite","eager","skipInvalid","onAccept","onComplete","placeholderChar","displayChar","lazy","definitions","object","blocks","enum","arrayOf","maxLength","number","from","to","pattern","format","parse","autofix","radix","thousandsSeparator","mapToRadix","scale","normalizeZeros","padFractionalZeros","min","max","dispatch","inputRef","shape","current","MASK_PROPS_NAMES","Object","keys","filter","p","NON_MASK_OPTIONS_PROPS_NAMES","MASK_OPTIONS_PROPS_NAMES","pName","indexOf","IMaskMixin","ComposedComponent","_class","MaskedComponent","React","Component","constructor","props","element","maskRef","_inputRef","bind","componentDidMount","initMask","componentDidUpdate","maskOptions","_extractMaskOptionsFromProps","updateOptions","maskValue","destroyMask","_this$element","isContentEditable","tagName","textContent","componentWillUnmount","el","prototype","hasOwnProperty","call","on","_onAccept","_onComplete","destroy","cloneProps","prop","forEach","nonMaskProp","_extractNonMaskProps","maskProp","typedValue","unmaskedValue","e","render","createElement","displayName","propTypes","nestedComponentName","name","forwardRef","ref","IMaskInputClass","_ref","IMaskInputFn","IMaskInput","useIMask","opts","_temp","useRef","initialized","setInitialized","useState","lastAcceptState","setLastAcceptState","setValue","setUnmaskedValue","setTypedValue","_destroyMask","useCallback","_maskRef$current","event","m","useEffect","Boolean","off","lastAcceptValue","state","lastAcceptUnmaskedValue","lastAcceptTypedValue"],"mappings":"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"}